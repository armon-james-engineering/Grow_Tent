
001GrowTent.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800c0e4  0800c0e4  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4fc  0800c4fc  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c504  0800c504  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c504  0800c504  0001c504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c508  0800c508  0001c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800c50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  2000043c  0800c948  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  0800c948  00020ed0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e29  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000466f  00000000  00000000  0004128f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00045900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  00047418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287b2  00000000  00000000  00048d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ce5  00000000  00000000  000714da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8bcc  00000000  00000000  0009a1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074bc  00000000  00000000  00172ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000043c 	.word	0x2000043c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0cc 	.word	0x0800c0cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000440 	.word	0x20000440
 80001cc:	0800c0cc 	.word	0x0800c0cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000588:	4904      	ldr	r1, [pc, #16]	; (800059c <MX_FATFS_Init+0x18>)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_FATFS_Init+0x1c>)
 800058c:	f003 f85a 	bl	8003644 <FATFS_LinkDriver>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <MX_FATFS_Init+0x20>)
 8000596:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000045c 	.word	0x2000045c
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000458 	.word	0x20000458

080005a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80005ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
	...

080005b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <USER_initialize+0x24>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
    return USER_SPI_initialize(pdrv);;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f9e4 	bl	8000998 <USER_SPI_initialize>
 80005d0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <USER_status+0x24>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fabc 	bl	8000b70 <USER_SPI_status>
 80005f8:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4603      	mov	r3, r0
 8000616:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8000618:	7bf8      	ldrb	r0, [r7, #15]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	f000 faba 	bl	8000b98 <USER_SPI_read>
 8000624:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b084      	sub	sp, #16
 8000632:	af00      	add	r7, sp, #0
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800063e:	7bf8      	ldrb	r0, [r7, #15]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	f000 fb0d 	bl	8000c64 <USER_SPI_write>
 800064a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	603a      	str	r2, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	460b      	mov	r3, r1
 8000662:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8000668:	79b9      	ldrb	r1, [r7, #6]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fb74 	bl	8000d5c <USER_SPI_ioctl>
 8000674:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8000688:	f005 fbba 	bl	8005e00 <HAL_GetTick>
 800068c:	4603      	mov	r3, r0
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <SPI_Timer_On+0x20>)
 8000690:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <SPI_Timer_On+0x24>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000464 	.word	0x20000464
 80006a4:	20000468 	.word	0x20000468

080006a8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80006ac:	f005 fba8 	bl	8005e00 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SPI_Timer_Status+0x24>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1ad2      	subs	r2, r2, r3
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <SPI_Timer_Status+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	bf34      	ite	cc
 80006c0:	2301      	movcc	r3, #1
 80006c2:	2300      	movcs	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000464 	.word	0x20000464
 80006d0:	20000468 	.word	0x20000468

080006d4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80006de:	f107 020f 	add.w	r2, r7, #15
 80006e2:	1df9      	adds	r1, r7, #7
 80006e4:	2332      	movs	r3, #50	; 0x32
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <xchg_spi+0x28>)
 80006ec:	f008 fcae 	bl	800904c <HAL_SPI_TransmitReceive>
    return rxDat;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000e3c 	.word	0x20000e3c

08000700 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e00a      	b.n	8000726 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	18d4      	adds	r4, r2, r3
 8000716:	20ff      	movs	r0, #255	; 0xff
 8000718:	f7ff ffdc 	bl	80006d4 <xchg_spi>
 800071c:	4603      	mov	r3, r0
 800071e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3301      	adds	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d3f0      	bcc.n	8000710 <rcvr_spi_multi+0x10>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e009      	b.n	800075c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffbf 	bl	80006d4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d3f1      	bcc.n	8000748 <xmit_spi_multi+0x10>
	}
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8000776:	f005 fb43 	bl	8005e00 <HAL_GetTick>
 800077a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8000780:	20ff      	movs	r0, #255	; 0xff
 8000782:	f7ff ffa7 	bl	80006d4 <xchg_spi>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2bff      	cmp	r3, #255	; 0xff
 800078e:	d007      	beq.n	80007a0 <wait_ready+0x32>
 8000790:	f005 fb36 	bl	8005e00 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8ef      	bhi.n	8000780 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2bff      	cmp	r3, #255	; 0xff
 80007a4:	bf0c      	ite	eq
 80007a6:	2301      	moveq	r3, #1
 80007a8:	2300      	movne	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f005 fdf5 	bl	80063b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80007c6:	20ff      	movs	r0, #255	; 0xff
 80007c8:	f7ff ff84 	bl	80006d4 <xchg_spi>

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f005 fde7 	bl	80063b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80007e2:	20ff      	movs	r0, #255	; 0xff
 80007e4:	f7ff ff76 	bl	80006d4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80007e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ec:	f7ff ffbf 	bl	800076e <wait_ready>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <spiselect+0x2a>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e002      	b.n	8000800 <spiselect+0x30>

	despiselect();
 80007fa:	f7ff ffdb 	bl	80007b4 <despiselect>
	return 0;	/* Timeout */
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	bd80      	pop	{r7, pc}

08000804 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800080e:	20c8      	movs	r0, #200	; 0xc8
 8000810:	f7ff ff36 	bl	8000680 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8000814:	20ff      	movs	r0, #255	; 0xff
 8000816:	f7ff ff5d 	bl	80006d4 <xchg_spi>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2bff      	cmp	r3, #255	; 0xff
 8000822:	d104      	bne.n	800082e <rcvr_datablock+0x2a>
 8000824:	f7ff ff40 	bl	80006a8 <SPI_Timer_Status>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f2      	bne.n	8000814 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2bfe      	cmp	r3, #254	; 0xfe
 8000832:	d001      	beq.n	8000838 <rcvr_datablock+0x34>
 8000834:	2300      	movs	r3, #0
 8000836:	e00a      	b.n	800084e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff60 	bl	8000700 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8000840:	20ff      	movs	r0, #255	; 0xff
 8000842:	f7ff ff47 	bl	80006d4 <xchg_spi>
 8000846:	20ff      	movs	r0, #255	; 0xff
 8000848:	f7ff ff44 	bl	80006d4 <xchg_spi>

	return 1;						/* Function succeeded */
 800084c:	2301      	movs	r3, #1
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8000862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000866:	f7ff ff82 	bl	800076e <wait_ready>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <xmit_datablock+0x1e>
 8000870:	2300      	movs	r3, #0
 8000872:	e01e      	b.n	80008b2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff2c 	bl	80006d4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	2bfd      	cmp	r3, #253	; 0xfd
 8000880:	d016      	beq.n	80008b0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff56 	bl	8000738 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800088c:	20ff      	movs	r0, #255	; 0xff
 800088e:	f7ff ff21 	bl	80006d4 <xchg_spi>
 8000892:	20ff      	movs	r0, #255	; 0xff
 8000894:	f7ff ff1e 	bl	80006d4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8000898:	20ff      	movs	r0, #255	; 0xff
 800089a:	f7ff ff1b 	bl	80006d4 <xchg_spi>
 800089e:	4603      	mov	r3, r0
 80008a0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	f003 031f 	and.w	r3, r3, #31
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d001      	beq.n	80008b0 <xmit_datablock+0x5a>
 80008ac:	2300      	movs	r3, #0
 80008ae:	e000      	b.n	80008b2 <xmit_datablock+0x5c>
	}
	return 1;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	6039      	str	r1, [r7, #0]
 80008c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da0e      	bge.n	80008ec <send_cmd+0x32>
		cmd &= 0x7F;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2037      	movs	r0, #55	; 0x37
 80008da:	f7ff ffee 	bl	80008ba <send_cmd>
 80008de:	4603      	mov	r3, r0
 80008e0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d901      	bls.n	80008ec <send_cmd+0x32>
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	e051      	b.n	8000990 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b0c      	cmp	r3, #12
 80008f0:	d008      	beq.n	8000904 <send_cmd+0x4a>
		despiselect();
 80008f2:	f7ff ff5f 	bl	80007b4 <despiselect>
		if (!spiselect()) return 0xFF;
 80008f6:	f7ff ff6b 	bl	80007d0 <spiselect>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <send_cmd+0x4a>
 8000900:	23ff      	movs	r3, #255	; 0xff
 8000902:	e045      	b.n	8000990 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fee1 	bl	80006d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	0e1b      	lsrs	r3, r3, #24
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fedb 	bl	80006d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	0c1b      	lsrs	r3, r3, #16
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fed5 	bl	80006d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fecf 	bl	80006d4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff feca 	bl	80006d4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <send_cmd+0x94>
 800094a:	2395      	movs	r3, #149	; 0x95
 800094c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b08      	cmp	r3, #8
 8000952:	d101      	bne.n	8000958 <send_cmd+0x9e>
 8000954:	2387      	movs	r3, #135	; 0x87
 8000956:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff feba 	bl	80006d4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b0c      	cmp	r3, #12
 8000964:	d102      	bne.n	800096c <send_cmd+0xb2>
 8000966:	20ff      	movs	r0, #255	; 0xff
 8000968:	f7ff feb4 	bl	80006d4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800096c:	230a      	movs	r3, #10
 800096e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8000970:	20ff      	movs	r0, #255	; 0xff
 8000972:	f7ff feaf 	bl	80006d4 <xchg_spi>
 8000976:	4603      	mov	r3, r0
 8000978:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800097a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da05      	bge.n	800098e <send_cmd+0xd4>
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	3b01      	subs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f0      	bne.n	8000970 <send_cmd+0xb6>

	return res;							/* Return received response */
 800098e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <USER_SPI_initialize+0x14>
 80009a8:	2301      	movs	r3, #1
 80009aa:	e0d6      	b.n	8000b5a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80009ac:	4b6d      	ldr	r3, [pc, #436]	; (8000b64 <USER_SPI_initialize+0x1cc>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <USER_SPI_initialize+0x2a>
 80009ba:	4b6a      	ldr	r3, [pc, #424]	; (8000b64 <USER_SPI_initialize+0x1cc>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	e0cb      	b.n	8000b5a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80009c2:	4b69      	ldr	r3, [pc, #420]	; (8000b68 <USER_SPI_initialize+0x1d0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80009cc:	4b66      	ldr	r3, [pc, #408]	; (8000b68 <USER_SPI_initialize+0x1d0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80009d4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80009d6:	230a      	movs	r3, #10
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e005      	b.n	80009e8 <USER_SPI_initialize+0x50>
 80009dc:	20ff      	movs	r0, #255	; 0xff
 80009de:	f7ff fe79 	bl	80006d4 <xchg_spi>
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f6      	bne.n	80009dc <USER_SPI_initialize+0x44>

	ty = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff ff60 	bl	80008ba <send_cmd>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	f040 808b 	bne.w	8000b18 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8000a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a06:	f7ff fe3b 	bl	8000680 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8000a0a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a0e:	2008      	movs	r0, #8
 8000a10:	f7ff ff53 	bl	80008ba <send_cmd>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d151      	bne.n	8000abe <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e00d      	b.n	8000a3c <USER_SPI_initialize+0xa4>
 8000a20:	7bfc      	ldrb	r4, [r7, #15]
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	f7ff fe56 	bl	80006d4 <xchg_spi>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	f104 0310 	add.w	r3, r4, #16
 8000a30:	443b      	add	r3, r7
 8000a32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d9ee      	bls.n	8000a20 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8000a42:	7abb      	ldrb	r3, [r7, #10]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d167      	bne.n	8000b18 <USER_SPI_initialize+0x180>
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	2baa      	cmp	r3, #170	; 0xaa
 8000a4c:	d164      	bne.n	8000b18 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8000a4e:	bf00      	nop
 8000a50:	f7ff fe2a 	bl	80006a8 <SPI_Timer_Status>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <USER_SPI_initialize+0xd2>
 8000a5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a5e:	20a9      	movs	r0, #169	; 0xa9
 8000a60:	f7ff ff2b 	bl	80008ba <send_cmd>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f2      	bne.n	8000a50 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8000a6a:	f7ff fe1d 	bl	80006a8 <SPI_Timer_Status>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d051      	beq.n	8000b18 <USER_SPI_initialize+0x180>
 8000a74:	2100      	movs	r1, #0
 8000a76:	203a      	movs	r0, #58	; 0x3a
 8000a78:	f7ff ff1f 	bl	80008ba <send_cmd>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14a      	bne.n	8000b18 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8000a82:	2300      	movs	r3, #0
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	e00d      	b.n	8000aa4 <USER_SPI_initialize+0x10c>
 8000a88:	7bfc      	ldrb	r4, [r7, #15]
 8000a8a:	20ff      	movs	r0, #255	; 0xff
 8000a8c:	f7ff fe22 	bl	80006d4 <xchg_spi>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	f104 0310 	add.w	r3, r4, #16
 8000a98:	443b      	add	r3, r7
 8000a9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d9ee      	bls.n	8000a88 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <USER_SPI_initialize+0x120>
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	e000      	b.n	8000aba <USER_SPI_initialize+0x122>
 8000ab8:	2304      	movs	r3, #4
 8000aba:	737b      	strb	r3, [r7, #13]
 8000abc:	e02c      	b.n	8000b18 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8000abe:	2100      	movs	r1, #0
 8000ac0:	20a9      	movs	r0, #169	; 0xa9
 8000ac2:	f7ff fefa 	bl	80008ba <send_cmd>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d804      	bhi.n	8000ad6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8000acc:	2302      	movs	r3, #2
 8000ace:	737b      	strb	r3, [r7, #13]
 8000ad0:	23a9      	movs	r3, #169	; 0xa9
 8000ad2:	73bb      	strb	r3, [r7, #14]
 8000ad4:	e003      	b.n	8000ade <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	737b      	strb	r3, [r7, #13]
 8000ada:	2301      	movs	r3, #1
 8000adc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8000ade:	bf00      	nop
 8000ae0:	f7ff fde2 	bl	80006a8 <SPI_Timer_Status>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <USER_SPI_initialize+0x162>
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fee3 	bl	80008ba <send_cmd>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f2      	bne.n	8000ae0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8000afa:	f7ff fdd5 	bl	80006a8 <SPI_Timer_Status>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <USER_SPI_initialize+0x17c>
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	2010      	movs	r0, #16
 8000b0a:	f7ff fed6 	bl	80008ba <send_cmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <USER_SPI_initialize+0x180>
				ty = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <USER_SPI_initialize+0x1d4>)
 8000b1a:	7b7b      	ldrb	r3, [r7, #13]
 8000b1c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8000b1e:	f7ff fe49 	bl	80007b4 <despiselect>

	if (ty) {			/* OK */
 8000b22:	7b7b      	ldrb	r3, [r7, #13]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d012      	beq.n	8000b4e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <USER_SPI_initialize+0x1d0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <USER_SPI_initialize+0x1d0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0210 	orr.w	r2, r2, #16
 8000b3a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <USER_SPI_initialize+0x1cc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f023 0301 	bic.w	r3, r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <USER_SPI_initialize+0x1cc>)
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e002      	b.n	8000b54 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <USER_SPI_initialize+0x1cc>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <USER_SPI_initialize+0x1cc>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000018 	.word	0x20000018
 8000b68:	20000e3c 	.word	0x20000e3c
 8000b6c:	20000460 	.word	0x20000460

08000b70 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <USER_SPI_status+0x14>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e002      	b.n	8000b8a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <USER_SPI_status+0x24>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000018 	.word	0x20000018

08000b98 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <USER_SPI_read+0x1c>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d101      	bne.n	8000bb8 <USER_SPI_read+0x20>
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	e04d      	b.n	8000c54 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <USER_SPI_read+0xc4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <USER_SPI_read+0x32>
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e044      	b.n	8000c54 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <USER_SPI_read+0xc8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <USER_SPI_read+0x44>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d111      	bne.n	8000c06 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2011      	movs	r0, #17
 8000be6:	f7ff fe68 	bl	80008ba <send_cmd>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d129      	bne.n	8000c44 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8000bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf4:	68b8      	ldr	r0, [r7, #8]
 8000bf6:	f7ff fe05 	bl	8000804 <rcvr_datablock>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d021      	beq.n	8000c44 <USER_SPI_read+0xac>
			count = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	e01e      	b.n	8000c44 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2012      	movs	r0, #18
 8000c0a:	f7ff fe56 	bl	80008ba <send_cmd>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d117      	bne.n	8000c44 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff fdf3 	bl	8000804 <rcvr_datablock>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00a      	beq.n	8000c3a <USER_SPI_read+0xa2>
				buff += 512;
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c2a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1ed      	bne.n	8000c14 <USER_SPI_read+0x7c>
 8000c38:	e000      	b.n	8000c3c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8000c3a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200c      	movs	r0, #12
 8000c40:	f7ff fe3b 	bl	80008ba <send_cmd>
		}
	}
	despiselect();
 8000c44:	f7ff fdb6 	bl	80007b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000018 	.word	0x20000018
 8000c60:	20000460 	.word	0x20000460

08000c64 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <USER_SPI_write+0x1c>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <USER_SPI_write+0x20>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e063      	b.n	8000d4c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <USER_SPI_write+0xf0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <USER_SPI_write+0x32>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e05a      	b.n	8000d4c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <USER_SPI_write+0xf0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <USER_SPI_write+0x44>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e051      	b.n	8000d4c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <USER_SPI_write+0xf4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <USER_SPI_write+0x56>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	025b      	lsls	r3, r3, #9
 8000cb8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d110      	bne.n	8000ce2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	2018      	movs	r0, #24
 8000cc4:	f7ff fdf9 	bl	80008ba <send_cmd>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d136      	bne.n	8000d3c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8000cce:	21fe      	movs	r1, #254	; 0xfe
 8000cd0:	68b8      	ldr	r0, [r7, #8]
 8000cd2:	f7ff fdc0 	bl	8000856 <xmit_datablock>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d02f      	beq.n	8000d3c <USER_SPI_write+0xd8>
			count = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	e02c      	b.n	8000d3c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <USER_SPI_write+0xf4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 0306 	and.w	r3, r3, #6
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <USER_SPI_write+0x92>
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	2097      	movs	r0, #151	; 0x97
 8000cf2:	f7ff fde2 	bl	80008ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	2019      	movs	r0, #25
 8000cfa:	f7ff fdde 	bl	80008ba <send_cmd>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d11b      	bne.n	8000d3c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8000d04:	21fc      	movs	r1, #252	; 0xfc
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff fda5 	bl	8000856 <xmit_datablock>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <USER_SPI_write+0xc4>
				buff += 512;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d18:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1ee      	bne.n	8000d04 <USER_SPI_write+0xa0>
 8000d26:	e000      	b.n	8000d2a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8000d28:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8000d2a:	21fd      	movs	r1, #253	; 0xfd
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fd92 	bl	8000856 <xmit_datablock>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <USER_SPI_write+0xd8>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8000d3c:	f7ff fd3a 	bl	80007b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000018 	.word	0x20000018
 8000d58:	20000460 	.word	0x20000460

08000d5c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	603a      	str	r2, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <USER_SPI_ioctl+0x1a>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e15a      	b.n	800102c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8000d76:	4baf      	ldr	r3, [pc, #700]	; (8001034 <USER_SPI_ioctl+0x2d8>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <USER_SPI_ioctl+0x2c>
 8000d84:	2303      	movs	r3, #3
 8000d86:	e151      	b.n	800102c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	f200 8136 	bhi.w	8001002 <USER_SPI_ioctl+0x2a6>
 8000d96:	a201      	add	r2, pc, #4	; (adr r2, 8000d9c <USER_SPI_ioctl+0x40>)
 8000d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9c:	08000db1 	.word	0x08000db1
 8000da0:	08000dc5 	.word	0x08000dc5
 8000da4:	08001003 	.word	0x08001003
 8000da8:	08000e71 	.word	0x08000e71
 8000dac:	08000f67 	.word	0x08000f67
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8000db0:	f7ff fd0e 	bl	80007d0 <spiselect>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8127 	beq.w	800100a <USER_SPI_ioctl+0x2ae>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8000dc2:	e122      	b.n	800100a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2009      	movs	r0, #9
 8000dc8:	f7ff fd77 	bl	80008ba <send_cmd>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 811d 	bne.w	800100e <USER_SPI_ioctl+0x2b2>
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd12 	bl	8000804 <rcvr_datablock>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8113 	beq.w	800100e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8000de8:	7b3b      	ldrb	r3, [r7, #12]
 8000dea:	099b      	lsrs	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d111      	bne.n	8000e16 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8000df2:	7d7b      	ldrb	r3, [r7, #21]
 8000df4:	461a      	mov	r2, r3
 8000df6:	7d3b      	ldrb	r3, [r7, #20]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	4413      	add	r3, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	7cfb      	ldrb	r3, [r7, #19]
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000e06:	4413      	add	r3, r2
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	029a      	lsls	r2, r3, #10
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e028      	b.n	8000e68 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e16:	7c7b      	ldrb	r3, [r7, #17]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	7dbb      	ldrb	r3, [r7, #22]
 8000e20:	09db      	lsrs	r3, r3, #7
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	7d7b      	ldrb	r3, [r7, #21]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0306 	and.w	r3, r3, #6
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8000e3e:	7d3b      	ldrb	r3, [r7, #20]
 8000e40:	099b      	lsrs	r3, r3, #6
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	7cfb      	ldrb	r3, [r7, #19]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	441a      	add	r2, r3
 8000e4c:	7cbb      	ldrb	r3, [r7, #18]
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e54:	4413      	add	r3, r2
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8000e5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e5e:	3b09      	subs	r3, #9
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	409a      	lsls	r2, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8000e6e:	e0ce      	b.n	800100e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8000e70:	4b71      	ldr	r3, [pc, #452]	; (8001038 <USER_SPI_ioctl+0x2dc>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d031      	beq.n	8000ee0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	208d      	movs	r0, #141	; 0x8d
 8000e80:	f7ff fd1b 	bl	80008ba <send_cmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f040 80c3 	bne.w	8001012 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8000e8c:	20ff      	movs	r0, #255	; 0xff
 8000e8e:	f7ff fc21 	bl	80006d4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2110      	movs	r1, #16
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fcb3 	bl	8000804 <rcvr_datablock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80b6 	beq.w	8001012 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8000ea6:	2330      	movs	r3, #48	; 0x30
 8000ea8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000eac:	e007      	b.n	8000ebe <USER_SPI_ioctl+0x162>
 8000eae:	20ff      	movs	r0, #255	; 0xff
 8000eb0:	f7ff fc10 	bl	80006d4 <xchg_spi>
 8000eb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f3      	bne.n	8000eae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2310      	movs	r3, #16
 8000ed0:	fa03 f202 	lsl.w	r2, r3, r2
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8000ede:	e098      	b.n	8001012 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2009      	movs	r0, #9
 8000ee4:	f7ff fce9 	bl	80008ba <send_cmd>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 8091 	bne.w	8001012 <USER_SPI_ioctl+0x2b6>
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fc84 	bl	8000804 <rcvr_datablock>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8087 	beq.w	8001012 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8000f04:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <USER_SPI_ioctl+0x2dc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d012      	beq.n	8000f36 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8000f10:	7dbb      	ldrb	r3, [r7, #22]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f18:	7dfa      	ldrb	r2, [r7, #23]
 8000f1a:	09d2      	lsrs	r2, r2, #7
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	4413      	add	r3, r2
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	7e7b      	ldrb	r3, [r7, #25]
 8000f24:	099b      	lsrs	r3, r3, #6
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e013      	b.n	8000f5e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8000f36:	7dbb      	ldrb	r3, [r7, #22]
 8000f38:	109b      	asrs	r3, r3, #2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	3301      	adds	r3, #1
 8000f42:	7dfa      	ldrb	r2, [r7, #23]
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	f002 0218 	and.w	r2, r2, #24
 8000f4a:	7df9      	ldrb	r1, [r7, #23]
 8000f4c:	0949      	lsrs	r1, r1, #5
 8000f4e:	b2c9      	uxtb	r1, r1
 8000f50:	440a      	add	r2, r1
 8000f52:	3201      	adds	r2, #1
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8000f64:	e055      	b.n	8001012 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <USER_SPI_ioctl+0x2dc>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0306 	and.w	r3, r3, #6
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d051      	beq.n	8001016 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	210b      	movs	r1, #11
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff feee 	bl	8000d5c <USER_SPI_ioctl>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d149      	bne.n	800101a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8000f86:	7b3b      	ldrb	r3, [r7, #12]
 8000f88:	099b      	lsrs	r3, r3, #6
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <USER_SPI_ioctl+0x23e>
 8000f90:	7dbb      	ldrb	r3, [r7, #22]
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d041      	beq.n	800101e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	623b      	str	r3, [r7, #32]
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <USER_SPI_ioctl+0x2dc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8000fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fc4:	2020      	movs	r0, #32
 8000fc6:	f7ff fc78 	bl	80008ba <send_cmd>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d128      	bne.n	8001022 <USER_SPI_ioctl+0x2c6>
 8000fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fd2:	2021      	movs	r0, #33	; 0x21
 8000fd4:	f7ff fc71 	bl	80008ba <send_cmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d121      	bne.n	8001022 <USER_SPI_ioctl+0x2c6>
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2026      	movs	r0, #38	; 0x26
 8000fe2:	f7ff fc6a 	bl	80008ba <send_cmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d11a      	bne.n	8001022 <USER_SPI_ioctl+0x2c6>
 8000fec:	f247 5030 	movw	r0, #30000	; 0x7530
 8000ff0:	f7ff fbbd 	bl	800076e <wait_ready>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d013      	beq.n	8001022 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8001000:	e00f      	b.n	8001022 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8001002:	2304      	movs	r3, #4
 8001004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001008:	e00c      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		break;
 800100a:	bf00      	nop
 800100c:	e00a      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		break;
 800100e:	bf00      	nop
 8001010:	e008      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		break;
 8001012:	bf00      	nop
 8001014:	e006      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001016:	bf00      	nop
 8001018:	e004      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800101a:	bf00      	nop
 800101c:	e002      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800101e:	bf00      	nop
 8001020:	e000      	b.n	8001024 <USER_SPI_ioctl+0x2c8>
		break;
 8001022:	bf00      	nop
	}

	despiselect();
 8001024:	f7ff fbc6 	bl	80007b4 <despiselect>

	return res;
 8001028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800102c:	4618      	mov	r0, r3
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000018 	.word	0x20000018
 8001038:	20000460 	.word	0x20000460

0800103c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <disk_status+0x30>)
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	4905      	ldr	r1, [pc, #20]	; (800106c <disk_status+0x30>)
 8001056:	440a      	add	r2, r1
 8001058:	7a12      	ldrb	r2, [r2, #8]
 800105a:	4610      	mov	r0, r2
 800105c:	4798      	blx	r3
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
  return stat;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000494 	.word	0x20000494

08001070 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <disk_initialize+0x48>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <disk_initialize+0x48>)
 800108c:	2101      	movs	r1, #1
 800108e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <disk_initialize+0x48>)
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <disk_initialize+0x48>)
 80010a0:	440a      	add	r2, r1
 80010a2:	7a12      	ldrb	r2, [r2, #8]
 80010a4:	4610      	mov	r0, r2
 80010a6:	4798      	blx	r3
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000494 	.word	0x20000494

080010bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <disk_read+0x3c>)
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	689c      	ldr	r4, [r3, #8]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <disk_read+0x3c>)
 80010dc:	4413      	add	r3, r2
 80010de:	7a18      	ldrb	r0, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	47a0      	blx	r4
 80010e8:	4603      	mov	r3, r0
 80010ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000494 	.word	0x20000494

080010fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <disk_write+0x3c>)
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	68dc      	ldr	r4, [r3, #12]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <disk_write+0x3c>)
 800111c:	4413      	add	r3, r2
 800111e:	7a18      	ldrb	r0, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	47a0      	blx	r4
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
  return res;
 800112c:	7dfb      	ldrb	r3, [r7, #23]
}
 800112e:	4618      	mov	r0, r3
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	20000494 	.word	0x20000494

0800113c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	603a      	str	r2, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	460b      	mov	r3, r1
 800114a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <disk_ioctl+0x38>)
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4906      	ldr	r1, [pc, #24]	; (8001174 <disk_ioctl+0x38>)
 800115c:	440a      	add	r2, r1
 800115e:	7a10      	ldrb	r0, [r2, #8]
 8001160:	79b9      	ldrb	r1, [r7, #6]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4798      	blx	r3
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
  return res;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000494 	.word	0x20000494

08001178 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	81fb      	strh	r3, [r7, #14]
	return rv;
 800119a:	89fb      	ldrh	r3, [r7, #14]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3303      	adds	r3, #3
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	3202      	adds	r2, #2
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	3201      	adds	r2, #1
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
	return rv;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00d      	beq.n	80012aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	1c53      	adds	r3, r2, #1
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	6179      	str	r1, [r7, #20]
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f1      	bne.n	800128e <mem_cpy+0x1a>
	}
}
 80012aa:	bf00      	nop
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	617a      	str	r2, [r7, #20]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <mem_set+0x10>
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	61fa      	str	r2, [r7, #28]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	61ba      	str	r2, [r7, #24]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	1acb      	subs	r3, r1, r3
 8001314:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3b01      	subs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <mem_cmp+0x40>
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0eb      	beq.n	8001300 <mem_cmp+0x18>

	return r;
 8001328:	697b      	ldr	r3, [r7, #20]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800133e:	e002      	b.n	8001346 <chk_chr+0x12>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3301      	adds	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <chk_chr+0x26>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4293      	cmp	r3, r2
 8001358:	d1f2      	bne.n	8001340 <chk_chr+0xc>
	return *str;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e029      	b.n	80013d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800137c:	4a26      	ldr	r2, [pc, #152]	; (8001418 <chk_lock+0xb0>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01d      	beq.n	80013c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <chk_lock+0xb0>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d116      	bne.n	80013ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <chk_lock+0xb0>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	3304      	adds	r3, #4
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10c      	bne.n	80013ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <chk_lock+0xb0>)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	3308      	adds	r3, #8
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d102      	bne.n	80013ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80013c4:	e007      	b.n	80013d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d9d2      	bls.n	800137c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d109      	bne.n	80013f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <chk_lock+0x80>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d101      	bne.n	80013ec <chk_lock+0x84>
 80013e8:	2300      	movs	r3, #0
 80013ea:	e010      	b.n	800140e <chk_lock+0xa6>
 80013ec:	2312      	movs	r3, #18
 80013ee:	e00e      	b.n	800140e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <chk_lock+0xa0>
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <chk_lock+0xb0>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	330c      	adds	r3, #12
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d101      	bne.n	800140c <chk_lock+0xa4>
 8001408:	2310      	movs	r3, #16
 800140a:	e000      	b.n	800140e <chk_lock+0xa6>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000474 	.word	0x20000474

0800141c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e002      	b.n	800142e <enq_lock+0x12>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3301      	adds	r3, #1
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d806      	bhi.n	8001442 <enq_lock+0x26>
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <enq_lock+0x3c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b02      	cmp	r3, #2
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000474 	.word	0x20000474

0800145c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e01f      	b.n	80014ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800146c:	4a41      	ldr	r2, [pc, #260]	; (8001574 <inc_lock+0x118>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d113      	bne.n	80014a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800147e:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <inc_lock+0x118>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	3304      	adds	r3, #4
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800148e:	429a      	cmp	r2, r3
 8001490:	d109      	bne.n	80014a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001492:	4a38      	ldr	r2, [pc, #224]	; (8001574 <inc_lock+0x118>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	3308      	adds	r3, #8
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d006      	beq.n	80014b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3301      	adds	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d9dc      	bls.n	800146c <inc_lock+0x10>
 80014b2:	e000      	b.n	80014b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80014b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d132      	bne.n	8001522 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e002      	b.n	80014c8 <inc_lock+0x6c>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d806      	bhi.n	80014dc <inc_lock+0x80>
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <inc_lock+0x118>)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d101      	bne.n	80014e6 <inc_lock+0x8a>
 80014e2:	2300      	movs	r3, #0
 80014e4:	e040      	b.n	8001568 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4922      	ldr	r1, [pc, #136]	; (8001574 <inc_lock+0x118>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	491e      	ldr	r1, [pc, #120]	; (8001574 <inc_lock+0x118>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	440b      	add	r3, r1
 8001500:	3304      	adds	r3, #4
 8001502:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	491a      	ldr	r1, [pc, #104]	; (8001574 <inc_lock+0x118>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	440b      	add	r3, r1
 8001510:	3308      	adds	r3, #8
 8001512:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <inc_lock+0x118>)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	330c      	adds	r3, #12
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <inc_lock+0xe0>
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <inc_lock+0x118>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	330c      	adds	r3, #12
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <inc_lock+0xe0>
 8001538:	2300      	movs	r3, #0
 800153a:	e015      	b.n	8001568 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d108      	bne.n	8001554 <inc_lock+0xf8>
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <inc_lock+0x118>)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	330c      	adds	r3, #12
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	e001      	b.n	8001558 <inc_lock+0xfc>
 8001554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <inc_lock+0x118>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	440b      	add	r3, r1
 8001560:	330c      	adds	r3, #12
 8001562:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000474 	.word	0x20000474

08001578 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d825      	bhi.n	80015d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <dec_lock+0x70>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	330c      	adds	r3, #12
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a0:	d101      	bne.n	80015a6 <dec_lock+0x2e>
 80015a2:	2300      	movs	r3, #0
 80015a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <dec_lock+0x3a>
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <dec_lock+0x70>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	330c      	adds	r3, #12
 80015bc:	89fa      	ldrh	r2, [r7, #14]
 80015be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d105      	bne.n	80015d2 <dec_lock+0x5a>
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <dec_lock+0x70>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	737b      	strb	r3, [r7, #13]
 80015d6:	e001      	b.n	80015dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80015d8:	2302      	movs	r3, #2
 80015da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000474 	.word	0x20000474

080015ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e010      	b.n	800161c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80015fa:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <clear_lock+0x44>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d105      	bne.n	8001616 <clear_lock+0x2a>
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <clear_lock+0x44>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d9eb      	bls.n	80015fa <clear_lock+0xe>
	}
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000474 	.word	0x20000474

08001634 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d034      	beq.n	80016b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7858      	ldrb	r0, [r3, #1]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001658:	2301      	movs	r3, #1
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	f7ff fd4e 	bl	80010fc <disk_write>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <sync_window+0x38>
			res = FR_DISK_ERR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e022      	b.n	80016b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	1ad2      	subs	r2, r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	429a      	cmp	r2, r3
 8001680:	d217      	bcs.n	80016b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	789b      	ldrb	r3, [r3, #2]
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	e010      	b.n	80016ac <sync_window+0x78>
					wsect += fs->fsize;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7858      	ldrb	r0, [r3, #1]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800169e:	2301      	movs	r3, #1
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	f7ff fd2b 	bl	80010fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d8eb      	bhi.n	800168a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d01b      	beq.n	800170c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffad 	bl	8001634 <sync_window>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d113      	bne.n	800170c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7858      	ldrb	r0, [r3, #1]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80016ee:	2301      	movs	r3, #1
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	f7ff fce3 	bl	80010bc <disk_read>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff87 	bl	8001634 <sync_window>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d158      	bne.n	80017e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d148      	bne.n	80017ca <sync_fs+0xb2>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	791b      	ldrb	r3, [r3, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d144      	bne.n	80017ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3330      	adds	r3, #48	; 0x30
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fdb2 	bl	80012b4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3330      	adds	r3, #48	; 0x30
 8001754:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001758:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fd44 	bl	80011ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3330      	adds	r3, #48	; 0x30
 8001766:	4921      	ldr	r1, [pc, #132]	; (80017ec <sync_fs+0xd4>)
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fd58 	bl	800121e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3330      	adds	r3, #48	; 0x30
 8001772:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001776:	491e      	ldr	r1, [pc, #120]	; (80017f0 <sync_fs+0xd8>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fd50 	bl	800121e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3330      	adds	r3, #48	; 0x30
 8001782:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f7ff fd46 	bl	800121e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3330      	adds	r3, #48	; 0x30
 8001796:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fd3c 	bl	800121e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7858      	ldrb	r0, [r3, #1]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017be:	2301      	movs	r3, #1
 80017c0:	f7ff fc9c 	bl	80010fc <disk_write>
			fs->fsi_flag = 0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fcb2 	bl	800113c <disk_ioctl>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <sync_fs+0xca>
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	41615252 	.word	0x41615252
 80017f0:	61417272 	.word	0x61417272

080017f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	3b02      	subs	r3, #2
 8001802:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	3b02      	subs	r3, #2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d301      	bcc.n	8001814 <clust2sect+0x20>
 8001810:	2300      	movs	r3, #0
 8001812:	e008      	b.n	8001826 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	895b      	ldrh	r3, [r3, #10]
 8001818:	461a      	mov	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	fb03 f202 	mul.w	r2, r3, r2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	4413      	add	r3, r2
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d904      	bls.n	8001850 <get_fat+0x20>
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d302      	bcc.n	8001856 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e08f      	b.n	8001976 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d062      	beq.n	800192a <get_fat+0xfa>
 8001864:	2b03      	cmp	r3, #3
 8001866:	dc7c      	bgt.n	8001962 <get_fat+0x132>
 8001868:	2b01      	cmp	r3, #1
 800186a:	d002      	beq.n	8001872 <get_fat+0x42>
 800186c:	2b02      	cmp	r3, #2
 800186e:	d042      	beq.n	80018f6 <get_fat+0xc6>
 8001870:	e077      	b.n	8001962 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	0a5b      	lsrs	r3, r3, #9
 8001888:	4413      	add	r3, r2
 800188a:	4619      	mov	r1, r3
 800188c:	6938      	ldr	r0, [r7, #16]
 800188e:	f7ff ff15 	bl	80016bc <move_window>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d167      	bne.n	8001968 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	60fa      	str	r2, [r7, #12]
 800189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4413      	add	r3, r2
 80018a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0a5b      	lsrs	r3, r3, #9
 80018b4:	4413      	add	r3, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	6938      	ldr	r0, [r7, #16]
 80018ba:	f7ff feff 	bl	80016bc <move_window>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d153      	bne.n	800196c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	461a      	mov	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <get_fat+0xbc>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	e002      	b.n	80018f2 <get_fat+0xc2>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f2:	617b      	str	r3, [r7, #20]
			break;
 80018f4:	e03f      	b.n	8001976 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6a1a      	ldr	r2, [r3, #32]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	4413      	add	r3, r2
 8001900:	4619      	mov	r1, r3
 8001902:	6938      	ldr	r0, [r7, #16]
 8001904:	f7ff feda 	bl	80016bc <move_window>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d130      	bne.n	8001970 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800191c:	4413      	add	r3, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fc2a 	bl	8001178 <ld_word>
 8001924:	4603      	mov	r3, r0
 8001926:	617b      	str	r3, [r7, #20]
			break;
 8001928:	e025      	b.n	8001976 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6a1a      	ldr	r2, [r3, #32]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	09db      	lsrs	r3, r3, #7
 8001932:	4413      	add	r3, r2
 8001934:	4619      	mov	r1, r3
 8001936:	6938      	ldr	r0, [r7, #16]
 8001938:	f7ff fec0 	bl	80016bc <move_window>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001950:	4413      	add	r3, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fc27 	bl	80011a6 <ld_dword>
 8001958:	4603      	mov	r3, r0
 800195a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800195e:	617b      	str	r3, [r7, #20]
			break;
 8001960:	e009      	b.n	8001976 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e006      	b.n	8001976 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001968:	bf00      	nop
 800196a:	e004      	b.n	8001976 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800196c:	bf00      	nop
 800196e:	e002      	b.n	8001976 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001974:	bf00      	nop
		}
	}

	return val;
 8001976:	697b      	ldr	r3, [r7, #20]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800198c:	2302      	movs	r3, #2
 800198e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b01      	cmp	r3, #1
 8001994:	f240 80d2 	bls.w	8001b3c <put_fat+0x1bc>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	f080 80cc 	bcs.w	8001b3c <put_fat+0x1bc>
		switch (fs->fs_type) {
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	f000 8096 	beq.w	8001ada <put_fat+0x15a>
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f300 80cd 	bgt.w	8001b4e <put_fat+0x1ce>
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d002      	beq.n	80019be <put_fat+0x3e>
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d06e      	beq.n	8001a9a <put_fat+0x11a>
 80019bc:	e0c7      	b.n	8001b4e <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4413      	add	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	0a5b      	lsrs	r3, r3, #9
 80019d4:	4413      	add	r3, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fe6f 	bl	80016bc <move_window>
 80019de:	4603      	mov	r3, r0
 80019e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 80ab 	bne.w	8001b40 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1c59      	adds	r1, r3, #1
 80019f4:	61b9      	str	r1, [r7, #24]
 80019f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fa:	4413      	add	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <put_fat+0xa4>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e001      	b.n	8001a28 <put_fat+0xa8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	0a5b      	lsrs	r3, r3, #9
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff fe3c 	bl	80016bc <move_window>
 8001a44:	4603      	mov	r3, r0
 8001a46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d17a      	bne.n	8001b44 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <put_fat+0xf0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	e00e      	b.n	8001a8e <put_fat+0x10e>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	f023 030f 	bic.w	r3, r3, #15
 8001a7a:	b25a      	sxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	70da      	strb	r2, [r3, #3]
			break;
 8001a98:	e059      	b.n	8001b4e <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff fe08 	bl	80016bc <move_window>
 8001aac:	4603      	mov	r3, r0
 8001aae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d148      	bne.n	8001b48 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001ac4:	4413      	add	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fb8c 	bl	80011ea <st_word>
			fs->wflag = 1;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	70da      	strb	r2, [r3, #3]
			break;
 8001ad8:	e039      	b.n	8001b4e <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	09db      	lsrs	r3, r3, #7
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff fde8 	bl	80016bc <move_window>
 8001aec:	4603      	mov	r3, r0
 8001aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d12a      	bne.n	8001b4c <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb4a 	bl	80011a6 <ld_dword>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001b2a:	4413      	add	r3, r2
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fb75 	bl	800121e <st_dword>
			fs->wflag = 1;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	70da      	strb	r2, [r3, #3]
			break;
 8001b3a:	e008      	b.n	8001b4e <put_fat+0x1ce>
		}
	}
 8001b3c:	bf00      	nop
 8001b3e:	e006      	b.n	8001b4e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8001b40:	bf00      	nop
 8001b42:	e004      	b.n	8001b4e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8001b44:	bf00      	nop
 8001b46:	e002      	b.n	8001b4e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8001b48:	bf00      	nop
 8001b4a:	e000      	b.n	8001b4e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8001b4c:	bf00      	nop
	return res;
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3724      	adds	r7, #36	; 0x24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d904      	bls.n	8001b7e <remove_chain+0x26>
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d301      	bcc.n	8001b82 <remove_chain+0x2a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e04b      	b.n	8001c1a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	69b8      	ldr	r0, [r7, #24]
 8001b90:	f7ff fef6 	bl	8001980 <put_fat>
 8001b94:	4603      	mov	r3, r0
 8001b96:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001b98:	7ffb      	ldrb	r3, [r7, #31]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <remove_chain+0x4a>
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	e03b      	b.n	8001c1a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fe43 	bl	8001830 <get_fat>
 8001baa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d031      	beq.n	8001c16 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <remove_chain+0x64>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e02e      	b.n	8001c1a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d101      	bne.n	8001bc8 <remove_chain+0x70>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e028      	b.n	8001c1a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001bc8:	2200      	movs	r2, #0
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	69b8      	ldr	r0, [r7, #24]
 8001bce:	f7ff fed7 	bl	8001980 <put_fat>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001bd6:	7ffb      	ldrb	r3, [r7, #31]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <remove_chain+0x88>
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
 8001bde:	e01c      	b.n	8001c1a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	3b02      	subs	r3, #2
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d20b      	bcs.n	8001c06 <remove_chain+0xae>
			fs->free_clst++;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3c6      	bcc.n	8001ba2 <remove_chain+0x4a>
 8001c14:	e000      	b.n	8001c18 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001c16:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10d      	bne.n	8001c54 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <create_chain+0x2c>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d31b      	bcc.n	8001c86 <create_chain+0x64>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e018      	b.n	8001c86 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fdea 	bl	8001830 <get_fat>
 8001c5c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d801      	bhi.n	8001c68 <create_chain+0x46>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e070      	b.n	8001d4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	d101      	bne.n	8001c74 <create_chain+0x52>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	e06a      	b.n	8001d4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d201      	bcs.n	8001c82 <create_chain+0x60>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	e063      	b.n	8001d4a <create_chain+0x128>
		scl = clst;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d307      	bcc.n	8001caa <create_chain+0x88>
				ncl = 2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d901      	bls.n	8001caa <create_chain+0x88>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e04f      	b.n	8001d4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8001caa:	69f9      	ldr	r1, [r7, #28]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fdbf 	bl	8001830 <get_fat>
 8001cb2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00e      	beq.n	8001cd8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d003      	beq.n	8001cc8 <create_chain+0xa6>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d101      	bne.n	8001ccc <create_chain+0xaa>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	e03e      	b.n	8001d4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1da      	bne.n	8001c8a <create_chain+0x68>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e038      	b.n	8001d4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8001cd8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	69f9      	ldr	r1, [r7, #28]
 8001ce0:	6938      	ldr	r0, [r7, #16]
 8001ce2:	f7ff fe4d 	bl	8001980 <put_fat>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <create_chain+0xe2>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	6938      	ldr	r0, [r7, #16]
 8001cfc:	f7ff fe40 	bl	8001980 <put_fat>
 8001d00:	4603      	mov	r3, r0
 8001d02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <create_chain+0x116>
		fs->last_clst = ncl;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	3b02      	subs	r3, #2
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d804      	bhi.n	8001d28 <create_chain+0x106>
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	711a      	strb	r2, [r3, #4]
 8001d36:	e007      	b.n	8001d48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <create_chain+0x122>
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e000      	b.n	8001d46 <create_chain+0x124>
 8001d44:	2301      	movs	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8001d48:	69fb      	ldr	r3, [r7, #28]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	3304      	adds	r3, #4
 8001d68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	0a5b      	lsrs	r3, r3, #9
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	8952      	ldrh	r2, [r2, #10]
 8001d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1d1a      	adds	r2, r3, #4
 8001d7c:	613a      	str	r2, [r7, #16]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <clmt_clust+0x3a>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e010      	b.n	8001dae <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d307      	bcc.n	8001da4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001da2:	e7e9      	b.n	8001d78 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8001da4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4413      	add	r3, r2
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dce:	d204      	bcs.n	8001dda <dir_sdi+0x22>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <dir_sdi+0x26>
		return FR_INT_ERR;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e063      	b.n	8001ea6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <dir_sdi+0x46>
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d902      	bls.n	8001dfe <dir_sdi+0x46>
		clst = fs->dirbase;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10c      	bne.n	8001e1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	8912      	ldrh	r2, [r2, #8]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d301      	bcc.n	8001e14 <dir_sdi+0x5c>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e048      	b.n	8001ea6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	61da      	str	r2, [r3, #28]
 8001e1c:	e029      	b.n	8001e72 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	895b      	ldrh	r3, [r3, #10]
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001e26:	e019      	b.n	8001e5c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6979      	ldr	r1, [r7, #20]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fcff 	bl	8001830 <get_fat>
 8001e32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d101      	bne.n	8001e40 <dir_sdi+0x88>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e032      	b.n	8001ea6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d904      	bls.n	8001e50 <dir_sdi+0x98>
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d301      	bcc.n	8001e54 <dir_sdi+0x9c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e028      	b.n	8001ea6 <dir_sdi+0xee>
			ofs -= csz;
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d2e1      	bcs.n	8001e28 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	6938      	ldr	r0, [r7, #16]
 8001e68:	f7ff fcc4 	bl	80017f4 <clust2sect>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <dir_sdi+0xcc>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e010      	b.n	8001ea6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	0a5b      	lsrs	r3, r3, #9
 8001e8c:	441a      	add	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9e:	441a      	add	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	3320      	adds	r3, #32
 8001ec4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <dir_next+0x28>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed4:	d301      	bcc.n	8001eda <dir_next+0x2c>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e0aa      	b.n	8002030 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 8098 	bne.w	8002016 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	8912      	ldrh	r2, [r2, #8]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	f0c0 8088 	bcc.w	8002016 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e08f      	b.n	8002030 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	0a5b      	lsrs	r3, r3, #9
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	8952      	ldrh	r2, [r2, #10]
 8001f18:	3a01      	subs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d17a      	bne.n	8002016 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7ff fc81 	bl	8001830 <get_fat>
 8001f2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d801      	bhi.n	8001f3a <dir_next+0x8c>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e07a      	b.n	8002030 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d101      	bne.n	8001f46 <dir_next+0x98>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e074      	b.n	8002030 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d358      	bcc.n	8002002 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e067      	b.n	8002030 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	f7ff fe5a 	bl	8001c22 <create_chain>
 8001f6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <dir_next+0xcc>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e05a      	b.n	8002030 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <dir_next+0xd6>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e055      	b.n	8002030 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d101      	bne.n	8001f90 <dir_next+0xe2>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e04f      	b.n	8002030 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fb4f 	bl	8001634 <sync_window>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <dir_next+0xf2>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e047      	b.n	8002030 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3330      	adds	r3, #48	; 0x30
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f982 	bl	80012b4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	6979      	ldr	r1, [r7, #20]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff fc1c 	bl	80017f4 <clust2sect>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc2:	e012      	b.n	8001fea <dir_next+0x13c>
						fs->wflag = 1;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fb32 	bl	8001634 <sync_window>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <dir_next+0x12c>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02a      	b.n	8002030 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	895b      	ldrh	r3, [r3, #10]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d3e6      	bcc.n	8001fc4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad2      	subs	r2, r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fbf2 	bl	80017f4 <clust2sect>
 8002010:	4602      	mov	r2, r0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002048:	2100      	movs	r1, #0
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff feb4 	bl	8001db8 <dir_sdi>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d12b      	bne.n	80020b2 <dir_alloc+0x7a>
		n = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4619      	mov	r1, r3
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fb29 	bl	80016bc <move_window>
 800206a:	4603      	mov	r3, r0
 800206c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11d      	bne.n	80020b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2be5      	cmp	r3, #229	; 0xe5
 800207c:	d004      	beq.n	8002088 <dir_alloc+0x50>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d107      	bne.n	8002098 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	3301      	adds	r3, #1
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d102      	bne.n	800209c <dir_alloc+0x64>
 8002096:	e00c      	b.n	80020b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800209c:	2101      	movs	r1, #1
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff05 	bl	8001eae <dir_next>
 80020a4:	4603      	mov	r3, r0
 80020a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0d7      	beq.n	800205e <dir_alloc+0x26>
 80020ae:	e000      	b.n	80020b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80020b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d101      	bne.n	80020bc <dir_alloc+0x84>
 80020b8:	2307      	movs	r3, #7
 80020ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	331a      	adds	r3, #26
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f84f 	bl	8001178 <ld_word>
 80020da:	4603      	mov	r3, r0
 80020dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d109      	bne.n	80020fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f844 	bl	8001178 <ld_word>
 80020f0:	4603      	mov	r3, r0
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	331a      	adds	r3, #26
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	b292      	uxth	r2, r2
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f865 	bl	80011ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d109      	bne.n	800213c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f103 0214 	add.w	r2, r3, #20
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	b29b      	uxth	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f7ff f857 	bl	80011ea <st_word>
	}
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002152:	2100      	movs	r1, #0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fe2f 	bl	8001db8 <dir_sdi>
 800215a:	4603      	mov	r3, r0
 800215c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <dir_find+0x24>
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	e03e      	b.n	80021e6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	4619      	mov	r1, r3
 800216e:	6938      	ldr	r0, [r7, #16]
 8002170:	f7ff faa4 	bl	80016bc <move_window>
 8002174:	4603      	mov	r3, r0
 8002176:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d12f      	bne.n	80021de <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <dir_find+0x4e>
 800218c:	2304      	movs	r3, #4
 800218e:	75fb      	strb	r3, [r7, #23]
 8002190:	e028      	b.n	80021e4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	330b      	adds	r3, #11
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	330b      	adds	r3, #11
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <dir_find+0x86>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a18      	ldr	r0, [r3, #32]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3324      	adds	r3, #36	; 0x24
 80021bc:	220b      	movs	r2, #11
 80021be:	4619      	mov	r1, r3
 80021c0:	f7ff f892 	bl	80012e8 <mem_cmp>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80021ca:	2100      	movs	r1, #0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff fe6e 	bl	8001eae <dir_next>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0c5      	beq.n	8002168 <dir_find+0x24>
 80021dc:	e002      	b.n	80021e4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80021de:	bf00      	nop
 80021e0:	e000      	b.n	80021e4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80021e2:	bf00      	nop

	return res;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80021fc:	2101      	movs	r1, #1
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff1a 	bl	8002038 <dir_alloc>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11c      	bne.n	8002248 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4619      	mov	r1, r3
 8002214:	68b8      	ldr	r0, [r7, #8]
 8002216:	f7ff fa51 	bl	80016bc <move_window>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	2220      	movs	r2, #32
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f841 	bl	80012b4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a18      	ldr	r0, [r3, #32]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3324      	adds	r3, #36	; 0x24
 800223a:	220b      	movs	r2, #11
 800223c:	4619      	mov	r1, r3
 800223e:	f7ff f819 	bl	8001274 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2201      	movs	r2, #1
 8002246:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3324      	adds	r3, #36	; 0x24
 8002268:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800226a:	220b      	movs	r2, #11
 800226c:	2120      	movs	r1, #32
 800226e:	68b8      	ldr	r0, [r7, #8]
 8002270:	f7ff f820 	bl	80012b4 <mem_set>
	si = i = 0; ni = 8;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	2308      	movs	r3, #8
 800227e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	61fa      	str	r2, [r7, #28]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800228e:	7efb      	ldrb	r3, [r7, #27]
 8002290:	2b20      	cmp	r3, #32
 8002292:	d94e      	bls.n	8002332 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002294:	7efb      	ldrb	r3, [r7, #27]
 8002296:	2b2f      	cmp	r3, #47	; 0x2f
 8002298:	d006      	beq.n	80022a8 <create_name+0x54>
 800229a:	7efb      	ldrb	r3, [r7, #27]
 800229c:	2b5c      	cmp	r3, #92	; 0x5c
 800229e:	d110      	bne.n	80022c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80022a0:	e002      	b.n	80022a8 <create_name+0x54>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b2f      	cmp	r3, #47	; 0x2f
 80022b2:	d0f6      	beq.n	80022a2 <create_name+0x4e>
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b5c      	cmp	r3, #92	; 0x5c
 80022be:	d0f0      	beq.n	80022a2 <create_name+0x4e>
			break;
 80022c0:	e038      	b.n	8002334 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80022c2:	7efb      	ldrb	r3, [r7, #27]
 80022c4:	2b2e      	cmp	r3, #46	; 0x2e
 80022c6:	d003      	beq.n	80022d0 <create_name+0x7c>
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d30c      	bcc.n	80022ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b0b      	cmp	r3, #11
 80022d4:	d002      	beq.n	80022dc <create_name+0x88>
 80022d6:	7efb      	ldrb	r3, [r7, #27]
 80022d8:	2b2e      	cmp	r3, #46	; 0x2e
 80022da:	d001      	beq.n	80022e0 <create_name+0x8c>
 80022dc:	2306      	movs	r3, #6
 80022de:	e044      	b.n	800236a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80022e0:	2308      	movs	r3, #8
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	230b      	movs	r3, #11
 80022e6:	617b      	str	r3, [r7, #20]
			continue;
 80022e8:	e022      	b.n	8002330 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80022ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da04      	bge.n	80022fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80022f2:	7efb      	ldrb	r3, [r7, #27]
 80022f4:	3b80      	subs	r3, #128	; 0x80
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <create_name+0x120>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80022fc:	7efb      	ldrb	r3, [r7, #27]
 80022fe:	4619      	mov	r1, r3
 8002300:	481d      	ldr	r0, [pc, #116]	; (8002378 <create_name+0x124>)
 8002302:	f7ff f817 	bl	8001334 <chk_chr>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <create_name+0xbc>
 800230c:	2306      	movs	r3, #6
 800230e:	e02c      	b.n	800236a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002310:	7efb      	ldrb	r3, [r7, #27]
 8002312:	2b60      	cmp	r3, #96	; 0x60
 8002314:	d905      	bls.n	8002322 <create_name+0xce>
 8002316:	7efb      	ldrb	r3, [r7, #27]
 8002318:	2b7a      	cmp	r3, #122	; 0x7a
 800231a:	d802      	bhi.n	8002322 <create_name+0xce>
 800231c:	7efb      	ldrb	r3, [r7, #27]
 800231e:	3b20      	subs	r3, #32
 8002320:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	613a      	str	r2, [r7, #16]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	4413      	add	r3, r2
 800232c:	7efa      	ldrb	r2, [r7, #27]
 800232e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8002330:	e7a6      	b.n	8002280 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002332:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	441a      	add	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <create_name+0xf4>
 8002344:	2306      	movs	r3, #6
 8002346:	e010      	b.n	800236a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2be5      	cmp	r3, #229	; 0xe5
 800234e:	d102      	bne.n	8002356 <create_name+0x102>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2205      	movs	r2, #5
 8002354:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002356:	7efb      	ldrb	r3, [r7, #27]
 8002358:	2b20      	cmp	r3, #32
 800235a:	d801      	bhi.n	8002360 <create_name+0x10c>
 800235c:	2204      	movs	r2, #4
 800235e:	e000      	b.n	8002362 <create_name+0x10e>
 8002360:	2200      	movs	r2, #0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	330b      	adds	r3, #11
 8002366:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8002368:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	0800c2d8 	.word	0x0800c2d8
 8002378:	0800c0e4 	.word	0x0800c0e4

0800237c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002390:	e002      	b.n	8002398 <follow_path+0x1c>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b2f      	cmp	r3, #47	; 0x2f
 800239e:	d0f8      	beq.n	8002392 <follow_path+0x16>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b5c      	cmp	r3, #92	; 0x5c
 80023a6:	d0f4      	beq.n	8002392 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b1f      	cmp	r3, #31
 80023b4:	d80a      	bhi.n	80023cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80023be:	2100      	movs	r1, #0
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fcf9 	bl	8001db8 <dir_sdi>
 80023c6:	4603      	mov	r3, r0
 80023c8:	75fb      	strb	r3, [r7, #23]
 80023ca:	e043      	b.n	8002454 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff3f 	bl	8002254 <create_name>
 80023d6:	4603      	mov	r3, r0
 80023d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d134      	bne.n	800244a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff feaf 	bl	8002144 <dir_find>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80023f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d127      	bne.n	800244e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d122      	bne.n	800244e <follow_path+0xd2>
 8002408:	2305      	movs	r3, #5
 800240a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800240c:	e01f      	b.n	800244e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11c      	bne.n	8002452 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	799b      	ldrb	r3, [r3, #6]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8002424:	2305      	movs	r3, #5
 8002426:	75fb      	strb	r3, [r7, #23]
 8002428:	e014      	b.n	8002454 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002438:	4413      	add	r3, r2
 800243a:	4619      	mov	r1, r3
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fe42 	bl	80020c6 <ld_clust>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002448:	e7c0      	b.n	80023cc <follow_path+0x50>
			if (res != FR_OK) break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <follow_path+0xd8>
				break;
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002452:	bf00      	nop
			}
		}
	}

	return res;
 8002454:	7dfb      	ldrb	r3, [r7, #23]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800245e:	b480      	push	{r7}
 8002460:	b087      	sub	sp, #28
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d031      	beq.n	80024d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e002      	b.n	8002482 <get_ldnumber+0x24>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b20      	cmp	r3, #32
 8002488:	d903      	bls.n	8002492 <get_ldnumber+0x34>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b3a      	cmp	r3, #58	; 0x3a
 8002490:	d1f4      	bne.n	800247c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b3a      	cmp	r3, #58	; 0x3a
 8002498:	d11c      	bne.n	80024d4 <get_ldnumber+0x76>
			tp = *path;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60fa      	str	r2, [r7, #12]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	3b30      	subs	r3, #48	; 0x30
 80024aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d80e      	bhi.n	80024d0 <get_ldnumber+0x72>
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d10a      	bne.n	80024d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <get_ldnumber+0x72>
					vol = (int)i;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	e002      	b.n	80024da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80024d8:	693b      	ldr	r3, [r7, #16]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	70da      	strb	r2, [r3, #3]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f04f 32ff 	mov.w	r2, #4294967295
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff f8dc 	bl	80016bc <move_window>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <check_fs+0x2a>
 800250a:	2304      	movs	r3, #4
 800250c:	e038      	b.n	8002580 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3330      	adds	r3, #48	; 0x30
 8002512:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fe2e 	bl	8001178 <ld_word>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <check_fs+0x48>
 8002528:	2303      	movs	r3, #3
 800252a:	e029      	b.n	8002580 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002532:	2be9      	cmp	r3, #233	; 0xe9
 8002534:	d009      	beq.n	800254a <check_fs+0x66>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253c:	2beb      	cmp	r3, #235	; 0xeb
 800253e:	d11e      	bne.n	800257e <check_fs+0x9a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002546:	2b90      	cmp	r3, #144	; 0x90
 8002548:	d119      	bne.n	800257e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3330      	adds	r3, #48	; 0x30
 800254e:	3336      	adds	r3, #54	; 0x36
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fe28 	bl	80011a6 <ld_dword>
 8002556:	4603      	mov	r3, r0
 8002558:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <check_fs+0xa4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <check_fs+0x82>
 8002562:	2300      	movs	r3, #0
 8002564:	e00c      	b.n	8002580 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3330      	adds	r3, #48	; 0x30
 800256a:	3352      	adds	r3, #82	; 0x52
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fe1a 	bl	80011a6 <ld_dword>
 8002572:	4603      	mov	r3, r0
 8002574:	4a05      	ldr	r2, [pc, #20]	; (800258c <check_fs+0xa8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <check_fs+0x9a>
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800257e:	2302      	movs	r3, #2
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00544146 	.word	0x00544146
 800258c:	33544146 	.word	0x33544146

08002590 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b096      	sub	sp, #88	; 0x58
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff ff5a 	bl	800245e <get_ldnumber>
 80025aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80025ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da01      	bge.n	80025b6 <find_volume+0x26>
 80025b2:	230b      	movs	r3, #11
 80025b4:	e22d      	b.n	8002a12 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80025b6:	4aa1      	ldr	r2, [pc, #644]	; (800283c <find_volume+0x2ac>)
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <find_volume+0x3a>
 80025c6:	230c      	movs	r3, #12
 80025c8:	e223      	b.n	8002a12 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01a      	beq.n	8002616 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fd29 	bl	800103c <disk_status>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80025f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10c      	bne.n	8002616 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <find_volume+0x82>
 8002602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800260e:	230a      	movs	r3, #10
 8002610:	e1ff      	b.n	8002a12 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8002612:	2300      	movs	r3, #0
 8002614:	e1fd      	b.n	8002a12 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261e:	b2da      	uxtb	r2, r3
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fd21 	bl	8001070 <disk_initialize>
 800262e:	4603      	mov	r3, r0
 8002630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002640:	2303      	movs	r3, #3
 8002642:	e1e6      	b.n	8002a12 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <find_volume+0xca>
 800264a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002656:	230a      	movs	r3, #10
 8002658:	e1db      	b.n	8002a12 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800265e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002662:	f7ff ff3f 	bl	80024e4 <check_fs>
 8002666:	4603      	mov	r3, r0
 8002668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800266c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002670:	2b02      	cmp	r3, #2
 8002672:	d149      	bne.n	8002708 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002674:	2300      	movs	r3, #0
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
 8002678:	e01e      	b.n	80026b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002688:	4413      	add	r3, r2
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	3304      	adds	r3, #4
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <find_volume+0x114>
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	3308      	adds	r3, #8
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fd83 	bl	80011a6 <ld_dword>
 80026a0:	4602      	mov	r2, r0
 80026a2:	e000      	b.n	80026a6 <find_volume+0x116>
 80026a4:	2200      	movs	r2, #0
 80026a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	3358      	adds	r3, #88	; 0x58
 80026ac:	443b      	add	r3, r7
 80026ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80026b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b4:	3301      	adds	r3, #1
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40
 80026b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d9dd      	bls.n	800267a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80026be:	2300      	movs	r3, #0
 80026c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80026c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <find_volume+0x13e>
 80026c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ca:	3b01      	subs	r3, #1
 80026cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80026ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	3358      	adds	r3, #88	; 0x58
 80026d4:	443b      	add	r3, r7
 80026d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80026da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80026dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <find_volume+0x15e>
 80026e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026e6:	f7ff fefd 	bl	80024e4 <check_fs>
 80026ea:	4603      	mov	r3, r0
 80026ec:	e000      	b.n	80026f0 <find_volume+0x160>
 80026ee:	2303      	movs	r3, #3
 80026f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80026f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d905      	bls.n	8002708 <find_volume+0x178>
 80026fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fe:	3301      	adds	r3, #1
 8002700:	643b      	str	r3, [r7, #64]	; 0x40
 8002702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002704:	2b03      	cmp	r3, #3
 8002706:	d9e2      	bls.n	80026ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800270c:	2b04      	cmp	r3, #4
 800270e:	d101      	bne.n	8002714 <find_volume+0x184>
 8002710:	2301      	movs	r3, #1
 8002712:	e17e      	b.n	8002a12 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002718:	2b01      	cmp	r3, #1
 800271a:	d901      	bls.n	8002720 <find_volume+0x190>
 800271c:	230d      	movs	r3, #13
 800271e:	e178      	b.n	8002a12 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	3330      	adds	r3, #48	; 0x30
 8002724:	330b      	adds	r3, #11
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fd26 	bl	8001178 <ld_word>
 800272c:	4603      	mov	r3, r0
 800272e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002732:	d001      	beq.n	8002738 <find_volume+0x1a8>
 8002734:	230d      	movs	r3, #13
 8002736:	e16c      	b.n	8002a12 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	3330      	adds	r3, #48	; 0x30
 800273c:	3316      	adds	r3, #22
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fd1a 	bl	8001178 <ld_word>
 8002744:	4603      	mov	r3, r0
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <find_volume+0x1cc>
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	3330      	adds	r3, #48	; 0x30
 8002752:	3324      	adds	r3, #36	; 0x24
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fd26 	bl	80011a6 <ld_dword>
 800275a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002760:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <find_volume+0x1f0>
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	789b      	ldrb	r3, [r3, #2]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d001      	beq.n	8002780 <find_volume+0x1f0>
 800277c:	230d      	movs	r3, #13
 800277e:	e148      	b.n	8002a12 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	789b      	ldrb	r3, [r3, #2]
 8002784:	461a      	mov	r2, r3
 8002786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b29a      	uxth	r2, r3
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	895b      	ldrh	r3, [r3, #10]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <find_volume+0x224>
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	895b      	ldrh	r3, [r3, #10]
 80027a6:	461a      	mov	r2, r3
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	895b      	ldrh	r3, [r3, #10]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <find_volume+0x228>
 80027b4:	230d      	movs	r3, #13
 80027b6:	e12c      	b.n	8002a12 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	3330      	adds	r3, #48	; 0x30
 80027bc:	3311      	adds	r3, #17
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fcda 	bl	8001178 <ld_word>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	891b      	ldrh	r3, [r3, #8]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <find_volume+0x24e>
 80027da:	230d      	movs	r3, #13
 80027dc:	e119      	b.n	8002a12 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	3330      	adds	r3, #48	; 0x30
 80027e2:	3313      	adds	r3, #19
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fcc7 	bl	8001178 <ld_word>
 80027ea:	4603      	mov	r3, r0
 80027ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80027ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <find_volume+0x272>
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	3330      	adds	r3, #48	; 0x30
 80027f8:	3320      	adds	r3, #32
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fcd3 	bl	80011a6 <ld_dword>
 8002800:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	3330      	adds	r3, #48	; 0x30
 8002806:	330e      	adds	r3, #14
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fcb5 	bl	8001178 <ld_word>
 800280e:	4603      	mov	r3, r0
 8002810:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <find_volume+0x28c>
 8002818:	230d      	movs	r3, #13
 800281a:	e0fa      	b.n	8002a12 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800281c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800281e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002820:	4413      	add	r3, r2
 8002822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002824:	8912      	ldrh	r2, [r2, #8]
 8002826:	0912      	lsrs	r2, r2, #4
 8002828:	b292      	uxth	r2, r2
 800282a:	4413      	add	r3, r2
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800282e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	429a      	cmp	r2, r3
 8002834:	d204      	bcs.n	8002840 <find_volume+0x2b0>
 8002836:	230d      	movs	r3, #13
 8002838:	e0eb      	b.n	8002a12 <find_volume+0x482>
 800283a:	bf00      	nop
 800283c:	2000046c 	.word	0x2000046c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002848:	8952      	ldrh	r2, [r2, #10]
 800284a:	fbb3 f3f2 	udiv	r3, r3, r2
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <find_volume+0x2ca>
 8002856:	230d      	movs	r3, #13
 8002858:	e0db      	b.n	8002a12 <find_volume+0x482>
		fmt = FS_FAT32;
 800285a:	2303      	movs	r3, #3
 800285c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002866:	4293      	cmp	r3, r2
 8002868:	d802      	bhi.n	8002870 <find_volume+0x2e0>
 800286a:	2302      	movs	r3, #2
 800286c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002876:	4293      	cmp	r3, r2
 8002878:	d802      	bhi.n	8002880 <find_volume+0x2f0>
 800287a:	2301      	movs	r3, #1
 800287c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800288c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800288e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002892:	441a      	add	r2, r3
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002898:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	441a      	add	r2, r3
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80028a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d11e      	bne.n	80028e8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	3330      	adds	r3, #48	; 0x30
 80028ae:	332a      	adds	r3, #42	; 0x2a
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fc61 	bl	8001178 <ld_word>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <find_volume+0x330>
 80028bc:	230d      	movs	r3, #13
 80028be:	e0a8      	b.n	8002a12 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	891b      	ldrh	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <find_volume+0x33c>
 80028c8:	230d      	movs	r3, #13
 80028ca:	e0a2      	b.n	8002a12 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	3330      	adds	r3, #48	; 0x30
 80028d0:	332c      	adds	r3, #44	; 0x2c
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fc67 	bl	80011a6 <ld_dword>
 80028d8:	4602      	mov	r2, r0
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
 80028e6:	e01f      	b.n	8002928 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	891b      	ldrh	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <find_volume+0x364>
 80028f0:	230d      	movs	r3, #13
 80028f2:	e08e      	b.n	8002a12 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fa:	441a      	add	r2, r3
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002904:	2b02      	cmp	r3, #2
 8002906:	d103      	bne.n	8002910 <find_volume+0x380>
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	e00a      	b.n	8002926 <find_volume+0x396>
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	085a      	lsrs	r2, r3, #1
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002932:	0a5b      	lsrs	r3, r3, #9
 8002934:	429a      	cmp	r2, r3
 8002936:	d201      	bcs.n	800293c <find_volume+0x3ac>
 8002938:	230d      	movs	r3, #13
 800293a:	e06a      	b.n	8002a12 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	611a      	str	r2, [r3, #16]
 8002944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002956:	2b03      	cmp	r3, #3
 8002958:	d149      	bne.n	80029ee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	3330      	adds	r3, #48	; 0x30
 800295e:	3330      	adds	r3, #48	; 0x30
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fc09 	bl	8001178 <ld_word>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d140      	bne.n	80029ee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800296c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296e:	3301      	adds	r3, #1
 8002970:	4619      	mov	r1, r3
 8002972:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002974:	f7fe fea2 	bl	80016bc <move_window>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d137      	bne.n	80029ee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	2200      	movs	r2, #0
 8002982:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	3330      	adds	r3, #48	; 0x30
 8002988:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fbf3 	bl	8001178 <ld_word>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800299a:	429a      	cmp	r2, r3
 800299c:	d127      	bne.n	80029ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	3330      	adds	r3, #48	; 0x30
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fbff 	bl	80011a6 <ld_dword>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <find_volume+0x48c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d11e      	bne.n	80029ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	3330      	adds	r3, #48	; 0x30
 80029b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fbf4 	bl	80011a6 <ld_dword>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <find_volume+0x490>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d113      	bne.n	80029ee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	3330      	adds	r3, #48	; 0x30
 80029ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fbe9 	bl	80011a6 <ld_dword>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	3330      	adds	r3, #48	; 0x30
 80029de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fbdf 	bl	80011a6 <ld_dword>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80029f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <find_volume+0x494>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <find_volume+0x494>)
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <find_volume+0x494>)
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8002a0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a0c:	f7fe fdee 	bl	80015ec <clear_lock>
#endif
	return FR_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3758      	adds	r7, #88	; 0x58
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	41615252 	.word	0x41615252
 8002a20:	61417272 	.word	0x61417272
 8002a24:	20000470 	.word	0x20000470

08002a28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8002a32:	2309      	movs	r3, #9
 8002a34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <validate+0x4e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d018      	beq.n	8002a76 <validate+0x4e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <validate+0x4e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	889a      	ldrh	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	88db      	ldrh	r3, [r3, #6]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10c      	bne.n	8002a76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe faea 	bl	800103c <disk_status>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <validate+0x4e>
			res = FR_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <validate+0x5a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	e000      	b.n	8002a84 <validate+0x5c>
 8002a82:	2300      	movs	r3, #0
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	6013      	str	r3, [r2, #0]
	return res;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fcd7 	bl	800245e <get_ldnumber>
 8002ab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da01      	bge.n	8002abc <f_mount+0x28>
 8002ab8:	230b      	movs	r3, #11
 8002aba:	e02b      	b.n	8002b14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002abc:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <f_mount+0x88>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8002acc:	69b8      	ldr	r0, [r7, #24]
 8002ace:	f7fe fd8d 	bl	80015ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	490d      	ldr	r1, [pc, #52]	; (8002b1c <f_mount+0x88>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <f_mount+0x66>
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <f_mount+0x6a>
 8002afa:	2300      	movs	r3, #0
 8002afc:	e00a      	b.n	8002b14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002afe:	f107 010c 	add.w	r1, r7, #12
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	2200      	movs	r2, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fd41 	bl	8002590 <find_volume>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000046c 	.word	0x2000046c

08002b20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b098      	sub	sp, #96	; 0x60
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <f_open+0x18>
 8002b34:	2309      	movs	r3, #9
 8002b36:	e1ad      	b.n	8002e94 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8002b40:	79fa      	ldrb	r2, [r7, #7]
 8002b42:	f107 0110 	add.w	r1, r7, #16
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fd20 	bl	8002590 <find_volume>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8002b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 8191 	bne.w	8002e82 <f_open+0x362>
		dj.obj.fs = fs;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fc05 	bl	800237c <follow_path>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8002b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002b80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da03      	bge.n	8002b92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b90:	e011      	b.n	8002bb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fbdc 	bl	8001368 <chk_lock>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 031c 	and.w	r3, r3, #28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d07f      	beq.n	8002cc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8002bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d017      	beq.n	8002bf8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d10e      	bne.n	8002bee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002bd0:	f7fe fc24 	bl	800141c <enq_lock>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <f_open+0xc8>
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fb05 	bl	80021ee <dir_register>
 8002be4:	4603      	mov	r3, r0
 8002be6:	e000      	b.n	8002bea <f_open+0xca>
 8002be8:	2312      	movs	r3, #18
 8002bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	e010      	b.n	8002c1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002bf8:	7ebb      	ldrb	r3, [r7, #26]
 8002bfa:	f003 0311 	and.w	r3, r3, #17
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <f_open+0xea>
					res = FR_DENIED;
 8002c02:	2307      	movs	r3, #7
 8002c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c08:	e007      	b.n	8002c1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <f_open+0xfa>
 8002c14:	2308      	movs	r3, #8
 8002c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d168      	bne.n	8002cf4 <f_open+0x1d4>
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d063      	beq.n	8002cf4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8002c2c:	f7fd fcbc 	bl	80005a8 <get_fattime>
 8002c30:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	330e      	adds	r3, #14
 8002c36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe faf0 	bl	800121e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	3316      	adds	r3, #22
 8002c42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe faea 	bl	800121e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	330b      	adds	r3, #11
 8002c4e:	2220      	movs	r2, #32
 8002c50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fa34 	bl	80020c6 <ld_clust>
 8002c5e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fa4c 	bl	8002104 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	331c      	adds	r3, #28
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fad3 	bl	800121e <st_dword>
					fs->wflag = 1;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d037      	beq.n	8002cf4 <f_open+0x1d4>
						dw = fs->winsect;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	2200      	movs	r2, #0
 8002c90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe ff60 	bl	8001b58 <remove_chain>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8002c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d126      	bne.n	8002cf4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fd06 	bl	80016bc <move_window>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	e019      	b.n	8002cf4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8002cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d115      	bne.n	8002cf4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8002cc8:	7ebb      	ldrb	r3, [r7, #26]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <f_open+0x1ba>
					res = FR_NO_FILE;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cd8:	e00c      	b.n	8002cf4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <f_open+0x1d4>
 8002ce4:	7ebb      	ldrb	r3, [r7, #26]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <f_open+0x1d4>
						res = FR_DENIED;
 8002cee:	2307      	movs	r3, #7
 8002cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8002cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d128      	bne.n	8002d4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8002d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fb91 	bl	800145c <inc_lock>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <f_open+0x22e>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8002d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 8095 	bne.w	8002e82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f9b1 	bl	80020c6 <ld_clust>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	331c      	adds	r3, #28
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fa19 	bl	80011a6 <ld_dword>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	88da      	ldrh	r2, [r3, #6]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3330      	adds	r3, #48	; 0x30
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fa7f 	bl	80012b4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d060      	beq.n	8002e82 <f_open+0x362>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05c      	beq.n	8002e82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	895b      	ldrh	r3, [r3, #10]
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	657b      	str	r3, [r7, #84]	; 0x54
 8002de4:	e016      	b.n	8002e14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fd20 	bl	8001830 <get_fat>
 8002df0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8002df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d802      	bhi.n	8002dfe <f_open+0x2de>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d102      	bne.n	8002e0c <f_open+0x2ec>
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	657b      	str	r3, [r7, #84]	; 0x54
 8002e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <f_open+0x304>
 8002e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8e0      	bhi.n	8002de6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d127      	bne.n	8002e82 <f_open+0x362>
 8002e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d022      	beq.n	8002e82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fcd7 	bl	80017f4 <clust2sect>
 8002e46:	6478      	str	r0, [r7, #68]	; 0x44
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <f_open+0x336>
						res = FR_INT_ERR;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e54:	e015      	b.n	8002e82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e58:	0a5a      	lsrs	r2, r3, #9
 8002e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5c:	441a      	add	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	7858      	ldrb	r0, [r3, #1]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	2301      	movs	r3, #1
 8002e72:	f7fe f923 	bl	80010bc <disk_read>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <f_open+0x362>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <f_open+0x370>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8002e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3760      	adds	r7, #96	; 0x60
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f107 0210 	add.w	r2, r7, #16
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fdb3 	bl	8002a28 <validate>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <f_write+0x44>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	7d5b      	ldrb	r3, [r3, #21]
 8002ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <f_write+0x4a>
 8002ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ee4:	e14b      	b.n	800317e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	7d1b      	ldrb	r3, [r3, #20]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <f_write+0x5a>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e143      	b.n	800317e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	441a      	add	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f080 812d 	bcs.w	8003162 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8002f10:	e127      	b.n	8003162 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80e3 	bne.w	80030e6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	0a5b      	lsrs	r3, r3, #9
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	8952      	ldrh	r2, [r2, #10]
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d143      	bne.n	8002fbe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11a      	bne.n	8002f80 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fe67 	bl	8001c22 <create_chain>
 8002f54:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f56:	e013      	b.n	8002f80 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4619      	mov	r1, r3
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7fe fef3 	bl	8001d52 <clmt_clust>
 8002f6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f6e:	e007      	b.n	8002f80 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f7fe fe52 	bl	8001c22 <create_chain>
 8002f7e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80f2 	beq.w	800316c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <f_write+0xfc>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2202      	movs	r2, #2
 8002f92:	755a      	strb	r2, [r3, #21]
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0f2      	b.n	800317e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d104      	bne.n	8002faa <f_write+0x10e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	755a      	strb	r2, [r3, #21]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0e9      	b.n	800317e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <f_write+0x122>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	7d1b      	ldrb	r3, [r3, #20]
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da18      	bge.n	8002ffa <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	7858      	ldrb	r0, [r3, #1]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f7fe f890 	bl	80010fc <disk_write>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <f_write+0x150>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	755a      	strb	r2, [r3, #21]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0c8      	b.n	800317e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	7d1b      	ldrb	r3, [r3, #20]
 8002ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7fe fbf6 	bl	80017f4 <clust2sect>
 8003008:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <f_write+0x17e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2202      	movs	r2, #2
 8003014:	755a      	strb	r2, [r3, #21]
 8003016:	2302      	movs	r3, #2
 8003018:	e0b1      	b.n	800317e <f_write+0x2e2>
			sect += csect;
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0a5b      	lsrs	r3, r3, #9
 8003026:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d03c      	beq.n	80030a8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	4413      	add	r3, r2
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	8952      	ldrh	r2, [r2, #10]
 8003038:	4293      	cmp	r3, r2
 800303a:	d905      	bls.n	8003048 <f_write+0x1ac>
					cc = fs->csize - csect;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	895b      	ldrh	r3, [r3, #10]
 8003040:	461a      	mov	r2, r3
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	7858      	ldrb	r0, [r3, #1]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	69f9      	ldr	r1, [r7, #28]
 8003052:	f7fe f853 	bl	80010fc <disk_write>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <f_write+0x1ca>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	755a      	strb	r2, [r3, #21]
 8003062:	2301      	movs	r3, #1
 8003064:	e08b      	b.n	800317e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	429a      	cmp	r2, r3
 8003072:	d915      	bls.n	80030a0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308c:	4619      	mov	r1, r3
 800308e:	f7fe f8f1 	bl	8001274 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	7d1b      	ldrb	r3, [r3, #20]
 8003096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80030a6:	e03f      	b.n	8003128 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d016      	beq.n	80030e0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d210      	bcs.n	80030e0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	7858      	ldrb	r0, [r3, #1]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80030c8:	2301      	movs	r3, #1
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	f7fd fff6 	bl	80010bc <disk_read>
 80030d0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	755a      	strb	r2, [r3, #21]
 80030dc:	2301      	movs	r3, #1
 80030de:	e04e      	b.n	800317e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d901      	bls.n	8003100 <f_write+0x264>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	4413      	add	r3, r2
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	69f9      	ldr	r1, [r7, #28]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe f8ad 	bl	8001274 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	7d1b      	ldrb	r3, [r3, #20]
 800311e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	4413      	add	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	441a      	add	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	619a      	str	r2, [r3, #24]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	bf38      	it	cc
 8003148:	461a      	movcc	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	441a      	add	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f aed4 	bne.w	8002f12 <f_write+0x76>
 800316a:	e000      	b.n	800316e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800316c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	7d1b      	ldrb	r3, [r3, #20]
 8003172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3730      	adds	r7, #48	; 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f107 0208 	add.w	r2, r7, #8
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fc46 	bl	8002a28 <validate>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d168      	bne.n	8003278 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7d1b      	ldrb	r3, [r3, #20]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d062      	beq.n	8003278 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7d1b      	ldrb	r3, [r3, #20]
 80031b6:	b25b      	sxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da15      	bge.n	80031e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	7858      	ldrb	r0, [r3, #1]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	2301      	movs	r3, #1
 80031cc:	f7fd ff96 	bl	80010fc <disk_write>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <f_sync+0x54>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e04f      	b.n	800327a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7d1b      	ldrb	r3, [r3, #20]
 80031de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80031e8:	f7fd f9de 	bl	80005a8 <get_fattime>
 80031ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f7fe fa60 	bl	80016bc <move_window>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d138      	bne.n	8003278 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	330b      	adds	r3, #11
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	330b      	adds	r3, #11
 8003216:	f042 0220 	orr.w	r2, r2, #32
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	461a      	mov	r2, r3
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	f7fe ff6b 	bl	8002104 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f103 021c 	add.w	r2, r3, #28
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f7fd ffef 	bl	800121e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3316      	adds	r3, #22
 8003244:	6939      	ldr	r1, [r7, #16]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd ffe9 	bl	800121e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3312      	adds	r3, #18
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd ffc9 	bl	80011ea <st_word>
					fs->wflag = 1;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2201      	movs	r2, #1
 800325c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fa59 	bl	8001718 <sync_fs>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7d1b      	ldrb	r3, [r3, #20]
 800326e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003272:	b2da      	uxtb	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003278:	7dfb      	ldrb	r3, [r7, #23]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff7b 	bl	8003186 <f_sync>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f107 0208 	add.w	r2, r7, #8
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fbc0 	bl	8002a28 <validate>
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe f95e 	bl	8001578 <dec_lock>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b092      	sub	sp, #72	; 0x48
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80032e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	2200      	movs	r2, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff f94f 	bl	8002590 <find_volume>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80032f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 8099 	bne.w	8003434 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8003302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	3b02      	subs	r3, #2
 8003312:	429a      	cmp	r2, r3
 8003314:	d804      	bhi.n	8003320 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e089      	b.n	8003434 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d128      	bne.n	800337e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800332c:	2302      	movs	r3, #2
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fa78 	bl	8001830 <get_fat>
 8003340:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d103      	bne.n	8003352 <f_getfree+0x7c>
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003350:	e063      	b.n	800341a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d103      	bne.n	8003360 <f_getfree+0x8a>
 8003358:	2302      	movs	r3, #2
 800335a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800335e:	e05c      	b.n	800341a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <f_getfree+0x96>
 8003366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003368:	3301      	adds	r3, #1
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336e:	3301      	adds	r3, #1
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003378:	429a      	cmp	r2, r3
 800337a:	d3db      	bcc.n	8003334 <f_getfree+0x5e>
 800337c:	e04d      	b.n	800341a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8003398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	63ba      	str	r2, [r7, #56]	; 0x38
 80033a0:	4619      	mov	r1, r3
 80033a2:	f7fe f98b 	bl	80016bc <move_window>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80033ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d131      	bne.n	8003418 <f_getfree+0x142>
							p = fs->win;
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	3330      	adds	r3, #48	; 0x30
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80033ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d10f      	bne.n	80033e8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80033c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ca:	f7fd fed5 	bl	8001178 <ld_word>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <f_getfree+0x104>
 80033d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d6:	3301      	adds	r3, #1
 80033d8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	3302      	adds	r3, #2
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
 80033e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e2:	3b02      	subs	r3, #2
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
 80033e6:	e010      	b.n	800340a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80033e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ea:	f7fd fedc 	bl	80011a6 <ld_dword>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <f_getfree+0x128>
 80033f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fa:	3301      	adds	r3, #1
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	3304      	adds	r3, #4
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	3b04      	subs	r3, #4
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	3b01      	subs	r3, #1
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1bd      	bne.n	8003392 <f_getfree+0xbc>
 8003416:	e000      	b.n	800341a <f_getfree+0x144>
							if (res != FR_OK) break;
 8003418:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800341e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003424:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	791a      	ldrb	r2, [r3, #4]
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8003434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003438:	4618      	mov	r0, r3
 800343a:	3748      	adds	r7, #72	; 0x48
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b0a      	cmp	r3, #10
 8003450:	d103      	bne.n	800345a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8003452:	210d      	movs	r1, #13
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fff3 	bl	8003440 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	db25      	blt.n	80034b2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b3c      	cmp	r3, #60	; 0x3c
 8003478:	dd12      	ble.n	80034a0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f103 010c 	add.w	r1, r3, #12
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	f7ff fd07 	bl	8002e9c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d101      	bne.n	800349a <putc_bfd+0x5a>
 8003496:	2300      	movs	r3, #0
 8003498:	e001      	b.n	800349e <putc_bfd+0x5e>
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e000      	b.n	80034b4 <putc_bfd+0x74>
	if (i < 0) return;
 80034b2:	bf00      	nop
}
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db16      	blt.n	80034f8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f103 010c 	add.w	r1, r3, #12
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	461a      	mov	r2, r3
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	f7ff fcdd 	bl	8002e9c <f_write>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d102      	bne.n	80034f8 <putc_flush+0x3e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	e001      	b.n	80034fc <putc_flush+0x42>
	return EOF;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b096      	sub	sp, #88	; 0x58
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
	putbuff pb;


	putc_init(&pb, fp);
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ffe0 	bl	8003504 <putc_init>
	putc_bfd(&pb, c);	/* Put the character */
 8003544:	79fa      	ldrb	r2, [r7, #7]
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff77 	bl	8003440 <putc_bfd>
	return putc_flush(&pb);
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffaf 	bl	80034ba <putc_flush>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3758      	adds	r7, #88	; 0x58
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b096      	sub	sp, #88	; 0x58
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	6839      	ldr	r1, [r7, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ffc4 	bl	8003504 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800357c:	e009      	b.n	8003592 <f_puts+0x2c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff57 	bl	8003440 <putc_bfd>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f1      	bne.n	800357e <f_puts+0x18>
	return putc_flush(&pb);
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff8b 	bl	80034ba <putc_flush>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3758      	adds	r7, #88	; 0x58
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035c8:	7a5b      	ldrb	r3, [r3, #9]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d131      	bne.n	8003634 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035d2:	7a5b      	ldrb	r3, [r3, #9]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035e0:	7a5b      	ldrb	r3, [r3, #9]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035f0:	7a5b      	ldrb	r3, [r3, #9]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 80035f8:	4413      	add	r3, r2
 80035fa:	79fa      	ldrb	r2, [r7, #7]
 80035fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 8003600:	7a5b      	ldrb	r3, [r3, #9]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	b2d1      	uxtb	r1, r2
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <FATFS_LinkDriverEx+0x90>)
 800360a:	7251      	strb	r1, [r2, #9]
 800360c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800360e:	7dbb      	ldrb	r3, [r7, #22]
 8003610:	3330      	adds	r3, #48	; 0x30
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3301      	adds	r3, #1
 800361c:	223a      	movs	r2, #58	; 0x3a
 800361e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3302      	adds	r3, #2
 8003624:	222f      	movs	r2, #47	; 0x2f
 8003626:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3303      	adds	r3, #3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
}
 8003636:	4618      	mov	r0, r3
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	20000494 	.word	0x20000494

08003644 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	6839      	ldr	r1, [r7, #0]
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ffac 	bl	80035b0 <FATFS_LinkDriverEx>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b096      	sub	sp, #88	; 0x58
 8003668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	2244      	movs	r2, #68	; 0x44
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f008 f84a 	bl	800b70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003678:	463b      	mov	r3, r7
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800368a:	f003 fe3b 	bl	8007304 <HAL_PWREx_ControlVoltageScaling>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003694:	f002 f87e 	bl	8005794 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003698:	f003 fe1a 	bl	80072d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <SystemClock_Config+0xa4>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	4a19      	ldr	r2, [pc, #100]	; (8003708 <SystemClock_Config+0xa4>)
 80036a4:	f023 0318 	bic.w	r3, r3, #24
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80036ac:	2314      	movs	r3, #20
 80036ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80036b0:	2301      	movs	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11; //~48MHz
 80036bc:	23b0      	movs	r3, #176	; 0xb0
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fe6f 	bl	80073ac <HAL_RCC_OscConfig>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80036d4:	f002 f85e 	bl	8005794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d8:	230f      	movs	r3, #15
 80036da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036dc:	2300      	movs	r3, #0
 80036de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036ec:	463b      	mov	r3, r7
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fa7b 	bl	8007bec <HAL_RCC_ClockConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80036fc:	f002 f84a 	bl	8005794 <Error_Handler>
  //HAL_RCCEx_EnableMSIPLLMode();

  /* Clock output on MCO pin */

  //HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
}
 8003700:	bf00      	nop
 8003702:	3758      	adds	r7, #88	; 0x58
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003712:	f107 030c 	add.w	r3, r7, #12
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	4b32      	ldr	r3, [pc, #200]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	4a31      	ldr	r2, [pc, #196]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <MX_GPIO_Init+0xe0>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	4a2b      	ldr	r2, [pc, #172]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003746:	4b29      	ldr	r3, [pc, #164]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	4a25      	ldr	r2, [pc, #148]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <MX_GPIO_Init+0xe0>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800376e:	2301      	movs	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	4619      	mov	r1, r3
 8003780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003784:	f002 fcaa 	bl	80060dc <HAL_GPIO_Init>

	/* Set up GPIO pins initial state for Temperature and Humidity Sensors */

	GPIO_InitStruct.Pin = TEMPHUMID_1_PIN;
 8003788:	2301      	movs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800378c:	2311      	movs	r3, #17
 800378e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	4619      	mov	r1, r3
 800379e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a2:	f002 fc9b 	bl	80060dc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = TEMPHUMID_2_PIN;
 80037a6:	2302      	movs	r3, #2
 80037a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80037aa:	2311      	movs	r3, #17
 80037ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	4619      	mov	r1, r3
 80037bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037c0:	f002 fc8c 	bl	80060dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 SPI CS pin */
	GPIO_InitStruct.Pin = SPI_CS_PIN;
 80037c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ca:	2301      	movs	r3, #1
 80037cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_PORT, &GPIO_InitStruct);
 80037d6:	f107 030c 	add.w	r3, r7, #12
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e0:	f002 fc7c 	bl	80060dc <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/
}
 80037e4:	bf00      	nop
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000

080037f0 <LCD_I2C_Init>:
  * @param None
  * @retval None
  */

void LCD_I2C_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af04      	add	r7, sp, #16
	/* Device Setup */
	LCD_SetupBuffer[0] = LCD_FUNCTION_SET1;
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <LCD_I2C_Init+0x68>)
 80037f8:	2238      	movs	r2, #56	; 0x38
 80037fa:	701a      	strb	r2, [r3, #0]
	LCD_SetupBuffer[1] = LCD_DISPLAY_ON_BLINK;
 80037fc:	4b16      	ldr	r3, [pc, #88]	; (8003858 <LCD_I2C_Init+0x68>)
 80037fe:	220f      	movs	r2, #15
 8003800:	705a      	strb	r2, [r3, #1]
	LCD_SetupBuffer[2] = LCD_ENTRY_MODE1;
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <LCD_I2C_Init+0x68>)
 8003804:	2238      	movs	r2, #56	; 0x38
 8003806:	709a      	strb	r2, [r3, #2]

	/* Write setup to memory */
	HAL_I2C_Mem_Write(&i2c1, LCD_I2C_ADDRESS, LCD_INSTRUCTION_COMMAND, sizeof(LCD_INSTRUCTION_COMMAND), LCD_SetupBuffer, sizeof(LCD_SetupBuffer), I2C_TIMEOUT_VALUE);
 8003808:	2364      	movs	r3, #100	; 0x64
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	2303      	movs	r3, #3
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <LCD_I2C_Init+0x68>)
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2301      	movs	r3, #1
 8003816:	2200      	movs	r2, #0
 8003818:	2178      	movs	r1, #120	; 0x78
 800381a:	4810      	ldr	r0, [pc, #64]	; (800385c <LCD_I2C_Init+0x6c>)
 800381c:	f003 f872 	bl	8006904 <HAL_I2C_Mem_Write>

	/*Clear the display before writing */
	LCD_ClearDisplay();
 8003820:	f000 f8ca 	bl	80039b8 <LCD_ClearDisplay>

	/* Write data to LCD display */
	HAL_I2C_Mem_Write(&i2c1, LCD_I2C_ADDRESS, LCD_DATA_COMMAND, sizeof(LCD_DATA_COMMAND), LCD_InitData, sizeof(LCD_InitData)-1, I2C_TIMEOUT_VALUE);
 8003824:	2364      	movs	r3, #100	; 0x64
 8003826:	9302      	str	r3, [sp, #8]
 8003828:	230b      	movs	r3, #11
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <LCD_I2C_Init+0x70>)
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2301      	movs	r3, #1
 8003832:	2240      	movs	r2, #64	; 0x40
 8003834:	2178      	movs	r1, #120	; 0x78
 8003836:	4809      	ldr	r0, [pc, #36]	; (800385c <LCD_I2C_Init+0x6c>)
 8003838:	f003 f864 	bl	8006904 <HAL_I2C_Mem_Write>

	HAL_Delay(500);
 800383c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003840:	f002 fae8 	bl	8005e14 <HAL_Delay>

	/*Clear the display first */
	LCD_ClearDisplay();
 8003844:	f000 f8b8 	bl	80039b8 <LCD_ClearDisplay>

	HAL_Delay(3000);
 8003848:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800384c:	f002 fae2 	bl	8005e14 <HAL_Delay>
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200004a0 	.word	0x200004a0
 800385c:	20000df0 	.word	0x20000df0
 8003860:	2000001c 	.word	0x2000001c

08003864 <LCD_WriteAlphaLCD>:
  * @param sizeOfData: Size of the data to be sent.
  * @retval None
  */

void LCD_WriteAlphaLCD(uint8_t *pData, uint32_t sizeOfpData)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af04      	add	r7, sp, #16
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	/* Delay for LCD instruction time */
	HAL_Delay(10);
 800386e:	200a      	movs	r0, #10
 8003870:	f002 fad0 	bl	8005e14 <HAL_Delay>

	/* Check the type of data */
	for(uint8_t i = 0; i < sizeOfpData; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e01c      	b.n	80038b4 <LCD_WriteAlphaLCD+0x50>
	{
		/* Is it a printable character */
		if(isprint(pData[i]))
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <LCD_WriteAlphaLCD+0x64>)
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <LCD_WriteAlphaLCD+0x4a>
		{
			HAL_I2C_Mem_Write(&i2c1, LCD_I2C_ADDRESS, LCD_DATA_COMMAND, sizeof(LCD_DATA_COMMAND), (uint8_t*)&pData[i], sizeof(pData[i]), I2C_TIMEOUT_VALUE);
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	2264      	movs	r2, #100	; 0x64
 800389a:	9202      	str	r2, [sp, #8]
 800389c:	2201      	movs	r2, #1
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2301      	movs	r3, #1
 80038a4:	2240      	movs	r2, #64	; 0x40
 80038a6:	2178      	movs	r1, #120	; 0x78
 80038a8:	4808      	ldr	r0, [pc, #32]	; (80038cc <LCD_WriteAlphaLCD+0x68>)
 80038aa:	f003 f82b 	bl	8006904 <HAL_I2C_Mem_Write>
	for(uint8_t i = 0; i < sizeOfpData; i++)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3301      	adds	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8de      	bhi.n	800387a <LCD_WriteAlphaLCD+0x16>
		}
	}
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	0800c3a0 	.word	0x0800c3a0
 80038cc:	20000df0 	.word	0x20000df0

080038d0 <LCD_WriteNumericLCD>:
  * @param sizeOfData: Size of the data to be sent.
  * @retval None
  */

void LCD_WriteNumericLCD(uint8_t *pData, uint32_t sizeOfpData)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af04      	add	r7, sp, #16
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
	char buff[2];

	/* Delay for LCD instruction time */
	HAL_Delay(10);
 80038da:	200a      	movs	r0, #10
 80038dc:	f002 fa9a 	bl	8005e14 <HAL_Delay>

	/* Check the type of data */
	for(uint8_t i = 0; i < sizeOfpData; i++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	e032      	b.n	800394c <LCD_WriteNumericLCD+0x7c>
	{
		/* Is it a printable character */
		itoa(pData[i], buff, 10);
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	220a      	movs	r2, #10
 80038f6:	4619      	mov	r1, r3
 80038f8:	f007 ff06 	bl	800b708 <itoa>

		for(uint8_t j = 0; j < sizeof(buff); j++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	73bb      	strb	r3, [r7, #14]
 8003900:	e01e      	b.n	8003940 <LCD_WriteNumericLCD+0x70>
		{
			if(isprint((uint8_t)buff[j]))
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	3310      	adds	r3, #16
 8003906:	443b      	add	r3, r7
 8003908:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800390c:	3301      	adds	r3, #1
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <LCD_WriteNumericLCD+0x90>)
 8003910:	4413      	add	r3, r2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <LCD_WriteNumericLCD+0x6a>
			{
				HAL_I2C_Mem_Write(&i2c1, LCD_I2C_ADDRESS, LCD_DATA_COMMAND, sizeof(LCD_DATA_COMMAND), (uint8_t*)&buff[j], sizeof(buff[j]), I2C_TIMEOUT_VALUE);
 800391c:	7bbb      	ldrb	r3, [r7, #14]
 800391e:	f107 020c 	add.w	r2, r7, #12
 8003922:	4413      	add	r3, r2
 8003924:	2264      	movs	r2, #100	; 0x64
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	2201      	movs	r2, #1
 800392a:	9201      	str	r2, [sp, #4]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2301      	movs	r3, #1
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	2178      	movs	r1, #120	; 0x78
 8003934:	480b      	ldr	r0, [pc, #44]	; (8003964 <LCD_WriteNumericLCD+0x94>)
 8003936:	f002 ffe5 	bl	8006904 <HAL_I2C_Mem_Write>
		for(uint8_t j = 0; j < sizeof(buff); j++)
 800393a:	7bbb      	ldrb	r3, [r7, #14]
 800393c:	3301      	adds	r3, #1
 800393e:	73bb      	strb	r3, [r7, #14]
 8003940:	7bbb      	ldrb	r3, [r7, #14]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d9dd      	bls.n	8003902 <LCD_WriteNumericLCD+0x32>
	for(uint8_t i = 0; i < sizeOfpData; i++)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	3301      	adds	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8c8      	bhi.n	80038e6 <LCD_WriteNumericLCD+0x16>
			}
		}
	}
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	0800c3a0 	.word	0x0800c3a0
 8003964:	20000df0 	.word	0x20000df0

08003968 <LCD_SetCursorPosition>:
  * @param sizeOfData: Size of the data to be sent.
  * @retval None
  */

void LCD_SetCursorPosition(uint8_t row, uint8_t column)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af04      	add	r7, sp, #16
 800396e:	4603      	mov	r3, r0
 8003970:	460a      	mov	r2, r1
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	4613      	mov	r3, r2
 8003976:	71bb      	strb	r3, [r7, #6]
	/* Check if the row is row 0 or row 1 and set off set if it is row 1 */
	if(row == 0x01)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <LCD_SetCursorPosition+0x1a>
	{
		row = LCD_SET_ROW1_OFFSET;
 800397e:	2340      	movs	r3, #64	; 0x40
 8003980:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t cursorData = LCD_SET_CURSOR_COMMAND | row | column;
 8003982:	79fa      	ldrb	r2, [r7, #7]
 8003984:	79bb      	ldrb	r3, [r7, #6]
 8003986:	4313      	orrs	r3, r2
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800398e:	b2db      	uxtb	r3, r3
 8003990:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&i2c1, LCD_I2C_ADDRESS, LCD_INSTRUCTION_COMMAND, sizeof(LCD_INSTRUCTION_COMMAND), &cursorData, sizeof(cursorData), I2C_TIMEOUT_VALUE);
 8003992:	2364      	movs	r3, #100	; 0x64
 8003994:	9302      	str	r3, [sp, #8]
 8003996:	2301      	movs	r3, #1
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	f107 030f 	add.w	r3, r7, #15
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2301      	movs	r3, #1
 80039a2:	2200      	movs	r2, #0
 80039a4:	2178      	movs	r1, #120	; 0x78
 80039a6:	4803      	ldr	r0, [pc, #12]	; (80039b4 <LCD_SetCursorPosition+0x4c>)
 80039a8:	f002 ffac 	bl	8006904 <HAL_I2C_Mem_Write>
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000df0 	.word	0x20000df0

080039b8 <LCD_ClearDisplay>:
  * @param None
  * @retval None
  */

void LCD_ClearDisplay()
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af04      	add	r7, sp, #16
	/* Write clear screen instruction to LCD */
	HAL_I2C_Mem_Write(&i2c1, LCD_I2C_ADDRESS, LCD_INSTRUCTION_COMMAND, sizeof(LCD_INSTRUCTION_COMMAND), LCD_CLEAR_DISPLAY, sizeof(LCD_CLEAR_DISPLAY), I2C_TIMEOUT_VALUE);
 80039be:	2364      	movs	r3, #100	; 0x64
 80039c0:	9302      	str	r3, [sp, #8]
 80039c2:	2304      	movs	r3, #4
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2301      	movs	r3, #1
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2301      	movs	r3, #1
 80039cc:	2200      	movs	r2, #0
 80039ce:	2178      	movs	r1, #120	; 0x78
 80039d0:	4804      	ldr	r0, [pc, #16]	; (80039e4 <LCD_ClearDisplay+0x2c>)
 80039d2:	f002 ff97 	bl	8006904 <HAL_I2C_Mem_Write>

	/* Delay for LCD instruction time */
	HAL_Delay(10);
 80039d6:	200a      	movs	r0, #10
 80039d8:	f002 fa1c 	bl	8005e14 <HAL_Delay>
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000df0 	.word	0x20000df0

080039e8 <GrowTent_Mode>:
  * @param None
  * @retval None
  */

void GrowTent_Mode(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
	 * Heater			-> Running
	 * Humidity 		-> Running*/

	char buff[2];

	itoa(growTentMode, buff, 10);
 80039ee:	4b95      	ldr	r3, [pc, #596]	; (8003c44 <GrowTent_Mode+0x25c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	220a      	movs	r2, #10
 80039f8:	4619      	mov	r1, r3
 80039fa:	f007 fe85 	bl	800b708 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Mode: ", sizeof("Mode: "), USART_TIMEOUT_VALUE);
 80039fe:	2364      	movs	r3, #100	; 0x64
 8003a00:	2207      	movs	r2, #7
 8003a02:	4991      	ldr	r1, [pc, #580]	; (8003c48 <GrowTent_Mode+0x260>)
 8003a04:	4891      	ldr	r0, [pc, #580]	; (8003c4c <GrowTent_Mode+0x264>)
 8003a06:	f007 f9cf 	bl	800ada8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8003a0a:	1d39      	adds	r1, r7, #4
 8003a0c:	2364      	movs	r3, #100	; 0x64
 8003a0e:	2202      	movs	r2, #2
 8003a10:	488e      	ldr	r0, [pc, #568]	; (8003c4c <GrowTent_Mode+0x264>)
 8003a12:	f007 f9c9 	bl	800ada8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8003a16:	2364      	movs	r3, #100	; 0x64
 8003a18:	2202      	movs	r2, #2
 8003a1a:	498d      	ldr	r1, [pc, #564]	; (8003c50 <GrowTent_Mode+0x268>)
 8003a1c:	488b      	ldr	r0, [pc, #556]	; (8003c4c <GrowTent_Mode+0x264>)
 8003a1e:	f007 f9c3 	bl	800ada8 <HAL_UART_Transmit>

	if(flags.dayNightFlag == DAY)
 8003a22:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <GrowTent_Mode+0x26c>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	f040 80ad 	bne.w	8003b8c <GrowTent_Mode+0x1a4>
	{
		Power_Control_SetRelay(MAIN_LIGHT_RELAY_PIN, RELAY_ON);
 8003a32:	2100      	movs	r1, #0
 8003a34:	2001      	movs	r0, #1
 8003a36:	f000 f95b 	bl	8003cf0 <Power_Control_SetRelay>

		/* Nominal operation mode */
		if(growTentMode == 0)
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d14b      	bne.n	8003ada <GrowTent_Mode+0xf2>
		{
			if(systemVariables.humidity_int < HUMIDITY_LOW)
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <GrowTent_Mode+0x270>)
 8003a44:	78db      	ldrb	r3, [r3, #3]
 8003a46:	2b3b      	cmp	r3, #59	; 0x3b
 8003a48:	d80b      	bhi.n	8003a62 <GrowTent_Mode+0x7a>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_OFF);
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	2002      	movs	r0, #2
 8003a4e:	f000 f94f 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
 8003a52:	2101      	movs	r1, #1
 8003a54:	2080      	movs	r0, #128	; 0x80
 8003a56:	f000 f94b 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 1;
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e03b      	b.n	8003ada <GrowTent_Mode+0xf2>
			}
			else if(systemVariables.humidity_int > HUMIDITY_HIGH)
 8003a62:	4b7d      	ldr	r3, [pc, #500]	; (8003c58 <GrowTent_Mode+0x270>)
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	2b46      	cmp	r3, #70	; 0x46
 8003a68:	d90b      	bls.n	8003a82 <GrowTent_Mode+0x9a>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f000 f93f 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_ON);
 8003a72:	2100      	movs	r1, #0
 8003a74:	2080      	movs	r0, #128	; 0x80
 8003a76:	f000 f93b 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 2;
 8003a7a:	4b72      	ldr	r3, [pc, #456]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e02b      	b.n	8003ada <GrowTent_Mode+0xf2>
			}
			else if(systemVariables.temperature_int > TEMPERATURE_HIGH)
 8003a82:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <GrowTent_Mode+0x270>)
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	2b1a      	cmp	r3, #26
 8003a88:	d90b      	bls.n	8003aa2 <GrowTent_Mode+0xba>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	2002      	movs	r0, #2
 8003a8e:	f000 f92f 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
 8003a92:	2101      	movs	r1, #1
 8003a94:	2080      	movs	r0, #128	; 0x80
 8003a96:	f000 f92b 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 3;
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e01b      	b.n	8003ada <GrowTent_Mode+0xf2>
			}
			else if(systemVariables.temperature_int < TEMPERATURE_LOW)
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <GrowTent_Mode+0x270>)
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	2b14      	cmp	r3, #20
 8003aa8:	d80b      	bhi.n	8003ac2 <GrowTent_Mode+0xda>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_OFF);
 8003aaa:	2101      	movs	r1, #1
 8003aac:	2002      	movs	r0, #2
 8003aae:	f000 f91f 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_ON);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	2080      	movs	r0, #128	; 0x80
 8003ab6:	f000 f91b 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 4;
 8003aba:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003abc:	2204      	movs	r2, #4
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e00b      	b.n	8003ada <GrowTent_Mode+0xf2>
			}
			else
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	f000 f913 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HUMIDITY_RELAY_PIN, RELAY_ON);
 8003aca:	2100      	movs	r1, #0
 8003acc:	2040      	movs	r0, #64	; 0x40
 8003ace:	f000 f90f 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_ON);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	2080      	movs	r0, #128	; 0x80
 8003ad6:	f000 f90b 	bl	8003cf0 <Power_Control_SetRelay>
			}
		}

		/* Humidity too low. The most likely scenario */
		if(growTentMode == 1)
 8003ada:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d11e      	bne.n	8003b20 <GrowTent_Mode+0x138>
		{
			if(systemVariables.temperature_int > TEMPERATURE_HIGH)
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <GrowTent_Mode+0x270>)
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	2b1a      	cmp	r3, #26
 8003ae8:	d90b      	bls.n	8003b02 <GrowTent_Mode+0x11a>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003aea:	2100      	movs	r1, #0
 8003aec:	2002      	movs	r0, #2
 8003aee:	f000 f8ff 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
 8003af2:	2101      	movs	r1, #1
 8003af4:	2080      	movs	r0, #128	; 0x80
 8003af6:	f000 f8fb 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 3;
 8003afa:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003afc:	2203      	movs	r2, #3
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e00e      	b.n	8003b20 <GrowTent_Mode+0x138>
			}
			else if(systemVariables.humidity_int > HUMIDITY_NOMINAL)
 8003b02:	4b55      	ldr	r3, [pc, #340]	; (8003c58 <GrowTent_Mode+0x270>)
 8003b04:	78db      	ldrb	r3, [r3, #3]
 8003b06:	2b41      	cmp	r3, #65	; 0x41
 8003b08:	d90a      	bls.n	8003b20 <GrowTent_Mode+0x138>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2002      	movs	r0, #2
 8003b0e:	f000 f8ef 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_ON);
 8003b12:	2100      	movs	r1, #0
 8003b14:	2080      	movs	r0, #128	; 0x80
 8003b16:	f000 f8eb 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 0;
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Humidity too high. */
		if(growTentMode == 2)
 8003b20:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d112      	bne.n	8003b4e <GrowTent_Mode+0x166>
		{
			if(systemVariables.humidity_int < HUMIDITY_NOMINAL)
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <GrowTent_Mode+0x270>)
 8003b2a:	78db      	ldrb	r3, [r3, #3]
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d80e      	bhi.n	8003b4e <GrowTent_Mode+0x166>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003b30:	2100      	movs	r1, #0
 8003b32:	2002      	movs	r0, #2
 8003b34:	f000 f8dc 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HUMIDITY_RELAY_PIN, RELAY_OFF);
 8003b38:	2101      	movs	r1, #1
 8003b3a:	2040      	movs	r0, #64	; 0x40
 8003b3c:	f000 f8d8 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_ON);
 8003b40:	2100      	movs	r1, #0
 8003b42:	2080      	movs	r0, #128	; 0x80
 8003b44:	f000 f8d4 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 0;
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Temperature too high. */
		if(growTentMode == 3)
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d10a      	bne.n	8003b6c <GrowTent_Mode+0x184>
		{
			if(systemVariables.temperature_int < TEMPERATURE_NOMINAL)
 8003b56:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <GrowTent_Mode+0x270>)
 8003b58:	785b      	ldrb	r3, [r3, #1]
 8003b5a:	2b17      	cmp	r3, #23
 8003b5c:	d806      	bhi.n	8003b6c <GrowTent_Mode+0x184>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_OFF);
 8003b5e:	2101      	movs	r1, #1
 8003b60:	2002      	movs	r0, #2
 8003b62:	f000 f8c5 	bl	8003cf0 <Power_Control_SetRelay>
				//Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
				growTentMode = 1;
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Temperature too low. */
		if(growTentMode == 4)
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d162      	bne.n	8003c3a <GrowTent_Mode+0x252>
		{
			if(systemVariables.temperature_int > TEMPERATURE_NOMINAL)
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <GrowTent_Mode+0x270>)
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	2b18      	cmp	r3, #24
 8003b7a:	d95e      	bls.n	8003c3a <GrowTent_Mode+0x252>
			{
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f000 f8b6 	bl	8003cf0 <Power_Control_SetRelay>
				//Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
				growTentMode = 0;
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
			Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
			Power_Control_SetRelay(MAIN_LIGHT_RELAY_PIN, RELAY_OFF);
			growTentMode = 0;
		}
	}
}
 8003b8a:	e056      	b.n	8003c3a <GrowTent_Mode+0x252>
	else if(flags.dayNightFlag == NIGHT)
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <GrowTent_Mode+0x26c>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d14f      	bne.n	8003c3a <GrowTent_Mode+0x252>
		if(growTentMode == 0)
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d128      	bne.n	8003bf4 <GrowTent_Mode+0x20c>
			if(systemVariables.humidity_int > HUMIDITY_HIGH)
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <GrowTent_Mode+0x270>)
 8003ba4:	78db      	ldrb	r3, [r3, #3]
 8003ba6:	2b46      	cmp	r3, #70	; 0x46
 8003ba8:	d913      	bls.n	8003bd2 <GrowTent_Mode+0x1ea>
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_ON);
 8003baa:	2100      	movs	r1, #0
 8003bac:	2002      	movs	r0, #2
 8003bae:	f000 f89f 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HUMIDITY_RELAY_PIN, RELAY_OFF);
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2040      	movs	r0, #64	; 0x40
 8003bb6:	f000 f89b 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
 8003bba:	2101      	movs	r1, #1
 8003bbc:	2080      	movs	r0, #128	; 0x80
 8003bbe:	f000 f897 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(MAIN_LIGHT_RELAY_PIN, RELAY_OFF);
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f000 f893 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 5;
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003bcc:	2205      	movs	r2, #5
 8003bce:	701a      	strb	r2, [r3, #0]
}
 8003bd0:	e033      	b.n	8003c3a <GrowTent_Mode+0x252>
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_OFF);
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f000 f88b 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HUMIDITY_RELAY_PIN, RELAY_OFF);
 8003bda:	2101      	movs	r1, #1
 8003bdc:	2040      	movs	r0, #64	; 0x40
 8003bde:	f000 f887 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
 8003be2:	2101      	movs	r1, #1
 8003be4:	2080      	movs	r0, #128	; 0x80
 8003be6:	f000 f883 	bl	8003cf0 <Power_Control_SetRelay>
				Power_Control_SetRelay(MAIN_LIGHT_RELAY_PIN, RELAY_OFF);
 8003bea:	2101      	movs	r1, #1
 8003bec:	2001      	movs	r0, #1
 8003bee:	f000 f87f 	bl	8003cf0 <Power_Control_SetRelay>
}
 8003bf2:	e022      	b.n	8003c3a <GrowTent_Mode+0x252>
		else if(growTentMode == 5)
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d10b      	bne.n	8003c14 <GrowTent_Mode+0x22c>
			if(systemVariables.humidity_int < HUMIDITY_NOMINAL)
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <GrowTent_Mode+0x270>)
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d81a      	bhi.n	8003c3a <GrowTent_Mode+0x252>
				Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_OFF);
 8003c04:	2101      	movs	r1, #1
 8003c06:	2002      	movs	r0, #2
 8003c08:	f000 f872 	bl	8003cf0 <Power_Control_SetRelay>
				growTentMode = 0;
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
}
 8003c12:	e012      	b.n	8003c3a <GrowTent_Mode+0x252>
			Power_Control_SetRelay(EXTRACTOR_FAN_RELAY_PIN, RELAY_OFF);
 8003c14:	2101      	movs	r1, #1
 8003c16:	2002      	movs	r0, #2
 8003c18:	f000 f86a 	bl	8003cf0 <Power_Control_SetRelay>
			Power_Control_SetRelay(HUMIDITY_RELAY_PIN, RELAY_OFF);
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	2040      	movs	r0, #64	; 0x40
 8003c20:	f000 f866 	bl	8003cf0 <Power_Control_SetRelay>
			Power_Control_SetRelay(HEATER_RELAY_PIN, RELAY_OFF);
 8003c24:	2101      	movs	r1, #1
 8003c26:	2080      	movs	r0, #128	; 0x80
 8003c28:	f000 f862 	bl	8003cf0 <Power_Control_SetRelay>
			Power_Control_SetRelay(MAIN_LIGHT_RELAY_PIN, RELAY_OFF);
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f000 f85e 	bl	8003cf0 <Power_Control_SetRelay>
			growTentMode = 0;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <GrowTent_Mode+0x25c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200004a3 	.word	0x200004a3
 8003c48:	0800c128 	.word	0x0800c128
 8003c4c:	20000d6c 	.word	0x20000d6c
 8003c50:	0800c130 	.word	0x0800c130
 8003c54:	20000ea0 	.word	0x20000ea0
 8003c58:	20000ea4 	.word	0x20000ea4

08003c5c <PowerControl_Init>:
extern GrowTent_FlagTypeDef flags;
extern GrowTent_SystemData	systemVariables;


void PowerControl_Init()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
	/* Set up GPIOs for relay control. Set all to off */

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = MAIN_LIGHT_RELAY_PIN;
 8003c70:	2301      	movs	r3, #1
 8003c72:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c74:	2301      	movs	r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RELAY_PORT, &GPIO_InitStruct);
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	4619      	mov	r1, r3
 8003c84:	4819      	ldr	r0, [pc, #100]	; (8003cec <PowerControl_Init+0x90>)
 8003c86:	f002 fa29 	bl	80060dc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EXTRACTOR_FAN_RELAY_PIN;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RELAY_PORT, &GPIO_InitStruct);
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4813      	ldr	r0, [pc, #76]	; (8003cec <PowerControl_Init+0x90>)
 8003ca0:	f002 fa1c 	bl	80060dc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = HUMIDITY_RELAY_PIN;
 8003ca4:	2340      	movs	r3, #64	; 0x40
 8003ca6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RELAY_PORT, &GPIO_InitStruct);
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480c      	ldr	r0, [pc, #48]	; (8003cec <PowerControl_Init+0x90>)
 8003cba:	f002 fa0f 	bl	80060dc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = HEATER_RELAY_PIN;
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RELAY_PORT, &GPIO_InitStruct);
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4806      	ldr	r0, [pc, #24]	; (8003cec <PowerControl_Init+0x90>)
 8003cd4:	f002 fa02 	bl	80060dc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RELAY_PORT, (MAIN_LIGHT_RELAY_PIN || EXTRACTOR_FAN_RELAY_PIN || HUMIDITY_RELAY_PIN || HEATER_RELAY_PIN), GPIO_PIN_SET);
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <PowerControl_Init+0x90>)
 8003cde:	f002 fb67 	bl	80063b0 <HAL_GPIO_WritePin>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	48000400 	.word	0x48000400

08003cf0 <Power_Control_SetRelay>:

void Power_Control_SetRelay(uint8_t relay, uint8_t state)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	71fb      	strb	r3, [r7, #7]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71bb      	strb	r3, [r7, #6]
	/* Turn specific relay on or off */
	HAL_GPIO_WritePin(RELAY_PORT, relay, state);
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	79ba      	ldrb	r2, [r7, #6]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4803      	ldr	r0, [pc, #12]	; (8003d18 <Power_Control_SetRelay+0x28>)
 8003d0a:	f002 fb51 	bl	80063b0 <HAL_GPIO_WritePin>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	48000400 	.word	0x48000400

08003d1c <RTC_Setup>:
  * @param None
  * @retval None
  */

void RTC_Setup(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
#ifdef setTime
	RTC_SetBackupTimeDate();
#endif

	/* Call RTC_Init function which will call low level msp setup. This will grant access to the Backup Domain */
	memset(&rtc1, 0, sizeof(rtc1));
 8003d20:	2224      	movs	r2, #36	; 0x24
 8003d22:	2100      	movs	r1, #0
 8003d24:	4813      	ldr	r0, [pc, #76]	; (8003d74 <RTC_Setup+0x58>)
 8003d26:	f007 fcf1 	bl	800b70c <memset>

	rtc1.Instance = RTC;
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <RTC_Setup+0x58>)
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <RTC_Setup+0x5c>)
 8003d2e:	601a      	str	r2, [r3, #0]
	rtc1.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <RTC_Setup+0x58>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	605a      	str	r2, [r3, #4]
	rtc1.Init.AsynchPrediv = 127;				/* Standard values for using LSE as input source */
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <RTC_Setup+0x58>)
 8003d38:	227f      	movs	r2, #127	; 0x7f
 8003d3a:	609a      	str	r2, [r3, #8]
	rtc1.Init.SynchPrediv = 255;				/* Standard values for using LSE as input source */
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <RTC_Setup+0x58>)
 8003d3e:	22ff      	movs	r2, #255	; 0xff
 8003d40:	60da      	str	r2, [r3, #12]
	rtc1.Init.OutPut = RTC_OUTPUT_ALARMA;
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <RTC_Setup+0x58>)
 8003d44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d48:	611a      	str	r2, [r3, #16]
	if(HAL_RTC_Init(&rtc1) != HAL_OK)
 8003d4a:	480a      	ldr	r0, [pc, #40]	; (8003d74 <RTC_Setup+0x58>)
 8003d4c:	f004 fc38 	bl	80085c0 <HAL_RTC_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <RTC_Setup+0x3e>
	{
		Error_Handler();
 8003d56:	f001 fd1d 	bl	8005794 <Error_Handler>
	}

	flags.rtcBackupValidFlag = 0;				/* Set RTC valid flag to 0 before first call */
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <RTC_Setup+0x60>)
 8003d5c:	7893      	ldrb	r3, [r2, #2]
 8003d5e:	f36f 0301 	bfc	r3, #0, #2
 8003d62:	7093      	strb	r3, [r2, #2]

	/* Set time and date from Backup RTC */
	RTC_GetBackupTimeDate();
 8003d64:	f000 f98e 	bl	8004084 <RTC_GetBackupTimeDate>
	RTC_SetDate();
 8003d68:	f000 f80a 	bl	8003d80 <RTC_SetDate>
	RTC_SetTime();
 8003d6c:	f000 f82c 	bl	8003dc8 <RTC_SetTime>
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200004a4 	.word	0x200004a4
 8003d78:	40002800 	.word	0x40002800
 8003d7c:	20000ea0 	.word	0x20000ea0

08003d80 <RTC_SetDate>:
  * @param None
  * @retval None
  */

static void RTC_SetDate()
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	rtcdateSet.WeekDay = RTCTimeDateNumbersBuffer[WEEKDAY];
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <RTC_SetDate+0x3c>)
 8003d86:	78da      	ldrb	r2, [r3, #3]
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <RTC_SetDate+0x40>)
 8003d8a:	701a      	strb	r2, [r3, #0]
	rtcdateSet.Date = RTCTimeDateNumbersBuffer[DATE];
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <RTC_SetDate+0x3c>)
 8003d8e:	791a      	ldrb	r2, [r3, #4]
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <RTC_SetDate+0x40>)
 8003d92:	709a      	strb	r2, [r3, #2]
	rtcdateSet.Month = RTCTimeDateNumbersBuffer[MONTH];
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <RTC_SetDate+0x3c>)
 8003d96:	795a      	ldrb	r2, [r3, #5]
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <RTC_SetDate+0x40>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	rtcdateSet.Year = RTCTimeDateNumbersBuffer[YEAR];
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <RTC_SetDate+0x3c>)
 8003d9e:	799a      	ldrb	r2, [r3, #6]
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <RTC_SetDate+0x40>)
 8003da2:	70da      	strb	r2, [r3, #3]
	if(HAL_RTC_SetDate(&rtc1, &rtcdateSet, RTC_FORMAT_BIN) != HAL_OK)
 8003da4:	2200      	movs	r2, #0
 8003da6:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <RTC_SetDate+0x40>)
 8003da8:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <RTC_SetDate+0x44>)
 8003daa:	f004 fd7d 	bl	80088a8 <HAL_RTC_SetDate>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <RTC_SetDate+0x38>
	{
		Error_Handler();
 8003db4:	f001 fcee 	bl	8005794 <Error_Handler>
	}
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20000524 	.word	0x20000524
 8003dc0:	200004c8 	.word	0x200004c8
 8003dc4:	200004a4 	.word	0x200004a4

08003dc8 <RTC_SetTime>:
  * @param None
  * @retval None
  */

static void RTC_SetTime()
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	rtctimeSet.Hours = RTCTimeDateNumbersBuffer[HOURS];
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <RTC_SetTime+0x34>)
 8003dce:	789a      	ldrb	r2, [r3, #2]
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <RTC_SetTime+0x38>)
 8003dd2:	701a      	strb	r2, [r3, #0]
	rtctimeSet.Minutes = RTCTimeDateNumbersBuffer[MINUTES];
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <RTC_SetTime+0x34>)
 8003dd6:	785a      	ldrb	r2, [r3, #1]
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <RTC_SetTime+0x38>)
 8003dda:	705a      	strb	r2, [r3, #1]
	rtctimeSet.Seconds = RTCTimeDateNumbersBuffer[SECONDS];
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <RTC_SetTime+0x34>)
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <RTC_SetTime+0x38>)
 8003de2:	709a      	strb	r2, [r3, #2]
	if(HAL_RTC_SetTime(&rtc1, &rtctimeSet, RTC_FORMAT_BIN) != HAL_OK)
 8003de4:	2200      	movs	r2, #0
 8003de6:	4906      	ldr	r1, [pc, #24]	; (8003e00 <RTC_SetTime+0x38>)
 8003de8:	4806      	ldr	r0, [pc, #24]	; (8003e04 <RTC_SetTime+0x3c>)
 8003dea:	f004 fc64 	bl	80086b6 <HAL_RTC_SetTime>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <RTC_SetTime+0x30>
	{
		Error_Handler();
 8003df4:	f001 fcce 	bl	8005794 <Error_Handler>
	}
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000524 	.word	0x20000524
 8003e00:	200004cc 	.word	0x200004cc
 8003e04:	200004a4 	.word	0x200004a4

08003e08 <RTC_GetTimeDate>:
  * @param None
  * @retval None
  */

void RTC_GetTimeDate()
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	if(HAL_RTC_GetTime(&rtc1, &rtctimeGet, RTC_FORMAT_BIN) != HAL_OK)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	492d      	ldr	r1, [pc, #180]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e10:	482d      	ldr	r0, [pc, #180]	; (8003ec8 <RTC_GetTimeDate+0xc0>)
 8003e12:	f004 fced 	bl	80087f0 <HAL_RTC_GetTime>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <RTC_GetTimeDate+0x18>
	{
		Error_Handler();
 8003e1c:	f001 fcba 	bl	8005794 <Error_Handler>
	}

	if (HAL_RTC_GetDate(&rtc1, &rtcdateGet, RTC_FORMAT_BIN) != HAL_OK)
 8003e20:	2200      	movs	r2, #0
 8003e22:	492a      	ldr	r1, [pc, #168]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e24:	4828      	ldr	r0, [pc, #160]	; (8003ec8 <RTC_GetTimeDate+0xc0>)
 8003e26:	f004 fdc6 	bl	80089b6 <HAL_RTC_GetDate>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <RTC_GetTimeDate+0x2c>
	{
		Error_Handler();
 8003e30:	f001 fcb0 	bl	8005794 <Error_Handler>
	}

	systemVariables.dateDate 	= rtcdateGet.Date;
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e36:	789a      	ldrb	r2, [r3, #2]
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e3a:	725a      	strb	r2, [r3, #9]
	systemVariables.dateMonth 	= rtcdateGet.Month;
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e3e:	785a      	ldrb	r2, [r3, #1]
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e42:	729a      	strb	r2, [r3, #10]
	systemVariables.dateYear 	= rtcdateGet.Year;
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e46:	78da      	ldrb	r2, [r3, #3]
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e4a:	72da      	strb	r2, [r3, #11]
	systemVariables.timeHours 	= rtctimeGet.Hours;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e52:	715a      	strb	r2, [r3, #5]
	systemVariables.timeMinutes = rtctimeGet.Minutes;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e56:	785a      	ldrb	r2, [r3, #1]
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e5a:	719a      	strb	r2, [r3, #6]
	systemVariables.timeSeconds = rtctimeGet.Seconds;
 8003e5c:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e5e:	789a      	ldrb	r2, [r3, #2]
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e62:	71da      	strb	r2, [r3, #7]

#ifdef debugPrintBackupTimeDate
	RTC_GetBackupTimeDate();
#else
	RTCTimeDateNumbersBuffer[SECONDS] = rtctimeGet.Seconds;
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e66:	789a      	ldrb	r2, [r3, #2]
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <RTC_GetTimeDate+0xcc>)
 8003e6a:	701a      	strb	r2, [r3, #0]
	RTCTimeDateNumbersBuffer[MINUTES] = rtctimeGet.Minutes;
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e6e:	785a      	ldrb	r2, [r3, #1]
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <RTC_GetTimeDate+0xcc>)
 8003e72:	705a      	strb	r2, [r3, #1]
	RTCTimeDateNumbersBuffer[HOURS] = rtctimeGet.Hours;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <RTC_GetTimeDate+0xbc>)
 8003e76:	781a      	ldrb	r2, [r3, #0]
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <RTC_GetTimeDate+0xcc>)
 8003e7a:	709a      	strb	r2, [r3, #2]
	RTCTimeDateNumbersBuffer[DATE] = rtcdateGet.Date;
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e7e:	789a      	ldrb	r2, [r3, #2]
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <RTC_GetTimeDate+0xcc>)
 8003e82:	711a      	strb	r2, [r3, #4]
	RTCTimeDateNumbersBuffer[MONTH] = rtcdateGet.Month;
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e86:	785a      	ldrb	r2, [r3, #1]
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <RTC_GetTimeDate+0xcc>)
 8003e8a:	715a      	strb	r2, [r3, #5]
	RTCTimeDateNumbersBuffer[YEAR] = rtcdateGet.Year;
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <RTC_GetTimeDate+0xc4>)
 8003e8e:	78da      	ldrb	r2, [r3, #3]
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <RTC_GetTimeDate+0xcc>)
 8003e92:	719a      	strb	r2, [r3, #6]
#endif

	if((systemVariables.timeHours >= DAY_CYCLE_BEGIN) && (systemVariables.timeHours <= DAY_CYCLE_END))
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e96:	795b      	ldrb	r3, [r3, #5]
 8003e98:	2b07      	cmp	r3, #7
 8003e9a:	d90a      	bls.n	8003eb2 <RTC_GetTimeDate+0xaa>
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <RTC_GetTimeDate+0xc8>)
 8003e9e:	795b      	ldrb	r3, [r3, #5]
 8003ea0:	2b17      	cmp	r3, #23
 8003ea2:	d806      	bhi.n	8003eb2 <RTC_GetTimeDate+0xaa>
	{
		flags.dayNightFlag = DAY;
 8003ea4:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <RTC_GetTimeDate+0xd0>)
 8003ea6:	7813      	ldrb	r3, [r2, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	f361 1387 	bfi	r3, r1, #6, #2
 8003eae:	7013      	strb	r3, [r2, #0]
 8003eb0:	e004      	b.n	8003ebc <RTC_GetTimeDate+0xb4>
	}
	else
	{
		flags.dayNightFlag = NIGHT;
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <RTC_GetTimeDate+0xd0>)
 8003eb4:	7813      	ldrb	r3, [r2, #0]
 8003eb6:	f36f 1387 	bfc	r3, #6, #2
 8003eba:	7013      	strb	r3, [r2, #0]
	}

#ifdef debug1

	RTC_PrintTimeDate();
 8003ebc:	f000 f858 	bl	8003f70 <RTC_PrintTimeDate>
#endif
}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200004e4 	.word	0x200004e4
 8003ec8:	200004a4 	.word	0x200004a4
 8003ecc:	200004e0 	.word	0x200004e0
 8003ed0:	20000ea4 	.word	0x20000ea4
 8003ed4:	20000524 	.word	0x20000524
 8003ed8:	20000ea0 	.word	0x20000ea0

08003edc <RTC_SetAlarm>:
  * @param None
  * @retval None
  */

void RTC_SetAlarm()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	if(flags.dayNightFlag == DAY)
 8003ee0:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <RTC_SetAlarm+0x88>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d118      	bne.n	8003f20 <RTC_SetAlarm+0x44>
	{
		/* Set up the alarm to go off at night time hours*/
		rtcalarmset.AlarmTime.Hours = ALARM_NIGHT_HOURS;
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
		rtcalarmset.AlarmTime.Minutes = ALARM_NIGHT_MINUTES;
 8003ef4:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	705a      	strb	r2, [r3, #1]
		rtcalarmset.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003efc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f00:	615a      	str	r2, [r3, #20]
		rtcalarmset.Alarm = RTC_ALARM_A;
 8003f02:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
		if(HAL_RTC_SetAlarm_IT(&rtc1, &rtcalarmset, RTC_FORMAT_BIN) != HAL_OK)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f0e:	4817      	ldr	r0, [pc, #92]	; (8003f6c <RTC_SetAlarm+0x90>)
 8003f10:	f004 fd9e 	bl	8008a50 <HAL_RTC_SetAlarm_IT>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d021      	beq.n	8003f5e <RTC_SetAlarm+0x82>
		{
			Error_Handler();
 8003f1a:	f001 fc3b 	bl	8005794 <Error_Handler>
		{
			Error_Handler();
		}
	}

}
 8003f1e:	e01e      	b.n	8003f5e <RTC_SetAlarm+0x82>
	else if (flags.dayNightFlag == NIGHT)
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <RTC_SetAlarm+0x88>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d117      	bne.n	8003f5e <RTC_SetAlarm+0x82>
		rtcalarmset.AlarmTime.Hours = ALARM_DAY_HOURS;
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f30:	2208      	movs	r2, #8
 8003f32:	701a      	strb	r2, [r3, #0]
		rtcalarmset.AlarmTime.Minutes = ALARM_DAY_MINUTES;
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	705a      	strb	r2, [r3, #1]
		rtcalarmset.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f40:	615a      	str	r2, [r3, #20]
		rtcalarmset.Alarm = RTC_ALARM_A;
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28
		if(HAL_RTC_SetAlarm_IT(&rtc1, &rtcalarmset, RTC_FORMAT_BIN) != HAL_OK)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4906      	ldr	r1, [pc, #24]	; (8003f68 <RTC_SetAlarm+0x8c>)
 8003f4e:	4807      	ldr	r0, [pc, #28]	; (8003f6c <RTC_SetAlarm+0x90>)
 8003f50:	f004 fd7e 	bl	8008a50 <HAL_RTC_SetAlarm_IT>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <RTC_SetAlarm+0x82>
			Error_Handler();
 8003f5a:	f001 fc1b 	bl	8005794 <Error_Handler>
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000ea0 	.word	0x20000ea0
 8003f68:	200004f8 	.word	0x200004f8
 8003f6c:	200004a4 	.word	0x200004a4

08003f70 <RTC_PrintTimeDate>:
  * @brief Print the date and time
  * @param None
  * @retval None
  */
static void RTC_PrintTimeDate()
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
	/* Convert to ASCI */
	char buff[3];

	/* Time then Date */
	HAL_UART_Transmit(&huart2,(uint8_t*)RTCTimeDateASCIIBuffer[TIME_ASCII], sizeof(RTCTimeDateASCIIBuffer[TIME_ASCII]), USART_TIMEOUT_VALUE);
 8003f76:	2364      	movs	r3, #100	; 0x64
 8003f78:	221e      	movs	r2, #30
 8003f7a:	493a      	ldr	r1, [pc, #232]	; (8004064 <RTC_PrintTimeDate+0xf4>)
 8003f7c:	483a      	ldr	r0, [pc, #232]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8003f7e:	f006 ff13 	bl	800ada8 <HAL_UART_Transmit>

	for(int8_t i = 2; i > -1; i--)
 8003f82:	2302      	movs	r3, #2
 8003f84:	71fb      	strb	r3, [r7, #7]
 8003f86:	e02b      	b.n	8003fe0 <RTC_PrintTimeDate+0x70>
	{
		if(RTCTimeDateNumbersBuffer[i] < 10)
 8003f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8c:	4a37      	ldr	r2, [pc, #220]	; (800406c <RTC_PrintTimeDate+0xfc>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d805      	bhi.n	8003fa0 <RTC_PrintTimeDate+0x30>
		{
			HAL_UART_Transmit(&huart2,(uint8_t*)"0", sizeof("0"), USART_TIMEOUT_VALUE);
 8003f94:	2364      	movs	r3, #100	; 0x64
 8003f96:	2202      	movs	r2, #2
 8003f98:	4935      	ldr	r1, [pc, #212]	; (8004070 <RTC_PrintTimeDate+0x100>)
 8003f9a:	4833      	ldr	r0, [pc, #204]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8003f9c:	f006 ff04 	bl	800ada8 <HAL_UART_Transmit>
		}

		itoa(RTCTimeDateNumbersBuffer[i], buff, 10);
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	4a31      	ldr	r2, [pc, #196]	; (800406c <RTC_PrintTimeDate+0xfc>)
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	463b      	mov	r3, r7
 8003fac:	220a      	movs	r2, #10
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f007 fbaa 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	2364      	movs	r3, #100	; 0x64
 8003fb8:	2203      	movs	r2, #3
 8003fba:	482b      	ldr	r0, [pc, #172]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8003fbc:	f006 fef4 	bl	800ada8 <HAL_UART_Transmit>

		if(i > 0)
 8003fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dd05      	ble.n	8003fd4 <RTC_PrintTimeDate+0x64>
		{
			HAL_UART_Transmit(&huart2,(uint8_t*)RTCTimeDateASCIIBuffer[SEMICOLON_ASCII], sizeof(RTCTimeDateASCIIBuffer[SEMICOLON_ASCII]), USART_TIMEOUT_VALUE);
 8003fc8:	2364      	movs	r3, #100	; 0x64
 8003fca:	221e      	movs	r2, #30
 8003fcc:	4929      	ldr	r1, [pc, #164]	; (8004074 <RTC_PrintTimeDate+0x104>)
 8003fce:	4826      	ldr	r0, [pc, #152]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8003fd0:	f006 feea 	bl	800ada8 <HAL_UART_Transmit>
	for(int8_t i = 2; i > -1; i--)
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	dacf      	bge.n	8003f88 <RTC_PrintTimeDate+0x18>

		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8003fe8:	2364      	movs	r3, #100	; 0x64
 8003fea:	2202      	movs	r2, #2
 8003fec:	4922      	ldr	r1, [pc, #136]	; (8004078 <RTC_PrintTimeDate+0x108>)
 8003fee:	481e      	ldr	r0, [pc, #120]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8003ff0:	f006 feda 	bl	800ada8 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2,(uint8_t*)RTCTimeDateASCIIBuffer[DATE_ASCII], sizeof(RTCTimeDateASCIIBuffer[DATE_ASCII]), USART_TIMEOUT_VALUE);
 8003ff4:	2364      	movs	r3, #100	; 0x64
 8003ff6:	221e      	movs	r2, #30
 8003ff8:	4920      	ldr	r1, [pc, #128]	; (800407c <RTC_PrintTimeDate+0x10c>)
 8003ffa:	481b      	ldr	r0, [pc, #108]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8003ffc:	f006 fed4 	bl	800ada8 <HAL_UART_Transmit>

	for(uint8_t i = 4; i < 7; i++)
 8004000:	2304      	movs	r3, #4
 8004002:	71bb      	strb	r3, [r7, #6]
 8004004:	e01a      	b.n	800403c <RTC_PrintTimeDate+0xcc>
	{
		itoa(RTCTimeDateNumbersBuffer[i], buff, 10);
 8004006:	79bb      	ldrb	r3, [r7, #6]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <RTC_PrintTimeDate+0xfc>)
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	4618      	mov	r0, r3
 800400e:	463b      	mov	r3, r7
 8004010:	220a      	movs	r2, #10
 8004012:	4619      	mov	r1, r3
 8004014:	f007 fb78 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004018:	4639      	mov	r1, r7
 800401a:	2364      	movs	r3, #100	; 0x64
 800401c:	2203      	movs	r2, #3
 800401e:	4812      	ldr	r0, [pc, #72]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8004020:	f006 fec2 	bl	800ada8 <HAL_UART_Transmit>

		if(i < 6)
 8004024:	79bb      	ldrb	r3, [r7, #6]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d805      	bhi.n	8004036 <RTC_PrintTimeDate+0xc6>
		{
			HAL_UART_Transmit(&huart2,(uint8_t*)RTCTimeDateASCIIBuffer[PERIOD_ASCII], sizeof(RTCTimeDateASCIIBuffer[PERIOD_ASCII]), USART_TIMEOUT_VALUE);
 800402a:	2364      	movs	r3, #100	; 0x64
 800402c:	221e      	movs	r2, #30
 800402e:	4914      	ldr	r1, [pc, #80]	; (8004080 <RTC_PrintTimeDate+0x110>)
 8004030:	480d      	ldr	r0, [pc, #52]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8004032:	f006 feb9 	bl	800ada8 <HAL_UART_Transmit>
	for(uint8_t i = 4; i < 7; i++)
 8004036:	79bb      	ldrb	r3, [r7, #6]
 8004038:	3301      	adds	r3, #1
 800403a:	71bb      	strb	r3, [r7, #6]
 800403c:	79bb      	ldrb	r3, [r7, #6]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d9e1      	bls.n	8004006 <RTC_PrintTimeDate+0x96>

		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004042:	2364      	movs	r3, #100	; 0x64
 8004044:	2202      	movs	r2, #2
 8004046:	490c      	ldr	r1, [pc, #48]	; (8004078 <RTC_PrintTimeDate+0x108>)
 8004048:	4807      	ldr	r0, [pc, #28]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 800404a:	f006 fead 	bl	800ada8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 800404e:	2364      	movs	r3, #100	; 0x64
 8004050:	2202      	movs	r2, #2
 8004052:	4909      	ldr	r1, [pc, #36]	; (8004078 <RTC_PrintTimeDate+0x108>)
 8004054:	4804      	ldr	r0, [pc, #16]	; (8004068 <RTC_PrintTimeDate+0xf8>)
 8004056:	f006 fea7 	bl	800ada8 <HAL_UART_Transmit>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000046 	.word	0x20000046
 8004068:	20000d6c 	.word	0x20000d6c
 800406c:	20000524 	.word	0x20000524
 8004070:	0800c134 	.word	0x0800c134
 8004074:	20000082 	.word	0x20000082
 8004078:	0800c138 	.word	0x0800c138
 800407c:	20000028 	.word	0x20000028
 8004080:	20000064 	.word	0x20000064

08004084 <RTC_GetBackupTimeDate>:
  * @param None
  * @retval None
  */

static void RTC_GetBackupTimeDate()
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af02      	add	r7, sp, #8
	/* Set the date at the RTC backup */

	HAL_I2C_IsDeviceReady(&i2c1, DS1307_I2C_ADDRESS,2, I2C_TIMEOUT_VALUE);
 800408a:	2364      	movs	r3, #100	; 0x64
 800408c:	2202      	movs	r2, #2
 800408e:	21d0      	movs	r1, #208	; 0xd0
 8004090:	4821      	ldr	r0, [pc, #132]	; (8004118 <RTC_GetBackupTimeDate+0x94>)
 8004092:	f002 fd4b 	bl	8006b2c <HAL_I2C_IsDeviceReady>

	if(i2c1.ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <RTC_GetBackupTimeDate+0x94>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	2b20      	cmp	r3, #32
 800409c:	d111      	bne.n	80040c2 <RTC_GetBackupTimeDate+0x3e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)RTCTimeDateASCIIBuffer[RTC_NOT_READY_ASCII], sizeof(RTCTimeDateASCIIBuffer[RTC_NOT_READY_ASCII]), USART_TIMEOUT_VALUE);
 800409e:	2364      	movs	r3, #100	; 0x64
 80040a0:	221e      	movs	r2, #30
 80040a2:	491e      	ldr	r1, [pc, #120]	; (800411c <RTC_GetBackupTimeDate+0x98>)
 80040a4:	481e      	ldr	r0, [pc, #120]	; (8004120 <RTC_GetBackupTimeDate+0x9c>)
 80040a6:	f006 fe7f 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);\
 80040aa:	2364      	movs	r3, #100	; 0x64
 80040ac:	2202      	movs	r2, #2
 80040ae:	491d      	ldr	r1, [pc, #116]	; (8004124 <RTC_GetBackupTimeDate+0xa0>)
 80040b0:	481b      	ldr	r0, [pc, #108]	; (8004120 <RTC_GetBackupTimeDate+0x9c>)
 80040b2:	f006 fe79 	bl	800ada8 <HAL_UART_Transmit>

		flags.rtcBackupValidFlag = 1;
 80040b6:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <RTC_GetBackupTimeDate+0xa4>)
 80040b8:	7893      	ldrb	r3, [r2, #2]
 80040ba:	2101      	movs	r1, #1
 80040bc:	f361 0301 	bfi	r3, r1, #0, #2
 80040c0:	7093      	strb	r3, [r2, #2]
	}

	HAL_I2C_Master_Transmit(&i2c1, DS1307_I2C_ADDRESS, DS1307_SEC_ADDRESS, sizeof(DS1307_SEC_ADDRESS), I2C_TIMEOUT_VALUE);
 80040c2:	2364      	movs	r3, #100	; 0x64
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2301      	movs	r3, #1
 80040c8:	2200      	movs	r2, #0
 80040ca:	21d0      	movs	r1, #208	; 0xd0
 80040cc:	4812      	ldr	r0, [pc, #72]	; (8004118 <RTC_GetBackupTimeDate+0x94>)
 80040ce:	f002 fa2f 	bl	8006530 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c1, DS1307_I2C_ADDRESS, rawRTCBackupValues, sizeof(rawRTCBackupValues), I2C_TIMEOUT_VALUE);
 80040d2:	2364      	movs	r3, #100	; 0x64
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2307      	movs	r3, #7
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <RTC_GetBackupTimeDate+0xa8>)
 80040da:	21d0      	movs	r1, #208	; 0xd0
 80040dc:	480e      	ldr	r0, [pc, #56]	; (8004118 <RTC_GetBackupTimeDate+0x94>)
 80040de:	f002 fb1b 	bl	8006718 <HAL_I2C_Master_Receive>

	if(rawRTCBackupValues[WEEKDAY] == 0)
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <RTC_GetBackupTimeDate+0xa8>)
 80040e4:	78db      	ldrb	r3, [r3, #3]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d111      	bne.n	800410e <RTC_GetBackupTimeDate+0x8a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)RTCTimeDateASCIIBuffer[RTC_NOT_READY_ASCII], sizeof(RTCTimeDateASCIIBuffer[RTC_NOT_READY_ASCII]), USART_TIMEOUT_VALUE);
 80040ea:	2364      	movs	r3, #100	; 0x64
 80040ec:	221e      	movs	r2, #30
 80040ee:	490b      	ldr	r1, [pc, #44]	; (800411c <RTC_GetBackupTimeDate+0x98>)
 80040f0:	480b      	ldr	r0, [pc, #44]	; (8004120 <RTC_GetBackupTimeDate+0x9c>)
 80040f2:	f006 fe59 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 80040f6:	2364      	movs	r3, #100	; 0x64
 80040f8:	2202      	movs	r2, #2
 80040fa:	490a      	ldr	r1, [pc, #40]	; (8004124 <RTC_GetBackupTimeDate+0xa0>)
 80040fc:	4808      	ldr	r0, [pc, #32]	; (8004120 <RTC_GetBackupTimeDate+0x9c>)
 80040fe:	f006 fe53 	bl	800ada8 <HAL_UART_Transmit>

		flags.rtcBackupValidFlag = 2;
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <RTC_GetBackupTimeDate+0xa4>)
 8004104:	7893      	ldrb	r3, [r2, #2]
 8004106:	2102      	movs	r1, #2
 8004108:	f361 0301 	bfi	r3, r1, #0, #2
 800410c:	7093      	strb	r3, [r2, #2]
	}

	RTC_ConvertToInteger();
 800410e:	f000 f80f 	bl	8004130 <RTC_ConvertToInteger>
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000df0 	.word	0x20000df0
 800411c:	200000dc 	.word	0x200000dc
 8004120:	20000d6c 	.word	0x20000d6c
 8004124:	0800c138 	.word	0x0800c138
 8004128:	20000ea0 	.word	0x20000ea0
 800412c:	2000052c 	.word	0x2000052c

08004130 <RTC_ConvertToInteger>:
  * @param None
  * @retval None
  */

static void RTC_ConvertToInteger()
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
	/* Seconds */
	RTCTimeDateNumbersBuffer[SECONDS] = ((rawRTCBackupValues[0] >> 4) * 10) + (rawRTCBackupValues[0] & 0x0F);
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4413      	add	r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4413      	add	r3, r2
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b34      	ldr	r3, [pc, #208]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 8004156:	701a      	strb	r2, [r3, #0]

	/* Minutes */
	RTCTimeDateNumbersBuffer[MINUTES] = ((rawRTCBackupValues[1] >> 4) * 10) + (rawRTCBackupValues[1] & 0x0F);
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	0092      	lsls	r2, r2, #2
 8004164:	4413      	add	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4413      	add	r3, r2
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 800417a:	705a      	strb	r2, [r3, #1]

	/* Hours */
	RTCTimeDateNumbersBuffer[HOURS] = (((rawRTCBackupValues[2] >> 4) & 0x03) * 10) + (rawRTCBackupValues[2] & 0x0F);
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 800417e:	789b      	ldrb	r3, [r3, #2]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	0092      	lsls	r2, r2, #2
 800418e:	4413      	add	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	4b23      	ldr	r3, [pc, #140]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 8004196:	789b      	ldrb	r3, [r3, #2]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	b2db      	uxtb	r3, r3
 800419e:	4413      	add	r3, r2
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 80041a4:	709a      	strb	r2, [r3, #2]

	/* Day */
	RTCTimeDateNumbersBuffer[WEEKDAY] = rawRTCBackupValues[3];
 80041a6:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 80041a8:	78da      	ldrb	r2, [r3, #3]
 80041aa:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 80041ac:	70da      	strb	r2, [r3, #3]

	/* Date */
	RTCTimeDateNumbersBuffer[DATE] = ((rawRTCBackupValues[4] >> 4) * 10) + (rawRTCBackupValues[4] & 0x0F);
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 80041d0:	711a      	strb	r2, [r3, #4]

	/* Month */
	RTCTimeDateNumbersBuffer[MONTH] = ((rawRTCBackupValues[5]  >> 4) * 10) + (rawRTCBackupValues[5] & 0x0F);
 80041d2:	4b14      	ldr	r3, [pc, #80]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 80041d4:	795b      	ldrb	r3, [r3, #5]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	4413      	add	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 80041e6:	795b      	ldrb	r3, [r3, #5]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 80041f4:	715a      	strb	r2, [r3, #5]

	/* Year */
	RTCTimeDateNumbersBuffer[YEAR] = ((rawRTCBackupValues[6] >> 4) * 10) + (rawRTCBackupValues[6] & 0x0F);
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 80041f8:	799b      	ldrb	r3, [r3, #6]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	0092      	lsls	r2, r2, #2
 8004202:	4413      	add	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <RTC_ConvertToInteger+0xf4>)
 800420a:	799b      	ldrb	r3, [r3, #6]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	b2db      	uxtb	r3, r3
 8004212:	4413      	add	r3, r2
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <RTC_ConvertToInteger+0xf8>)
 8004218:	719a      	strb	r2, [r3, #6]
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	2000052c 	.word	0x2000052c
 8004228:	20000524 	.word	0x20000524

0800422c <HAL_RTC_AlarmAEventCallback>:
  * @param None
  * @retval None
  */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	/* Alarm has occurred. Get time and check what mode we should be in */
	RTC_GetTimeDate();
 8004234:	f7ff fde8 	bl	8003e08 <RTC_GetTimeDate>

	if(systemVariables.timeHours == ALARM_DAY_HOURS)
 8004238:	4b13      	ldr	r3, [pc, #76]	; (8004288 <HAL_RTC_AlarmAEventCallback+0x5c>)
 800423a:	795b      	ldrb	r3, [r3, #5]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d108      	bne.n	8004252 <HAL_RTC_AlarmAEventCallback+0x26>
	{
		flags.dayNightFlag = DAY;
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_RTC_AlarmAEventCallback+0x60>)
 8004242:	7813      	ldrb	r3, [r2, #0]
 8004244:	2101      	movs	r1, #1
 8004246:	f361 1387 	bfi	r3, r1, #6, #2
 800424a:	7013      	strb	r3, [r2, #0]
		RTC_SetAlarm();
 800424c:	f7ff fe46 	bl	8003edc <RTC_SetAlarm>
 8004250:	e00a      	b.n	8004268 <HAL_RTC_AlarmAEventCallback+0x3c>
	}
	else if (systemVariables.timeHours == ALARM_NIGHT_HOURS)
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RTC_AlarmAEventCallback+0x5c>)
 8004254:	795b      	ldrb	r3, [r3, #5]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_RTC_AlarmAEventCallback+0x3c>
	{
		flags.dayNightFlag = NIGHT;
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <HAL_RTC_AlarmAEventCallback+0x60>)
 800425c:	7813      	ldrb	r3, [r2, #0]
 800425e:	f36f 1387 	bfc	r3, #6, #2
 8004262:	7013      	strb	r3, [r2, #0]
		RTC_SetAlarm();
 8004264:	f7ff fe3a 	bl	8003edc <RTC_SetAlarm>
	}

#ifdef debug
	HAL_UART_Transmit(&huart2,(uint8_t*)RTCTimeDateASCIIBuffer[ALARM_ASCII], sizeof(RTCTimeDateASCIIBuffer[ALARM_ASCII]), USART_TIMEOUT_VALUE);
 8004268:	2364      	movs	r3, #100	; 0x64
 800426a:	221e      	movs	r2, #30
 800426c:	4908      	ldr	r1, [pc, #32]	; (8004290 <HAL_RTC_AlarmAEventCallback+0x64>)
 800426e:	4809      	ldr	r0, [pc, #36]	; (8004294 <HAL_RTC_AlarmAEventCallback+0x68>)
 8004270:	f006 fd9a 	bl	800ada8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004274:	2364      	movs	r3, #100	; 0x64
 8004276:	2202      	movs	r2, #2
 8004278:	4907      	ldr	r1, [pc, #28]	; (8004298 <HAL_RTC_AlarmAEventCallback+0x6c>)
 800427a:	4806      	ldr	r0, [pc, #24]	; (8004294 <HAL_RTC_AlarmAEventCallback+0x68>)
 800427c:	f006 fd94 	bl	800ada8 <HAL_UART_Transmit>
#endif
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000ea4 	.word	0x20000ea4
 800428c:	20000ea0 	.word	0x20000ea0
 8004290:	200000be 	.word	0x200000be
 8004294:	20000d6c 	.word	0x20000d6c
 8004298:	0800c138 	.word	0x0800c138

0800429c <myprintf>:

static void myprintf(const char *fmt, ...);


static void myprintf(const char *fmt, ...)
{
 800429c:	b40f      	push	{r0, r1, r2, r3}
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042b2:	480b      	ldr	r0, [pc, #44]	; (80042e0 <myprintf+0x44>)
 80042b4:	f007 fab0 	bl	800b818 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80042b8:	4809      	ldr	r0, [pc, #36]	; (80042e0 <myprintf+0x44>)
 80042ba:	f7fb ff89 	bl	80001d0 <strlen>
 80042be:	4603      	mov	r3, r0
 80042c0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	4905      	ldr	r1, [pc, #20]	; (80042e0 <myprintf+0x44>)
 80042cc:	4805      	ldr	r0, [pc, #20]	; (80042e4 <myprintf+0x48>)
 80042ce:	f006 fd6b 	bl	800ada8 <HAL_UART_Transmit>

}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042dc:	b004      	add	sp, #16
 80042de:	4770      	bx	lr
 80042e0:	20000998 	.word	0x20000998
 80042e4:	20000d6c 	.word	0x20000d6c

080042e8 <SD_Control_Init>:

void SD_Control_Init(void)
{
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b09a      	sub	sp, #104	; 0x68
 80042ec:	af00      	add	r7, sp, #0
	myprintf("\r\n~ SD card initialisation ~\r\n\r\n");
 80042ee:	4862      	ldr	r0, [pc, #392]	; (8004478 <SD_Control_Init+0x190>)
 80042f0:	f7ff ffd4 	bl	800429c <myprintf>

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80042f4:	2201      	movs	r2, #1
 80042f6:	4961      	ldr	r1, [pc, #388]	; (800447c <SD_Control_Init+0x194>)
 80042f8:	4861      	ldr	r0, [pc, #388]	; (8004480 <SD_Control_Init+0x198>)
 80042fa:	f7fe fbcb 	bl	8002a94 <f_mount>
 80042fe:	4603      	mov	r3, r0
 8004300:	461a      	mov	r2, r3
 8004302:	4b60      	ldr	r3, [pc, #384]	; (8004484 <SD_Control_Init+0x19c>)
 8004304:	701a      	strb	r2, [r3, #0]

	if (fres != FR_OK)
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <SD_Control_Init+0x19c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <SD_Control_Init+0x32>
	{
		myprintf("f_mount error (%i)\r\n", fres);
 800430e:	4b5d      	ldr	r3, [pc, #372]	; (8004484 <SD_Control_Init+0x19c>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	485c      	ldr	r0, [pc, #368]	; (8004488 <SD_Control_Init+0x1a0>)
 8004316:	f7ff ffc1 	bl	800429c <myprintf>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800431a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800431e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004322:	4619      	mov	r1, r3
 8004324:	4855      	ldr	r0, [pc, #340]	; (800447c <SD_Control_Init+0x194>)
 8004326:	f7fe ffd6 	bl	80032d6 <f_getfree>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	4b55      	ldr	r3, [pc, #340]	; (8004484 <SD_Control_Init+0x19c>)
 8004330:	701a      	strb	r2, [r3, #0]

	if (fres != FR_OK)
 8004332:	4b54      	ldr	r3, [pc, #336]	; (8004484 <SD_Control_Init+0x19c>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <SD_Control_Init+0x60>
	{
		myprintf("f_getfree error (%i)\r\n", fres);
 800433a:	4b52      	ldr	r3, [pc, #328]	; (8004484 <SD_Control_Init+0x19c>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	4619      	mov	r1, r3
 8004340:	4852      	ldr	r0, [pc, #328]	; (800448c <SD_Control_Init+0x1a4>)
 8004342:	f7ff ffab 	bl	800429c <myprintf>
		f_close(&fil);

		//We're done, so de-mount the drive
		//f_mount(NULL, "", 0);
	}
}
 8004346:	e092      	b.n	800446e <SD_Control_Init+0x186>
		total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8004348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	3b02      	subs	r3, #2
 800434e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004350:	8952      	ldrh	r2, [r2, #10]
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
		free_sectors = free_clusters * getFreeFs->csize;
 8004358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435a:	895b      	ldrh	r3, [r3, #10]
 800435c:	461a      	mov	r2, r3
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
		myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8004366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004368:	0859      	lsrs	r1, r3, #1
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	461a      	mov	r2, r3
 8004370:	4847      	ldr	r0, [pc, #284]	; (8004490 <SD_Control_Init+0x1a8>)
 8004372:	f7ff ff93 	bl	800429c <myprintf>
		char fullFileName[30] = {"Log_"};
 8004376:	4a47      	ldr	r2, [pc, #284]	; (8004494 <SD_Control_Init+0x1ac>)
 8004378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800437c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004380:	6018      	str	r0, [r3, #0]
 8004382:	3304      	adds	r3, #4
 8004384:	7019      	strb	r1, [r3, #0]
 8004386:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	615a      	str	r2, [r3, #20]
 8004398:	761a      	strb	r2, [r3, #24]
		itoa(systemVariables.dateDate, dateFile, 10);
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <SD_Control_Init+0x1b0>)
 800439c:	7a5b      	ldrb	r3, [r3, #9]
 800439e:	4618      	mov	r0, r3
 80043a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043a4:	220a      	movs	r2, #10
 80043a6:	4619      	mov	r1, r3
 80043a8:	f007 f9ae 	bl	800b708 <itoa>
		itoa(systemVariables.dateMonth, monthFile, 10);
 80043ac:	4b3a      	ldr	r3, [pc, #232]	; (8004498 <SD_Control_Init+0x1b0>)
 80043ae:	7a9b      	ldrb	r3, [r3, #10]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043b6:	220a      	movs	r2, #10
 80043b8:	4619      	mov	r1, r3
 80043ba:	f007 f9a5 	bl	800b708 <itoa>
		strcat(fullFileName, dateFile);
 80043be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80043c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f007 f9a7 	bl	800b71c <strcat>
		strcat(fullFileName, monthFile);
 80043ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80043d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f007 f99f 	bl	800b71c <strcat>
		fres = f_open(&fil, fullFileName, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80043de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043e2:	221a      	movs	r2, #26
 80043e4:	4619      	mov	r1, r3
 80043e6:	482d      	ldr	r0, [pc, #180]	; (800449c <SD_Control_Init+0x1b4>)
 80043e8:	f7fe fb9a 	bl	8002b20 <f_open>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <SD_Control_Init+0x19c>)
 80043f2:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK)
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <SD_Control_Init+0x19c>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <SD_Control_Init+0x122>
			myprintf("I was able to open %s for writing\r\n", fullFileName);
 80043fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004400:	4619      	mov	r1, r3
 8004402:	4827      	ldr	r0, [pc, #156]	; (80044a0 <SD_Control_Init+0x1b8>)
 8004404:	f7ff ff4a 	bl	800429c <myprintf>
 8004408:	e005      	b.n	8004416 <SD_Control_Init+0x12e>
			myprintf("f_open error (%i)\r\n", fres);
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <SD_Control_Init+0x19c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4824      	ldr	r0, [pc, #144]	; (80044a4 <SD_Control_Init+0x1bc>)
 8004412:	f7ff ff43 	bl	800429c <myprintf>
		char buff[] = {"Time, \tDate, \tTemperature, \tHumidity"};
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <SD_Control_Init+0x1c0>)
 8004418:	1d3c      	adds	r4, r7, #4
 800441a:	461d      	mov	r5, r3
 800441c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800441e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004424:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004428:	6020      	str	r0, [r4, #0]
 800442a:	3404      	adds	r4, #4
 800442c:	7021      	strb	r1, [r4, #0]
		fres = f_write(&fil, buff, sizeof(buff), &bytesWrote);
 800442e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004432:	1d39      	adds	r1, r7, #4
 8004434:	2225      	movs	r2, #37	; 0x25
 8004436:	4819      	ldr	r0, [pc, #100]	; (800449c <SD_Control_Init+0x1b4>)
 8004438:	f7fe fd30 	bl	8002e9c <f_write>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <SD_Control_Init+0x19c>)
 8004442:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK)
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <SD_Control_Init+0x19c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <SD_Control_Init+0x174>
			myprintf("Wrote %i bytes to %s!\r\n", bytesWrote, fullFileName);
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004452:	4619      	mov	r1, r3
 8004454:	4815      	ldr	r0, [pc, #84]	; (80044ac <SD_Control_Init+0x1c4>)
 8004456:	f7ff ff21 	bl	800429c <myprintf>
 800445a:	e005      	b.n	8004468 <SD_Control_Init+0x180>
			myprintf("f_write error (%i)\r\n", fres);
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <SD_Control_Init+0x19c>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	4813      	ldr	r0, [pc, #76]	; (80044b0 <SD_Control_Init+0x1c8>)
 8004464:	f7ff ff1a 	bl	800429c <myprintf>
		f_close(&fil);
 8004468:	480c      	ldr	r0, [pc, #48]	; (800449c <SD_Control_Init+0x1b4>)
 800446a:	f7fe ff0a 	bl	8003282 <f_close>
}
 800446e:	bf00      	nop
 8004470:	3768      	adds	r7, #104	; 0x68
 8004472:	46bd      	mov	sp, r7
 8004474:	bdb0      	pop	{r4, r5, r7, pc}
 8004476:	bf00      	nop
 8004478:	0800c13c 	.word	0x0800c13c
 800447c:	0800c160 	.word	0x0800c160
 8004480:	20000534 	.word	0x20000534
 8004484:	20000994 	.word	0x20000994
 8004488:	0800c164 	.word	0x0800c164
 800448c:	0800c17c 	.word	0x0800c17c
 8004490:	0800c194 	.word	0x0800c194
 8004494:	0800c244 	.word	0x0800c244
 8004498:	20000ea4 	.word	0x20000ea4
 800449c:	20000764 	.word	0x20000764
 80044a0:	0800c1dc 	.word	0x0800c1dc
 80044a4:	0800c200 	.word	0x0800c200
 80044a8:	0800c264 	.word	0x0800c264
 80044ac:	0800c214 	.word	0x0800c214
 80044b0:	0800c22c 	.word	0x0800c22c

080044b4 <SD_Control_Write>:

void SD_Control_Write(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
	/* Write all variables to file */

	fres = f_open(&fil, "Log.txt", FA_WRITE | FA_OPEN_APPEND);
 80044ba:	2232      	movs	r2, #50	; 0x32
 80044bc:	497e      	ldr	r1, [pc, #504]	; (80046b8 <SD_Control_Write+0x204>)
 80044be:	487f      	ldr	r0, [pc, #508]	; (80046bc <SD_Control_Write+0x208>)
 80044c0:	f7fe fb2e 	bl	8002b20 <f_open>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b7d      	ldr	r3, [pc, #500]	; (80046c0 <SD_Control_Write+0x20c>)
 80044ca:	701a      	strb	r2, [r3, #0]

	char buff[3];
	unsigned char characterASCII[] = {':','.',',','\n','\r','\t'};
 80044cc:	4a7d      	ldr	r2, [pc, #500]	; (80046c4 <SD_Control_Write+0x210>)
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044d4:	6018      	str	r0, [r3, #0]
 80044d6:	3304      	adds	r3, #4
 80044d8:	8019      	strh	r1, [r3, #0]


	fres = f_putc(characterASCII[3], &fil);
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	4977      	ldr	r1, [pc, #476]	; (80046bc <SD_Control_Write+0x208>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff f824 	bl	800352c <f_putc>
 80044e4:	4603      	mov	r3, r0
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <SD_Control_Write+0x20c>)
 80044ea:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.timeHours, buff, 10);
 80044ec:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <SD_Control_Write+0x214>)
 80044ee:	795b      	ldrb	r3, [r3, #5]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	220a      	movs	r2, #10
 80044f8:	4619      	mov	r1, r3
 80044fa:	f007 f905 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	496e      	ldr	r1, [pc, #440]	; (80046bc <SD_Control_Write+0x208>)
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f82e 	bl	8003566 <f_puts>
 800450a:	4603      	mov	r3, r0
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <SD_Control_Write+0x20c>)
 8004510:	701a      	strb	r2, [r3, #0]

	fres = f_putc(characterASCII[0], &fil);
 8004512:	793b      	ldrb	r3, [r7, #4]
 8004514:	4969      	ldr	r1, [pc, #420]	; (80046bc <SD_Control_Write+0x208>)
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f808 	bl	800352c <f_putc>
 800451c:	4603      	mov	r3, r0
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b67      	ldr	r3, [pc, #412]	; (80046c0 <SD_Control_Write+0x20c>)
 8004522:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.timeMinutes, buff, 10);
 8004524:	4b68      	ldr	r3, [pc, #416]	; (80046c8 <SD_Control_Write+0x214>)
 8004526:	799b      	ldrb	r3, [r3, #6]
 8004528:	4618      	mov	r0, r3
 800452a:	f107 030c 	add.w	r3, r7, #12
 800452e:	220a      	movs	r2, #10
 8004530:	4619      	mov	r1, r3
 8004532:	f007 f8e9 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 8004536:	f107 030c 	add.w	r3, r7, #12
 800453a:	4960      	ldr	r1, [pc, #384]	; (80046bc <SD_Control_Write+0x208>)
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f812 	bl	8003566 <f_puts>
 8004542:	4603      	mov	r3, r0
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4b5e      	ldr	r3, [pc, #376]	; (80046c0 <SD_Control_Write+0x20c>)
 8004548:	701a      	strb	r2, [r3, #0]

	/* Comma */
	fres = f_putc(characterASCII[2], &fil);
 800454a:	79bb      	ldrb	r3, [r7, #6]
 800454c:	495b      	ldr	r1, [pc, #364]	; (80046bc <SD_Control_Write+0x208>)
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe ffec 	bl	800352c <f_putc>
 8004554:	4603      	mov	r3, r0
 8004556:	b2da      	uxtb	r2, r3
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <SD_Control_Write+0x20c>)
 800455a:	701a      	strb	r2, [r3, #0]
	fres = f_putc(characterASCII[5], &fil);
 800455c:	7a7b      	ldrb	r3, [r7, #9]
 800455e:	4957      	ldr	r1, [pc, #348]	; (80046bc <SD_Control_Write+0x208>)
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe ffe3 	bl	800352c <f_putc>
 8004566:	4603      	mov	r3, r0
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <SD_Control_Write+0x20c>)
 800456c:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.dateDate, buff, 10);
 800456e:	4b56      	ldr	r3, [pc, #344]	; (80046c8 <SD_Control_Write+0x214>)
 8004570:	7a5b      	ldrb	r3, [r3, #9]
 8004572:	4618      	mov	r0, r3
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	220a      	movs	r2, #10
 800457a:	4619      	mov	r1, r3
 800457c:	f007 f8c4 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	494d      	ldr	r1, [pc, #308]	; (80046bc <SD_Control_Write+0x208>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe ffed 	bl	8003566 <f_puts>
 800458c:	4603      	mov	r3, r0
 800458e:	b2da      	uxtb	r2, r3
 8004590:	4b4b      	ldr	r3, [pc, #300]	; (80046c0 <SD_Control_Write+0x20c>)
 8004592:	701a      	strb	r2, [r3, #0]

	fres = f_putc(characterASCII[1], &fil);
 8004594:	797b      	ldrb	r3, [r7, #5]
 8004596:	4949      	ldr	r1, [pc, #292]	; (80046bc <SD_Control_Write+0x208>)
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe ffc7 	bl	800352c <f_putc>
 800459e:	4603      	mov	r3, r0
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <SD_Control_Write+0x20c>)
 80045a4:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.dateMonth, buff, 10);
 80045a6:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <SD_Control_Write+0x214>)
 80045a8:	7a9b      	ldrb	r3, [r3, #10]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	220a      	movs	r2, #10
 80045b2:	4619      	mov	r1, r3
 80045b4:	f007 f8a8 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	493f      	ldr	r1, [pc, #252]	; (80046bc <SD_Control_Write+0x208>)
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe ffd1 	bl	8003566 <f_puts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <SD_Control_Write+0x20c>)
 80045ca:	701a      	strb	r2, [r3, #0]

	fres = f_putc(characterASCII[1], &fil);
 80045cc:	797b      	ldrb	r3, [r7, #5]
 80045ce:	493b      	ldr	r1, [pc, #236]	; (80046bc <SD_Control_Write+0x208>)
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe ffab 	bl	800352c <f_putc>
 80045d6:	4603      	mov	r3, r0
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <SD_Control_Write+0x20c>)
 80045dc:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.dateYear, buff, 10);
 80045de:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <SD_Control_Write+0x214>)
 80045e0:	7adb      	ldrb	r3, [r3, #11]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	220a      	movs	r2, #10
 80045ea:	4619      	mov	r1, r3
 80045ec:	f007 f88c 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4931      	ldr	r1, [pc, #196]	; (80046bc <SD_Control_Write+0x208>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe ffb5 	bl	8003566 <f_puts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <SD_Control_Write+0x20c>)
 8004602:	701a      	strb	r2, [r3, #0]

	/* Comma */
	fres = f_putc(characterASCII[2], &fil);
 8004604:	79bb      	ldrb	r3, [r7, #6]
 8004606:	492d      	ldr	r1, [pc, #180]	; (80046bc <SD_Control_Write+0x208>)
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe ff8f 	bl	800352c <f_putc>
 800460e:	4603      	mov	r3, r0
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <SD_Control_Write+0x20c>)
 8004614:	701a      	strb	r2, [r3, #0]
	fres = f_putc(characterASCII[5], &fil);
 8004616:	7a7b      	ldrb	r3, [r7, #9]
 8004618:	4928      	ldr	r1, [pc, #160]	; (80046bc <SD_Control_Write+0x208>)
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe ff86 	bl	800352c <f_putc>
 8004620:	4603      	mov	r3, r0
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <SD_Control_Write+0x20c>)
 8004626:	701a      	strb	r2, [r3, #0]
	fres = f_putc(characterASCII[5], &fil);
 8004628:	7a7b      	ldrb	r3, [r7, #9]
 800462a:	4924      	ldr	r1, [pc, #144]	; (80046bc <SD_Control_Write+0x208>)
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe ff7d 	bl	800352c <f_putc>
 8004632:	4603      	mov	r3, r0
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <SD_Control_Write+0x20c>)
 8004638:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.temperature_int, buff, 10);
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <SD_Control_Write+0x214>)
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	4618      	mov	r0, r3
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	220a      	movs	r2, #10
 8004646:	4619      	mov	r1, r3
 8004648:	f007 f85e 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 800464c:	f107 030c 	add.w	r3, r7, #12
 8004650:	491a      	ldr	r1, [pc, #104]	; (80046bc <SD_Control_Write+0x208>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe ff87 	bl	8003566 <f_puts>
 8004658:	4603      	mov	r3, r0
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <SD_Control_Write+0x20c>)
 800465e:	701a      	strb	r2, [r3, #0]

	/* Comma */
	fres = f_putc(characterASCII[2], &fil);
 8004660:	79bb      	ldrb	r3, [r7, #6]
 8004662:	4916      	ldr	r1, [pc, #88]	; (80046bc <SD_Control_Write+0x208>)
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe ff61 	bl	800352c <f_putc>
 800466a:	4603      	mov	r3, r0
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <SD_Control_Write+0x20c>)
 8004670:	701a      	strb	r2, [r3, #0]
	fres = f_putc(characterASCII[5], &fil);
 8004672:	7a7b      	ldrb	r3, [r7, #9]
 8004674:	4911      	ldr	r1, [pc, #68]	; (80046bc <SD_Control_Write+0x208>)
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe ff58 	bl	800352c <f_putc>
 800467c:	4603      	mov	r3, r0
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <SD_Control_Write+0x20c>)
 8004682:	701a      	strb	r2, [r3, #0]

	itoa(systemVariables.humidity_int, buff, 10);
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <SD_Control_Write+0x214>)
 8004686:	78db      	ldrb	r3, [r3, #3]
 8004688:	4618      	mov	r0, r3
 800468a:	f107 030c 	add.w	r3, r7, #12
 800468e:	220a      	movs	r2, #10
 8004690:	4619      	mov	r1, r3
 8004692:	f007 f839 	bl	800b708 <itoa>
	fres = f_puts(buff, &fil);
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	4908      	ldr	r1, [pc, #32]	; (80046bc <SD_Control_Write+0x208>)
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe ff62 	bl	8003566 <f_puts>
 80046a2:	4603      	mov	r3, r0
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <SD_Control_Write+0x20c>)
 80046a8:	701a      	strb	r2, [r3, #0]

	f_close(&fil);
 80046aa:	4804      	ldr	r0, [pc, #16]	; (80046bc <SD_Control_Write+0x208>)
 80046ac:	f7fe fde9 	bl	8003282 <f_close>
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	0800c28c 	.word	0x0800c28c
 80046bc:	20000764 	.word	0x20000764
 80046c0:	20000994 	.word	0x20000994
 80046c4:	0800c294 	.word	0x0800c294
 80046c8:	20000ea4 	.word	0x20000ea4

080046cc <TempHumid_Init>:
  * @param None
  * @retval None
  */

void TempHumid_Init(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
	/* Set used variables to default values.*/

	statusMessage 	= DHT11_INIT_READ;
 80046d0:	4b13      	ldr	r3, [pc, #76]	; (8004720 <TempHumid_Init+0x54>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
	errorMessage	= DHT11_NOT_STARTED;
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <TempHumid_Init+0x58>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]

	tempHumidDataValidFlag = 0;
 80046dc:	4b12      	ldr	r3, [pc, #72]	; (8004728 <TempHumid_Init+0x5c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
	flags.tempHumidICCompleteFlag = 0;
 80046e2:	4a12      	ldr	r2, [pc, #72]	; (800472c <TempHumid_Init+0x60>)
 80046e4:	7813      	ldrb	r3, [r2, #0]
 80046e6:	f36f 0383 	bfc	r3, #2, #2
 80046ea:	7013      	strb	r3, [r2, #0]
	dataCount = 0;
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <TempHumid_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
	icTimeOutValue = 0;
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <TempHumid_Init+0x68>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	801a      	strh	r2, [r3, #0]

	systemVariables.humidity_int 		= 0;
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <TempHumid_Init+0x6c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	70da      	strb	r2, [r3, #3]
	systemVariables.humidity_frac 		= 0;
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <TempHumid_Init+0x6c>)
 8004700:	2200      	movs	r2, #0
 8004702:	711a      	strb	r2, [r3, #4]
	systemVariables.temperature_int 	= 0;
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <TempHumid_Init+0x6c>)
 8004706:	2200      	movs	r2, #0
 8004708:	705a      	strb	r2, [r3, #1]
	systemVariables.temperature_frac 	= 0;
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <TempHumid_Init+0x6c>)
 800470c:	2200      	movs	r2, #0
 800470e:	709a      	strb	r2, [r3, #2]


	tempHumidityCheckSum = 0;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <TempHumid_Init+0x70>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
}
 8004716:	bf00      	nop
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	200000fa 	.word	0x200000fa
 8004724:	20000a99 	.word	0x20000a99
 8004728:	20000aa0 	.word	0x20000aa0
 800472c:	20000ea0 	.word	0x20000ea0
 8004730:	20000a9a 	.word	0x20000a9a
 8004734:	20000a9e 	.word	0x20000a9e
 8004738:	20000ea4 	.word	0x20000ea4
 800473c:	20000aa1 	.word	0x20000aa1

08004740 <TempHumid_Read>:
  * @param None
  * @retval None
  */

int TempHumid_Read(uint8_t sensorNumber)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	/* Check state of read */
	switch(readSequenceStatus)
 800474a:	4b5d      	ldr	r3, [pc, #372]	; (80048c0 <TempHumid_Read+0x180>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b05      	cmp	r3, #5
 8004750:	d04e      	beq.n	80047f0 <TempHumid_Read+0xb0>
 8004752:	2b05      	cmp	r3, #5
 8004754:	f300 80ae 	bgt.w	80048b4 <TempHumid_Read+0x174>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <TempHumid_Read+0x22>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d016      	beq.n	800478e <TempHumid_Read+0x4e>
 8004760:	e0a8      	b.n	80048b4 <TempHumid_Read+0x174>
	{
		case DHT11_NOT_STARTED:

			/* Start data read sequence */
			TempHumid_Init();
 8004762:	f7ff ffb3 	bl	80046cc <TempHumid_Init>

			tempHumid_StartDataReadSequence(sensorNumber);
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f8b9 	bl	80048e0 <tempHumid_StartDataReadSequence>

			tempHumidity_Timer_Start(DHT11_START_COMM_TIME, sensorNumber);
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	4619      	mov	r1, r3
 8004772:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004776:	f000 fcc9 	bl	800510c <tempHumidity_Timer_Start>

			readSequenceStatus = DHT11_INIT_READ;
 800477a:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <TempHumid_Read+0x180>)
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]

			systicCounter = HAL_GetTick();
 8004780:	f001 fb3e 	bl	8005e00 <HAL_GetTick>
 8004784:	4603      	mov	r3, r0
 8004786:	b29a      	uxth	r2, r3
 8004788:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <TempHumid_Read+0x184>)
 800478a:	801a      	strh	r2, [r3, #0]

			break;
 800478c:	e092      	b.n	80048b4 <TempHumid_Read+0x174>

		case DHT11_INIT_READ:

			/* Use systic to figure out if response took too long */
			icTimeOutValue = HAL_GetTick() - systicCounter;
 800478e:	f001 fb37 	bl	8005e00 <HAL_GetTick>
 8004792:	4603      	mov	r3, r0
 8004794:	b29a      	uxth	r2, r3
 8004796:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <TempHumid_Read+0x184>)
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	b29a      	uxth	r2, r3
 800479e:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <TempHumid_Read+0x188>)
 80047a0:	801a      	strh	r2, [r3, #0]

			/* If last read yielded valid data */
			if(flags.tempHumidICCompleteFlag)
 80047a2:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <TempHumid_Read+0x18c>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <TempHumid_Read+0x86>
			{
				tempHumidity_ConvertRawData(sensorNumber);
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f8de 	bl	8004974 <tempHumidity_ConvertRawData>
				tempHumid_ConvertDataToIntegers(sensorNumber);
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f974 	bl	8004aa8 <tempHumid_ConvertDataToIntegers>
				readSequenceStatus = DHT11_READ_DATA;
 80047c0:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <TempHumid_Read+0x180>)
 80047c2:	2205      	movs	r2, #5
 80047c4:	701a      	strb	r2, [r3, #0]
			}

			if(icTimeOutValue >  DHT11_WAIT_FOR_RESPONSE_TIME)
 80047c6:	4b40      	ldr	r3, [pc, #256]	; (80048c8 <TempHumid_Read+0x188>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b32      	cmp	r3, #50	; 0x32
 80047cc:	d971      	bls.n	80048b2 <TempHumid_Read+0x172>
			{
				tempHumidPrintErrorMessage(DHT11_WAIT_FOR_ACK_ERROR, sensorNumber);
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	4619      	mov	r1, r3
 80047d2:	2001      	movs	r0, #1
 80047d4:	f000 fc48 	bl	8005068 <tempHumidPrintErrorMessage>
				tempHumidity_EndTimers();
 80047d8:	f000 fd46 	bl	8005268 <tempHumidity_EndTimers>
				readSequenceStatus = DHT11_NOT_STARTED;
 80047dc:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <TempHumid_Read+0x180>)
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
				flags.tempHumidDataReadyFlag = 2;
 80047e2:	4a3a      	ldr	r2, [pc, #232]	; (80048cc <TempHumid_Read+0x18c>)
 80047e4:	7813      	ldrb	r3, [r2, #0]
 80047e6:	2102      	movs	r1, #2
 80047e8:	f361 0301 	bfi	r3, r1, #0, #2
 80047ec:	7013      	strb	r3, [r2, #0]
			}

			break;
 80047ee:	e060      	b.n	80048b2 <TempHumid_Read+0x172>

		case DHT11_READ_DATA:

			/* Validate checksum */
			if(tempHumidity_CheckSum_Validate(sensorNumber))
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fba6 	bl	8004f44 <tempHumidity_CheckSum_Validate>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04f      	beq.n	800489e <TempHumid_Read+0x15e>
			{
				if(sensorNumber == DHT11_SENSOR_1)
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11a      	bne.n	800483a <TempHumid_Read+0xfa>
				{
					#ifdef debug
						/* Print the data we have */
						tempHumidity_Printout(sensorNumber);
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa2e 	bl	8004c68 <tempHumidity_Printout>
					#endif

						sensorValidValueCount++;
 800480c:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <TempHumid_Read+0x190>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	b2da      	uxtb	r2, r3
 8004814:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <TempHumid_Read+0x190>)
 8004816:	701a      	strb	r2, [r3, #0]

						systemVariables.humidity_int = TempHumidityDataBuffer[0][0];
 8004818:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <TempHumid_Read+0x194>)
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <TempHumid_Read+0x198>)
 800481e:	70da      	strb	r2, [r3, #3]
						systemVariables.humidity_frac = TempHumidityDataBuffer[0][1];
 8004820:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <TempHumid_Read+0x194>)
 8004822:	785a      	ldrb	r2, [r3, #1]
 8004824:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <TempHumid_Read+0x198>)
 8004826:	711a      	strb	r2, [r3, #4]
						systemVariables.temperature_int = TempHumidityDataBuffer[0][2];
 8004828:	4b2a      	ldr	r3, [pc, #168]	; (80048d4 <TempHumid_Read+0x194>)
 800482a:	789a      	ldrb	r2, [r3, #2]
 800482c:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <TempHumid_Read+0x198>)
 800482e:	705a      	strb	r2, [r3, #1]
						systemVariables.temperature_frac = TempHumidityDataBuffer[0][3];
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <TempHumid_Read+0x194>)
 8004832:	78da      	ldrb	r2, [r3, #3]
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <TempHumid_Read+0x198>)
 8004836:	709a      	strb	r2, [r3, #2]
 8004838:	e031      	b.n	800489e <TempHumid_Read+0x15e>

				}
				else if(sensorNumber == DHT11_SENSOR_2)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d12e      	bne.n	800489e <TempHumid_Read+0x15e>
				{
					#ifdef debug
						/* Print the data we have */
						tempHumidity_Printout(sensorNumber);
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fa10 	bl	8004c68 <tempHumidity_Printout>
						systemVariables.humidity_frac = TempHumidityDataBuffer[1][1];
						systemVariables.temperature_int = TempHumidityDataBuffer[1][2];
						systemVariables.temperature_frac = TempHumidityDataBuffer[1][3];
	*/

					if(sensorValidValueCount == DHT11_NUMBER_OF_SENSORS)
 8004848:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <TempHumid_Read+0x190>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d117      	bne.n	8004880 <TempHumid_Read+0x140>
					{
						tempHumidity_Average(sensorNumber);
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fbd2 	bl	8004ffc <tempHumidity_Average>
						systemVariables.humidity_int = TempHumidityDataAverage[0];
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <TempHumid_Read+0x19c>)
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <TempHumid_Read+0x198>)
 800485e:	70da      	strb	r2, [r3, #3]
						systemVariables.humidity_frac = TempHumidityDataAverage[1];
 8004860:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <TempHumid_Read+0x19c>)
 8004862:	785a      	ldrb	r2, [r3, #1]
 8004864:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <TempHumid_Read+0x198>)
 8004866:	711a      	strb	r2, [r3, #4]
						systemVariables.temperature_int = TempHumidityDataAverage[2];
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <TempHumid_Read+0x19c>)
 800486a:	789a      	ldrb	r2, [r3, #2]
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <TempHumid_Read+0x198>)
 800486e:	705a      	strb	r2, [r3, #1]
						systemVariables.temperature_frac = TempHumidityDataAverage[3];
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <TempHumid_Read+0x19c>)
 8004872:	78da      	ldrb	r2, [r3, #3]
 8004874:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <TempHumid_Read+0x198>)
 8004876:	709a      	strb	r2, [r3, #2]

						#ifdef debug
							/* Print the data we have */
							tempHumidity_Printout(DHT11_PRINT_AVERAGE);
 8004878:	20ff      	movs	r0, #255	; 0xff
 800487a:	f000 f9f5 	bl	8004c68 <tempHumidity_Printout>
 800487e:	e00b      	b.n	8004898 <TempHumid_Read+0x158>

					}
					else
					{

						systemVariables.humidity_int = 0;
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <TempHumid_Read+0x198>)
 8004882:	2200      	movs	r2, #0
 8004884:	70da      	strb	r2, [r3, #3]
						systemVariables.humidity_frac = 0;
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <TempHumid_Read+0x198>)
 8004888:	2200      	movs	r2, #0
 800488a:	711a      	strb	r2, [r3, #4]
						systemVariables.temperature_int = 0;
 800488c:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <TempHumid_Read+0x198>)
 800488e:	2200      	movs	r2, #0
 8004890:	705a      	strb	r2, [r3, #1]
						systemVariables.temperature_frac = 0;
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <TempHumid_Read+0x198>)
 8004894:	2200      	movs	r2, #0
 8004896:	709a      	strb	r2, [r3, #2]
					}

					sensorValidValueCount = 0;
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <TempHumid_Read+0x190>)
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
				}
			}

			flags.tempHumidDataReadyFlag = 1;
 800489e:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <TempHumid_Read+0x18c>)
 80048a0:	7813      	ldrb	r3, [r2, #0]
 80048a2:	2101      	movs	r1, #1
 80048a4:	f361 0301 	bfi	r3, r1, #0, #2
 80048a8:	7013      	strb	r3, [r2, #0]
			readSequenceStatus = DHT11_NOT_STARTED;
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <TempHumid_Read+0x180>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]

			break;
 80048b0:	e000      	b.n	80048b4 <TempHumid_Read+0x174>
			break;
 80048b2:	bf00      	nop
	}
	return 0;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000a98 	.word	0x20000a98
 80048c4:	20000a9c 	.word	0x20000a9c
 80048c8:	20000a9e 	.word	0x20000a9e
 80048cc:	20000ea0 	.word	0x20000ea0
 80048d0:	20000aa2 	.word	0x20000aa2
 80048d4:	20000c90 	.word	0x20000c90
 80048d8:	20000ea4 	.word	0x20000ea4
 80048dc:	20000c9c 	.word	0x20000c9c

080048e0 <tempHumid_StartDataReadSequence>:
  * @param None
  * @retval None
  */

static void tempHumid_StartDataReadSequence(uint8_t sensorNumber)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
	/* Setup of Temperature and Humidity read sequence */

	if(sensorNumber == DHT11_SENSOR_1)
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11d      	bne.n	800492c <tempHumid_StartDataReadSequence+0x4c>
	{
		/*Configure GPIO pin PA11 as output for DHT11 Temperature and Humidity Sensor */
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	f107 031c 	add.w	r3, r7, #28
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]

		GPIO_InitStruct.Pin = TEMPHUMID_1_PIN;
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004904:	2311      	movs	r3, #17
 8004906:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800490c:	2300      	movs	r3, #0
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 8004910:	f107 031c 	add.w	r3, r7, #28
 8004914:	4619      	mov	r1, r3
 8004916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800491a:	f001 fbdf 	bl	80060dc <HAL_GPIO_Init>

		/* Setting IO line to output automatically sets pin to 0. */
		/* Set data line to high and start timer for 20ms */
		HAL_GPIO_WritePin(TEMPHUMID_PORT, TEMPHUMID_1_PIN, GPIO_PIN_SET);
 800491e:	2201      	movs	r2, #1
 8004920:	2101      	movs	r1, #1
 8004922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004926:	f001 fd43 	bl	80063b0 <HAL_GPIO_WritePin>

		/* Setting IO line to output automatically sets pin to 0. */
		/* Set data line to high and start timer for 20ms */
		HAL_GPIO_WritePin(TEMPHUMID_PORT, TEMPHUMID_2_PIN, GPIO_PIN_SET);
	}
}
 800492a:	e01f      	b.n	800496c <tempHumid_StartDataReadSequence+0x8c>
	else if (sensorNumber == DHT11_SENSOR_2)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d11c      	bne.n	800496c <tempHumid_StartDataReadSequence+0x8c>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004932:	f107 0308 	add.w	r3, r7, #8
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = TEMPHUMID_2_PIN;
 8004942:	2302      	movs	r3, #2
 8004944:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004946:	2311      	movs	r3, #17
 8004948:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 8004952:	f107 0308 	add.w	r3, r7, #8
 8004956:	4619      	mov	r1, r3
 8004958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800495c:	f001 fbbe 	bl	80060dc <HAL_GPIO_Init>
		HAL_GPIO_WritePin(TEMPHUMID_PORT, TEMPHUMID_2_PIN, GPIO_PIN_SET);
 8004960:	2201      	movs	r2, #1
 8004962:	2102      	movs	r1, #2
 8004964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004968:	f001 fd22 	bl	80063b0 <HAL_GPIO_WritePin>
}
 800496c:	bf00      	nop
 800496e:	3730      	adds	r7, #48	; 0x30
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <tempHumidity_ConvertRawData>:
  * @param sensorNumber
  * @retval None
  */

static void tempHumidity_ConvertRawData(uint8_t sensorNumber)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
	/* Convert time values and check if bits are acknowledge or data bits. */
	for(uint8_t i = 0; i < DHT11_EXPECTED_TRANSITIONS; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e07e      	b.n	8004a82 <tempHumidity_ConvertRawData+0x10e>
	{
		/* Calculate input captured time in nano seconds. Each input capture clock tick is approximately 333ns */
		uint32_t temp = ns_CAL_VALUE *  DHT11_DataBufferInputCapture[i];
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	4a42      	ldr	r2, [pc, #264]	; (8004a90 <tempHumidity_ConvertRawData+0x11c>)
 8004988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498c:	f240 124d 	movw	r2, #333	; 0x14d
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	60bb      	str	r3, [r7, #8]

		/* If bit position is lower than 4, check acknowledgement bit */
		if(i < DHT11_DATA_START_BIT_POS)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d82c      	bhi.n	80049f6 <tempHumidity_ConvertRawData+0x82>
		{

			/* Check if its acknowledgement or data */
			if(i == DHT11_ACK_LOW_POS)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d112      	bne.n	80049c8 <tempHumidity_ConvertRawData+0x54>
			{
				if((temp > DHT11_ACK_LOW_L) && (temp < DHT11_ACK_LOW_H))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d90a      	bls.n	80049c2 <tempHumidity_ConvertRawData+0x4e>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4a39      	ldr	r2, [pc, #228]	; (8004a94 <tempHumidity_ConvertRawData+0x120>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d806      	bhi.n	80049c2 <tempHumidity_ConvertRawData+0x4e>
				{
					/* This is a preceding low before valid bit. Do nothing here */
					tempHumidDataValidFlag += 1;
 80049b4:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e002      	b.n	80049c8 <tempHumidity_ConvertRawData+0x54>
				}
				else
				{
					/* Acknowledgement LOW bit not valid */
					tempHumidDataValidFlag = 0;
 80049c2:	4b35      	ldr	r3, [pc, #212]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Check if its acknowledgement or data */
			if(i == DHT11_ACK_HIGH_POS)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d156      	bne.n	8004a7c <tempHumidity_ConvertRawData+0x108>
			{
				if((temp > DHT11_ACK_HIGH_L) && (temp < DHT11_ACK_HIGH_H))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d90a      	bls.n	80049ee <tempHumidity_ConvertRawData+0x7a>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <tempHumidity_ConvertRawData+0x120>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d806      	bhi.n	80049ee <tempHumidity_ConvertRawData+0x7a>
				{
					/* This is a preceding low before valid bit. Do nothing here */
					tempHumidDataValidFlag += 1;
 80049e0:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e046      	b.n	8004a7c <tempHumidity_ConvertRawData+0x108>
				}
				else
				{
					/* Acknowledgement LOW bit not valid */
					tempHumidDataValidFlag = 0;
 80049ee:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	e042      	b.n	8004a7c <tempHumidity_ConvertRawData+0x108>
			}
		}
		else
		{
			/* If the acknowledgement bit is valid, check whether data is 1 or 0 */
			if(tempHumidDataValidFlag == 2)
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <tempHumidity_ConvertRawData+0x124>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d138      	bne.n	8004a70 <tempHumidity_ConvertRawData+0xfc>
			{
				if((temp > DHT11_PRE_L) && (temp < DHT11_PRE_H))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d904      	bls.n	8004a12 <tempHumidity_ConvertRawData+0x9e>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f64b 7267 	movw	r2, #48999	; 0xbf67
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d934      	bls.n	8004a7c <tempHumidity_ConvertRawData+0x108>
				{
					/* This is a preceding low before valid bit. Do nothing here */
				}
				else if((temp > DHT11_DATA_LOW_L) && (temp < DHT11_DATA_LOW_H))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d912      	bls.n	8004a42 <tempHumidity_ConvertRawData+0xce>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d80d      	bhi.n	8004a42 <tempHumidity_ConvertRawData+0xce>
				{
					/* Data is a valid LOW */
					TempHumidityDataBuffer_Raw[dataCount] = 0;
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <tempHumidity_ConvertRawData+0x128>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <tempHumidity_ConvertRawData+0x12c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

					dataCount++;
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <tempHumidity_ConvertRawData+0x128>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <tempHumidity_ConvertRawData+0x128>)
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e01c      	b.n	8004a7c <tempHumidity_ConvertRawData+0x108>
				}
				else if((temp > DHT11_DATA_HIGH_L) && (temp < DHT11_DATA_HIGH_H))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d917      	bls.n	8004a7c <tempHumidity_ConvertRawData+0x108>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <tempHumidity_ConvertRawData+0x130>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d813      	bhi.n	8004a7c <tempHumidity_ConvertRawData+0x108>
				{
					/* Data is a valid HIGH */
					TempHumidityDataBuffer_Raw[dataCount] = 1;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <tempHumidity_ConvertRawData+0x128>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <tempHumidity_ConvertRawData+0x12c>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					dataCount++;
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <tempHumidity_ConvertRawData+0x128>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <tempHumidity_ConvertRawData+0x128>)
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e005      	b.n	8004a7c <tempHumidity_ConvertRawData+0x108>
				}
			}
			else
			{
				#ifdef debug
					tempHumidPrintErrorMessage(DHT11_CHECK_ACK_ERROR, sensorNumber);
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	4619      	mov	r1, r3
 8004a74:	2002      	movs	r0, #2
 8004a76:	f000 faf7 	bl	8005068 <tempHumidPrintErrorMessage>
				#endif
				return;
 8004a7a:	e006      	b.n	8004a8a <tempHumidity_ConvertRawData+0x116>
	for(uint8_t i = 0; i < DHT11_EXPECTED_TRANSITIONS; i++)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b52      	cmp	r3, #82	; 0x52
 8004a86:	f67f af7d 	bls.w	8004984 <tempHumidity_ConvertRawData+0x10>
			}
		}
	}
}
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000aa4 	.word	0x20000aa4
 8004a94:	00015f8f 	.word	0x00015f8f
 8004a98:	20000aa0 	.word	0x20000aa0
 8004a9c:	20000a9a 	.word	0x20000a9a
 8004aa0:	20000bf0 	.word	0x20000bf0
 8004aa4:	0001387f 	.word	0x0001387f

08004aa8 <tempHumid_ConvertDataToIntegers>:
  * @brief Convert data to human readable integers
  * @param sensorNumber
  * @retval None
  */
static void tempHumid_ConvertDataToIntegers(uint8_t sensorNumber)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
	uint8_t sensorBufferNumber = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]

	if(sensorNumber == DHT11_SENSOR_1)
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <tempHumid_ConvertDataToIntegers+0x1a>
	{
		sensorBufferNumber = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	e004      	b.n	8004acc <tempHumid_ConvertDataToIntegers+0x24>
	}
	else if(sensorNumber == DHT11_SENSOR_2)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d101      	bne.n	8004acc <tempHumid_ConvertDataToIntegers+0x24>
	{
		sensorBufferNumber = 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
	}

	for(uint8_t j = 0; j < DHT11_STORED_VALUE_NUMBER; j++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	73bb      	strb	r3, [r7, #14]
 8004ad0:	e00c      	b.n	8004aec <tempHumid_ConvertDataToIntegers+0x44>
	{
		TempHumidityDataBuffer[sensorBufferNumber][j] = 0;
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	7bb9      	ldrb	r1, [r7, #14]
 8004ad6:	4862      	ldr	r0, [pc, #392]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	4403      	add	r3, r0
 8004ae0:	440b      	add	r3, r1
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < DHT11_STORED_VALUE_NUMBER; j++)
 8004ae6:	7bbb      	ldrb	r3, [r7, #14]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	73bb      	strb	r3, [r7, #14]
 8004aec:	7bbb      	ldrb	r3, [r7, #14]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d9ef      	bls.n	8004ad2 <tempHumid_ConvertDataToIntegers+0x2a>
	}

	/* Convert into integers */
	for(uint8_t i = 0; i < DHT11_EXPECTED_DATA; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	737b      	strb	r3, [r7, #13]
 8004af6:	e0a9      	b.n	8004c4c <tempHumid_ConvertDataToIntegers+0x1a4>
	{
		/* Relative Humidity Integral */
		if(i < DHT11_RH_FRACTIONAL_START)
 8004af8:	7b7b      	ldrb	r3, [r7, #13]
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	d81a      	bhi.n	8004b34 <tempHumid_ConvertDataToIntegers+0x8c>
		{
			TempHumidityDataBuffer[sensorBufferNumber][0] |= (TempHumidityDataBuffer_Raw[i] << (7-i));
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	4957      	ldr	r1, [pc, #348]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	440b      	add	r3, r1
 8004b0a:	7819      	ldrb	r1, [r3, #0]
 8004b0c:	7b7b      	ldrb	r3, [r7, #13]
 8004b0e:	4a55      	ldr	r2, [pc, #340]	; (8004c64 <tempHumid_ConvertDataToIntegers+0x1bc>)
 8004b10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b14:	7b7b      	ldrb	r3, [r7, #13]
 8004b16:	f1c3 0307 	rsb	r3, r3, #7
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	430b      	orrs	r3, r1
 8004b24:	b2d8      	uxtb	r0, r3
 8004b26:	494e      	ldr	r1, [pc, #312]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	4602      	mov	r2, r0
 8004b32:	701a      	strb	r2, [r3, #0]
		}

		/* Relative Humidity Fraction */
		if((i < DHT11_TEMP_INTEGRAL_START) && (i >= DHT11_RH_FRACTIONAL_START))
 8004b34:	7b7b      	ldrb	r3, [r7, #13]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d81f      	bhi.n	8004b7a <tempHumid_ConvertDataToIntegers+0xd2>
 8004b3a:	7b7b      	ldrb	r3, [r7, #13]
 8004b3c:	2b07      	cmp	r3, #7
 8004b3e:	d91c      	bls.n	8004b7a <tempHumid_ConvertDataToIntegers+0xd2>
		{
			TempHumidityDataBuffer[sensorBufferNumber][1] |= (TempHumidityDataBuffer_Raw[i] << (15-i));
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	4947      	ldr	r1, [pc, #284]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	7819      	ldrb	r1, [r3, #0]
 8004b50:	7b7b      	ldrb	r3, [r7, #13]
 8004b52:	4a44      	ldr	r2, [pc, #272]	; (8004c64 <tempHumid_ConvertDataToIntegers+0x1bc>)
 8004b54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b58:	7b7b      	ldrb	r3, [r7, #13]
 8004b5a:	f1c3 030f 	rsb	r3, r3, #15
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	7bfa      	ldrb	r2, [r7, #15]
 8004b66:	430b      	orrs	r3, r1
 8004b68:	b2d8      	uxtb	r0, r3
 8004b6a:	493d      	ldr	r1, [pc, #244]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	440b      	add	r3, r1
 8004b74:	3301      	adds	r3, #1
 8004b76:	4602      	mov	r2, r0
 8004b78:	701a      	strb	r2, [r3, #0]
		}

		/* Temperature Integral */
		if((i < DHT11_TEMP_FRACTIONAL_START) && (i >= DHT11_TEMP_INTEGRAL_START))
 8004b7a:	7b7b      	ldrb	r3, [r7, #13]
 8004b7c:	2b17      	cmp	r3, #23
 8004b7e:	d81f      	bhi.n	8004bc0 <tempHumid_ConvertDataToIntegers+0x118>
 8004b80:	7b7b      	ldrb	r3, [r7, #13]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d91c      	bls.n	8004bc0 <tempHumid_ConvertDataToIntegers+0x118>
		{
			TempHumidityDataBuffer[sensorBufferNumber][2] |= (TempHumidityDataBuffer_Raw[i] << (23-i));
 8004b86:	7bfa      	ldrb	r2, [r7, #15]
 8004b88:	4935      	ldr	r1, [pc, #212]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	440b      	add	r3, r1
 8004b92:	3302      	adds	r3, #2
 8004b94:	7819      	ldrb	r1, [r3, #0]
 8004b96:	7b7b      	ldrb	r3, [r7, #13]
 8004b98:	4a32      	ldr	r2, [pc, #200]	; (8004c64 <tempHumid_ConvertDataToIntegers+0x1bc>)
 8004b9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ba0:	f1c3 0317 	rsb	r3, r3, #23
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	7bfa      	ldrb	r2, [r7, #15]
 8004bac:	430b      	orrs	r3, r1
 8004bae:	b2d8      	uxtb	r0, r3
 8004bb0:	492b      	ldr	r1, [pc, #172]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3302      	adds	r3, #2
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	701a      	strb	r2, [r3, #0]
		}

		/* Temperature Fraction */
		if((i < DHT11_CHSUM_START) && (i >= DHT11_TEMP_FRACTIONAL_START))
 8004bc0:	7b7b      	ldrb	r3, [r7, #13]
 8004bc2:	2b1f      	cmp	r3, #31
 8004bc4:	d81f      	bhi.n	8004c06 <tempHumid_ConvertDataToIntegers+0x15e>
 8004bc6:	7b7b      	ldrb	r3, [r7, #13]
 8004bc8:	2b17      	cmp	r3, #23
 8004bca:	d91c      	bls.n	8004c06 <tempHumid_ConvertDataToIntegers+0x15e>
		{
			TempHumidityDataBuffer[sensorBufferNumber][3] |= (TempHumidityDataBuffer_Raw[i] << (31-i));
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	4924      	ldr	r1, [pc, #144]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3303      	adds	r3, #3
 8004bda:	7819      	ldrb	r1, [r3, #0]
 8004bdc:	7b7b      	ldrb	r3, [r7, #13]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <tempHumid_ConvertDataToIntegers+0x1bc>)
 8004be0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004be4:	7b7b      	ldrb	r3, [r7, #13]
 8004be6:	f1c3 031f 	rsb	r3, r3, #31
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	b2d8      	uxtb	r0, r3
 8004bf6:	491a      	ldr	r1, [pc, #104]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3303      	adds	r3, #3
 8004c02:	4602      	mov	r2, r0
 8004c04:	701a      	strb	r2, [r3, #0]
		}

		/* Check Sum */
		if(i >= DHT11_CHSUM_START)
 8004c06:	7b7b      	ldrb	r3, [r7, #13]
 8004c08:	2b1f      	cmp	r3, #31
 8004c0a:	d91c      	bls.n	8004c46 <tempHumid_ConvertDataToIntegers+0x19e>
		{
			TempHumidityDataBuffer[sensorBufferNumber][4] |= (TempHumidityDataBuffer_Raw[i] << (39-i));
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	4914      	ldr	r1, [pc, #80]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	3304      	adds	r3, #4
 8004c1a:	7819      	ldrb	r1, [r3, #0]
 8004c1c:	7b7b      	ldrb	r3, [r7, #13]
 8004c1e:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <tempHumid_ConvertDataToIntegers+0x1bc>)
 8004c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c24:	7b7b      	ldrb	r3, [r7, #13]
 8004c26:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	430b      	orrs	r3, r1
 8004c34:	b2d8      	uxtb	r0, r3
 8004c36:	490a      	ldr	r1, [pc, #40]	; (8004c60 <tempHumid_ConvertDataToIntegers+0x1b8>)
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3304      	adds	r3, #4
 8004c42:	4602      	mov	r2, r0
 8004c44:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < DHT11_EXPECTED_DATA; i++)
 8004c46:	7b7b      	ldrb	r3, [r7, #13]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	737b      	strb	r3, [r7, #13]
 8004c4c:	7b7b      	ldrb	r3, [r7, #13]
 8004c4e:	2b27      	cmp	r3, #39	; 0x27
 8004c50:	f67f af52 	bls.w	8004af8 <tempHumid_ConvertDataToIntegers+0x50>
		}
	}
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	20000c90 	.word	0x20000c90
 8004c64:	20000bf0 	.word	0x20000bf0

08004c68 <tempHumidity_Printout>:
  * @param None
  * @retval None
  */

static void tempHumidity_Printout(uint8_t sensorNumber)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
	char buff[2];

	/* Print individual sensors */

	/* Sensor 1 */
	if(sensorNumber == DHT11_SENSOR_1)
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d169      	bne.n	8004d4c <tempHumidity_Printout+0xe4>
	{
		/* Relative Humidity */
		HAL_UART_Transmit(&huart2,(uint8_t*)DHT11StatusBuffer[9], sizeof(DHT11StatusBuffer[9]), USART_TIMEOUT_VALUE);
 8004c78:	2364      	movs	r3, #100	; 0x64
 8004c7a:	2228      	movs	r2, #40	; 0x28
 8004c7c:	49a5      	ldr	r1, [pc, #660]	; (8004f14 <tempHumidity_Printout+0x2ac>)
 8004c7e:	48a6      	ldr	r0, [pc, #664]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004c80:	f006 f892 	bl	800ada8 <HAL_UART_Transmit>

		itoa(TempHumidityDataBuffer[0][0], buff, 10);
 8004c84:	4ba5      	ldr	r3, [pc, #660]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	220a      	movs	r2, #10
 8004c90:	4619      	mov	r1, r3
 8004c92:	f006 fd39 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004c96:	f107 010c 	add.w	r1, r7, #12
 8004c9a:	2364      	movs	r3, #100	; 0x64
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	489e      	ldr	r0, [pc, #632]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004ca0:	f006 f882 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", sizeof("."), USART_TIMEOUT_VALUE);
 8004ca4:	2364      	movs	r3, #100	; 0x64
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	499d      	ldr	r1, [pc, #628]	; (8004f20 <tempHumidity_Printout+0x2b8>)
 8004caa:	489b      	ldr	r0, [pc, #620]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004cac:	f006 f87c 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(TempHumidityDataBuffer[0][1], buff, 10);
 8004cb0:	4b9a      	ldr	r3, [pc, #616]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f107 030c 	add.w	r3, r7, #12
 8004cba:	220a      	movs	r2, #10
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f006 fd23 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004cc2:	f107 010c 	add.w	r1, r7, #12
 8004cc6:	2364      	movs	r3, #100	; 0x64
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4893      	ldr	r0, [pc, #588]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004ccc:	f006 f86c 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004cd0:	2364      	movs	r3, #100	; 0x64
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	4993      	ldr	r1, [pc, #588]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004cd6:	4890      	ldr	r0, [pc, #576]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004cd8:	f006 f866 	bl	800ada8 <HAL_UART_Transmit>

		/* Temperature */
		HAL_UART_Transmit(&huart2,(uint8_t*)DHT11StatusBuffer[8], sizeof(DHT11StatusBuffer[8]), USART_TIMEOUT_VALUE);
 8004cdc:	2364      	movs	r3, #100	; 0x64
 8004cde:	2228      	movs	r2, #40	; 0x28
 8004ce0:	4991      	ldr	r1, [pc, #580]	; (8004f28 <tempHumidity_Printout+0x2c0>)
 8004ce2:	488d      	ldr	r0, [pc, #564]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004ce4:	f006 f860 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(TempHumidityDataBuffer[0][2], buff, 10);
 8004ce8:	4b8c      	ldr	r3, [pc, #560]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f107 030c 	add.w	r3, r7, #12
 8004cf2:	220a      	movs	r2, #10
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f006 fd07 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004cfa:	f107 010c 	add.w	r1, r7, #12
 8004cfe:	2364      	movs	r3, #100	; 0x64
 8004d00:	2202      	movs	r2, #2
 8004d02:	4885      	ldr	r0, [pc, #532]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d04:	f006 f850 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", sizeof("."), USART_TIMEOUT_VALUE);
 8004d08:	2364      	movs	r3, #100	; 0x64
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	4984      	ldr	r1, [pc, #528]	; (8004f20 <tempHumidity_Printout+0x2b8>)
 8004d0e:	4882      	ldr	r0, [pc, #520]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d10:	f006 f84a 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(TempHumidityDataBuffer[0][3], buff, 10);
 8004d14:	4b81      	ldr	r3, [pc, #516]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	220a      	movs	r2, #10
 8004d20:	4619      	mov	r1, r3
 8004d22:	f006 fcf1 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004d26:	f107 010c 	add.w	r1, r7, #12
 8004d2a:	2364      	movs	r3, #100	; 0x64
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	487a      	ldr	r0, [pc, #488]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d30:	f006 f83a 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004d34:	2364      	movs	r3, #100	; 0x64
 8004d36:	2202      	movs	r2, #2
 8004d38:	497a      	ldr	r1, [pc, #488]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004d3a:	4877      	ldr	r0, [pc, #476]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d3c:	f006 f834 	bl	800ada8 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004d40:	2364      	movs	r3, #100	; 0x64
 8004d42:	2202      	movs	r2, #2
 8004d44:	4977      	ldr	r1, [pc, #476]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004d46:	4874      	ldr	r0, [pc, #464]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d48:	f006 f82e 	bl	800ada8 <HAL_UART_Transmit>
	}

	if(sensorNumber == DHT11_SENSOR_2)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d169      	bne.n	8004e26 <tempHumidity_Printout+0x1be>
	{
		/* Sensor 2 */

		/* Relative Humidity */
		HAL_UART_Transmit(&huart2,(uint8_t*)DHT11StatusBuffer[11], sizeof(DHT11StatusBuffer[11]), USART_TIMEOUT_VALUE);
 8004d52:	2364      	movs	r3, #100	; 0x64
 8004d54:	2228      	movs	r2, #40	; 0x28
 8004d56:	4975      	ldr	r1, [pc, #468]	; (8004f2c <tempHumidity_Printout+0x2c4>)
 8004d58:	486f      	ldr	r0, [pc, #444]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d5a:	f006 f825 	bl	800ada8 <HAL_UART_Transmit>

		itoa(TempHumidityDataBuffer[1][0], buff, 10);
 8004d5e:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004d60:	795b      	ldrb	r3, [r3, #5]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f107 030c 	add.w	r3, r7, #12
 8004d68:	220a      	movs	r2, #10
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f006 fccc 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004d70:	f107 010c 	add.w	r1, r7, #12
 8004d74:	2364      	movs	r3, #100	; 0x64
 8004d76:	2202      	movs	r2, #2
 8004d78:	4867      	ldr	r0, [pc, #412]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d7a:	f006 f815 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", sizeof("."), USART_TIMEOUT_VALUE);
 8004d7e:	2364      	movs	r3, #100	; 0x64
 8004d80:	2202      	movs	r2, #2
 8004d82:	4967      	ldr	r1, [pc, #412]	; (8004f20 <tempHumidity_Printout+0x2b8>)
 8004d84:	4864      	ldr	r0, [pc, #400]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004d86:	f006 f80f 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(TempHumidityDataBuffer[1][1], buff, 10);
 8004d8a:	4b64      	ldr	r3, [pc, #400]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004d8c:	799b      	ldrb	r3, [r3, #6]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	220a      	movs	r2, #10
 8004d96:	4619      	mov	r1, r3
 8004d98:	f006 fcb6 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004d9c:	f107 010c 	add.w	r1, r7, #12
 8004da0:	2364      	movs	r3, #100	; 0x64
 8004da2:	2202      	movs	r2, #2
 8004da4:	485c      	ldr	r0, [pc, #368]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004da6:	f005 ffff 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004daa:	2364      	movs	r3, #100	; 0x64
 8004dac:	2202      	movs	r2, #2
 8004dae:	495d      	ldr	r1, [pc, #372]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004db0:	4859      	ldr	r0, [pc, #356]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004db2:	f005 fff9 	bl	800ada8 <HAL_UART_Transmit>

		/* Temperature */
		HAL_UART_Transmit(&huart2,(uint8_t*)DHT11StatusBuffer[10], sizeof(DHT11StatusBuffer[10]), USART_TIMEOUT_VALUE);
 8004db6:	2364      	movs	r3, #100	; 0x64
 8004db8:	2228      	movs	r2, #40	; 0x28
 8004dba:	495d      	ldr	r1, [pc, #372]	; (8004f30 <tempHumidity_Printout+0x2c8>)
 8004dbc:	4856      	ldr	r0, [pc, #344]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004dbe:	f005 fff3 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(TempHumidityDataBuffer[1][2], buff, 10);
 8004dc2:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004dc4:	79db      	ldrb	r3, [r3, #7]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	220a      	movs	r2, #10
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f006 fc9a 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004dd4:	f107 010c 	add.w	r1, r7, #12
 8004dd8:	2364      	movs	r3, #100	; 0x64
 8004dda:	2202      	movs	r2, #2
 8004ddc:	484e      	ldr	r0, [pc, #312]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004dde:	f005 ffe3 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", sizeof("."), USART_TIMEOUT_VALUE);
 8004de2:	2364      	movs	r3, #100	; 0x64
 8004de4:	2202      	movs	r2, #2
 8004de6:	494e      	ldr	r1, [pc, #312]	; (8004f20 <tempHumidity_Printout+0x2b8>)
 8004de8:	484b      	ldr	r0, [pc, #300]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004dea:	f005 ffdd 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(TempHumidityDataBuffer[1][3], buff, 10);
 8004dee:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <tempHumidity_Printout+0x2b4>)
 8004df0:	7a1b      	ldrb	r3, [r3, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f107 030c 	add.w	r3, r7, #12
 8004df8:	220a      	movs	r2, #10
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f006 fc84 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004e00:	f107 010c 	add.w	r1, r7, #12
 8004e04:	2364      	movs	r3, #100	; 0x64
 8004e06:	2202      	movs	r2, #2
 8004e08:	4843      	ldr	r0, [pc, #268]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e0a:	f005 ffcd 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004e0e:	2364      	movs	r3, #100	; 0x64
 8004e10:	2202      	movs	r2, #2
 8004e12:	4944      	ldr	r1, [pc, #272]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004e14:	4840      	ldr	r0, [pc, #256]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e16:	f005 ffc7 	bl	800ada8 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004e1a:	2364      	movs	r3, #100	; 0x64
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	4941      	ldr	r1, [pc, #260]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004e20:	483d      	ldr	r0, [pc, #244]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e22:	f005 ffc1 	bl	800ada8 <HAL_UART_Transmit>
	}

	/* Print sensor average */
	if(sensorNumber == DHT11_PRINT_AVERAGE)
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	2bff      	cmp	r3, #255	; 0xff
 8004e2a:	d16f      	bne.n	8004f0c <tempHumidity_Printout+0x2a4>
	{
		/* Relative Humidity */
		HAL_UART_Transmit(&huart2,(uint8_t*)DHT11StatusBuffer[DHT11_RH_ASCII], sizeof(DHT11StatusBuffer[DHT11_RH_ASCII]), USART_TIMEOUT_VALUE);
 8004e2c:	2364      	movs	r3, #100	; 0x64
 8004e2e:	2228      	movs	r2, #40	; 0x28
 8004e30:	4940      	ldr	r1, [pc, #256]	; (8004f34 <tempHumidity_Printout+0x2cc>)
 8004e32:	4839      	ldr	r0, [pc, #228]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e34:	f005 ffb8 	bl	800ada8 <HAL_UART_Transmit>

		itoa(systemVariables.humidity_int, buff, 10);
 8004e38:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <tempHumidity_Printout+0x2d0>)
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f107 030c 	add.w	r3, r7, #12
 8004e42:	220a      	movs	r2, #10
 8004e44:	4619      	mov	r1, r3
 8004e46:	f006 fc5f 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004e4a:	f107 010c 	add.w	r1, r7, #12
 8004e4e:	2364      	movs	r3, #100	; 0x64
 8004e50:	2202      	movs	r2, #2
 8004e52:	4831      	ldr	r0, [pc, #196]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e54:	f005 ffa8 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", sizeof("."), USART_TIMEOUT_VALUE);
 8004e58:	2364      	movs	r3, #100	; 0x64
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4930      	ldr	r1, [pc, #192]	; (8004f20 <tempHumidity_Printout+0x2b8>)
 8004e5e:	482e      	ldr	r0, [pc, #184]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e60:	f005 ffa2 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(systemVariables.humidity_frac, buff, 10);
 8004e64:	4b34      	ldr	r3, [pc, #208]	; (8004f38 <tempHumidity_Printout+0x2d0>)
 8004e66:	791b      	ldrb	r3, [r3, #4]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	220a      	movs	r2, #10
 8004e70:	4619      	mov	r1, r3
 8004e72:	f006 fc49 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004e76:	f107 010c 	add.w	r1, r7, #12
 8004e7a:	2364      	movs	r3, #100	; 0x64
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	4826      	ldr	r0, [pc, #152]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e80:	f005 ff92 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004e84:	2364      	movs	r3, #100	; 0x64
 8004e86:	2202      	movs	r2, #2
 8004e88:	4926      	ldr	r1, [pc, #152]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004e8a:	4823      	ldr	r0, [pc, #140]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e8c:	f005 ff8c 	bl	800ada8 <HAL_UART_Transmit>

		/* Temperature */
		HAL_UART_Transmit(&huart2,(uint8_t*)DHT11StatusBuffer[DHT11_TEMPERATURE_ASCII], sizeof(DHT11StatusBuffer[DHT11_TEMPERATURE_ASCII]), USART_TIMEOUT_VALUE);
 8004e90:	2364      	movs	r3, #100	; 0x64
 8004e92:	2228      	movs	r2, #40	; 0x28
 8004e94:	4929      	ldr	r1, [pc, #164]	; (8004f3c <tempHumidity_Printout+0x2d4>)
 8004e96:	4820      	ldr	r0, [pc, #128]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004e98:	f005 ff86 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(systemVariables.temperature_int, buff, 10);
 8004e9c:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <tempHumidity_Printout+0x2d0>)
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f107 030c 	add.w	r3, r7, #12
 8004ea6:	220a      	movs	r2, #10
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f006 fc2d 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004eae:	f107 010c 	add.w	r1, r7, #12
 8004eb2:	2364      	movs	r3, #100	; 0x64
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	4818      	ldr	r0, [pc, #96]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004eb8:	f005 ff76 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", sizeof("."), USART_TIMEOUT_VALUE);
 8004ebc:	2364      	movs	r3, #100	; 0x64
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4917      	ldr	r1, [pc, #92]	; (8004f20 <tempHumidity_Printout+0x2b8>)
 8004ec2:	4815      	ldr	r0, [pc, #84]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004ec4:	f005 ff70 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(systemVariables.temperature_frac, buff, 10);
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <tempHumidity_Printout+0x2d0>)
 8004eca:	789b      	ldrb	r3, [r3, #2]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f006 fc17 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 8004eda:	f107 010c 	add.w	r1, r7, #12
 8004ede:	2364      	movs	r3, #100	; 0x64
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	480d      	ldr	r0, [pc, #52]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004ee4:	f005 ff60 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004ee8:	2364      	movs	r3, #100	; 0x64
 8004eea:	2202      	movs	r2, #2
 8004eec:	490d      	ldr	r1, [pc, #52]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004eee:	480a      	ldr	r0, [pc, #40]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004ef0:	f005 ff5a 	bl	800ada8 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart2, (uint8_t*)"-----------------", sizeof("-----------------"), USART_TIMEOUT_VALUE);
 8004ef4:	2364      	movs	r3, #100	; 0x64
 8004ef6:	2212      	movs	r2, #18
 8004ef8:	4911      	ldr	r1, [pc, #68]	; (8004f40 <tempHumidity_Printout+0x2d8>)
 8004efa:	4807      	ldr	r0, [pc, #28]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004efc:	f005 ff54 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 8004f00:	2364      	movs	r3, #100	; 0x64
 8004f02:	2202      	movs	r2, #2
 8004f04:	4907      	ldr	r1, [pc, #28]	; (8004f24 <tempHumidity_Printout+0x2bc>)
 8004f06:	4804      	ldr	r0, [pc, #16]	; (8004f18 <tempHumidity_Printout+0x2b0>)
 8004f08:	f005 ff4e 	bl	800ada8 <HAL_UART_Transmit>

	}

}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000264 	.word	0x20000264
 8004f18:	20000d6c 	.word	0x20000d6c
 8004f1c:	20000c90 	.word	0x20000c90
 8004f20:	0800c29c 	.word	0x0800c29c
 8004f24:	0800c2a0 	.word	0x0800c2a0
 8004f28:	2000023c 	.word	0x2000023c
 8004f2c:	200002b4 	.word	0x200002b4
 8004f30:	2000028c 	.word	0x2000028c
 8004f34:	20000214 	.word	0x20000214
 8004f38:	20000ea4 	.word	0x20000ea4
 8004f3c:	200001ec 	.word	0x200001ec
 8004f40:	0800c2a4 	.word	0x0800c2a4

08004f44 <tempHumidity_CheckSum_Validate>:
  * @param sensorNumber
  * @retval None
  */

static int tempHumidity_CheckSum_Validate(uint8_t sensorNumber)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_CheckSum = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73bb      	strb	r3, [r7, #14]
	uint8_t sensorBufferNumber = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]

	if(sensorNumber == DHT11_SENSOR_1)
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <tempHumidity_CheckSum_Validate+0x1e>
	{
		sensorBufferNumber = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e004      	b.n	8004f6c <tempHumidity_CheckSum_Validate+0x28>
	}
	else if(sensorNumber == DHT11_SENSOR_2)
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d101      	bne.n	8004f6c <tempHumidity_CheckSum_Validate+0x28>
	{
		sensorBufferNumber = 1;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
	}

	/* Check sum = RH_Integral+ RH_Fractional + Temp_Integral + Temp_Fractional */
	temp_CheckSum = TempHumidityDataBuffer[sensorBufferNumber][0] + TempHumidityDataBuffer[sensorBufferNumber][1] +
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	4922      	ldr	r1, [pc, #136]	; (8004ff8 <tempHumidity_CheckSum_Validate+0xb4>)
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	440b      	add	r3, r1
 8004f78:	7819      	ldrb	r1, [r3, #0]
 8004f7a:	7bfa      	ldrb	r2, [r7, #15]
 8004f7c:	481e      	ldr	r0, [pc, #120]	; (8004ff8 <tempHumidity_CheckSum_Validate+0xb4>)
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	4403      	add	r3, r0
 8004f86:	3301      	adds	r3, #1
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	440b      	add	r3, r1
 8004f8c:	b2d9      	uxtb	r1, r3
					TempHumidityDataBuffer[sensorBufferNumber][2] + TempHumidityDataBuffer[sensorBufferNumber][3];
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	4819      	ldr	r0, [pc, #100]	; (8004ff8 <tempHumidity_CheckSum_Validate+0xb4>)
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	4403      	add	r3, r0
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	781b      	ldrb	r3, [r3, #0]
	temp_CheckSum = TempHumidityDataBuffer[sensorBufferNumber][0] + TempHumidityDataBuffer[sensorBufferNumber][1] +
 8004f9e:	440b      	add	r3, r1
 8004fa0:	b2d9      	uxtb	r1, r3
					TempHumidityDataBuffer[sensorBufferNumber][2] + TempHumidityDataBuffer[sensorBufferNumber][3];
 8004fa2:	7bfa      	ldrb	r2, [r7, #15]
 8004fa4:	4814      	ldr	r0, [pc, #80]	; (8004ff8 <tempHumidity_CheckSum_Validate+0xb4>)
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	4403      	add	r3, r0
 8004fae:	3303      	adds	r3, #3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
	temp_CheckSum = TempHumidityDataBuffer[sensorBufferNumber][0] + TempHumidityDataBuffer[sensorBufferNumber][1] +
 8004fb2:	440b      	add	r3, r1
 8004fb4:	73bb      	strb	r3, [r7, #14]


	if((temp_CheckSum == TempHumidityDataBuffer[sensorBufferNumber][4]) && (TempHumidityDataBuffer[sensorBufferNumber][4] != 0))
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	490f      	ldr	r1, [pc, #60]	; (8004ff8 <tempHumidity_CheckSum_Validate+0xb4>)
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	7bba      	ldrb	r2, [r7, #14]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d10b      	bne.n	8004fe4 <tempHumidity_CheckSum_Validate+0xa0>
 8004fcc:	7bfa      	ldrb	r2, [r7, #15]
 8004fce:	490a      	ldr	r1, [pc, #40]	; (8004ff8 <tempHumidity_CheckSum_Validate+0xb4>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3304      	adds	r3, #4
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <tempHumidity_CheckSum_Validate+0xa0>
	{
		return 1;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e005      	b.n	8004ff0 <tempHumidity_CheckSum_Validate+0xac>
	}
	else
	{
		#ifdef debug
			tempHumidPrintErrorMessage(DHT11_CHKSUM_ERROR, sensorNumber);
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	2004      	movs	r0, #4
 8004fea:	f000 f83d 	bl	8005068 <tempHumidPrintErrorMessage>
		#endif

		return 0;
 8004fee:	2300      	movs	r3, #0
	}

}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000c90 	.word	0x20000c90

08004ffc <tempHumidity_Average>:
  * @brief Calculate average of sensors
  * @param sensorNumber
  * @retval None
  */
static void tempHumidity_Average(uint8_t sensorNumber)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
	/* Average each reading separately */

	TempHumidityDataAverage[0] = (TempHumidityDataBuffer[0][0] + TempHumidityDataBuffer[1][0])/DHT11_NUMBER_OF_SENSORS;
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <tempHumidity_Average+0x64>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <tempHumidity_Average+0x64>)
 800500e:	795b      	ldrb	r3, [r3, #5]
 8005010:	4413      	add	r3, r2
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <tempHumidity_Average+0x68>)
 8005018:	701a      	strb	r2, [r3, #0]
	TempHumidityDataAverage[1] = (TempHumidityDataBuffer[0][1] + TempHumidityDataBuffer[1][1])/DHT11_NUMBER_OF_SENSORS;
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <tempHumidity_Average+0x64>)
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	461a      	mov	r2, r3
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <tempHumidity_Average+0x64>)
 8005022:	799b      	ldrb	r3, [r3, #6]
 8005024:	4413      	add	r3, r2
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <tempHumidity_Average+0x68>)
 800502c:	705a      	strb	r2, [r3, #1]
	TempHumidityDataAverage[2] = (TempHumidityDataBuffer[0][2] + TempHumidityDataBuffer[1][2])/DHT11_NUMBER_OF_SENSORS;
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <tempHumidity_Average+0x64>)
 8005030:	789b      	ldrb	r3, [r3, #2]
 8005032:	461a      	mov	r2, r3
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <tempHumidity_Average+0x64>)
 8005036:	79db      	ldrb	r3, [r3, #7]
 8005038:	4413      	add	r3, r2
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <tempHumidity_Average+0x68>)
 8005040:	709a      	strb	r2, [r3, #2]
	TempHumidityDataAverage[3] = (TempHumidityDataBuffer[0][3] + TempHumidityDataBuffer[1][3])/DHT11_NUMBER_OF_SENSORS;
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <tempHumidity_Average+0x64>)
 8005044:	78db      	ldrb	r3, [r3, #3]
 8005046:	461a      	mov	r2, r3
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <tempHumidity_Average+0x64>)
 800504a:	7a1b      	ldrb	r3, [r3, #8]
 800504c:	4413      	add	r3, r2
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4b04      	ldr	r3, [pc, #16]	; (8005064 <tempHumidity_Average+0x68>)
 8005054:	70da      	strb	r2, [r3, #3]
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	20000c90 	.word	0x20000c90
 8005064:	20000c9c 	.word	0x20000c9c

08005068 <tempHumidPrintErrorMessage>:
  * @param Current Message Flag.
  * @retval None
  */

static void tempHumidPrintErrorMessage(uint8_t newErrorMessage, uint8_t sensorNumber)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	460a      	mov	r2, r1
 8005072:	71fb      	strb	r3, [r7, #7]
 8005074:	4613      	mov	r3, r2
 8005076:	71bb      	strb	r3, [r7, #6]
	uint8_t sensorBufferNumber = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
	char buff[2];

	if(sensorNumber == DHT11_SENSOR_1)
 800507c:	79bb      	ldrb	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <tempHumidPrintErrorMessage+0x20>
	{
		sensorBufferNumber = 1;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e004      	b.n	8005092 <tempHumidPrintErrorMessage+0x2a>
	}
	else if(sensorNumber == DHT11_SENSOR_2)
 8005088:	79bb      	ldrb	r3, [r7, #6]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d101      	bne.n	8005092 <tempHumidPrintErrorMessage+0x2a>
	{
		sensorBufferNumber = 2;
 800508e:	2302      	movs	r3, #2
 8005090:	73fb      	strb	r3, [r7, #15]
	}

	if(errorMessage != newErrorMessage)
 8005092:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <tempHumidPrintErrorMessage+0x90>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	79fa      	ldrb	r2, [r7, #7]
 8005098:	429a      	cmp	r2, r3
 800509a:	d028      	beq.n	80050ee <tempHumidPrintErrorMessage+0x86>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)DHT11ErrorStatusBuffer[newErrorMessage], sizeof(DHT11ErrorStatusBuffer[newErrorMessage]), 200);
 800509c:	79fa      	ldrb	r2, [r7, #7]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4a15      	ldr	r2, [pc, #84]	; (80050fc <tempHumidPrintErrorMessage+0x94>)
 80050a8:	1899      	adds	r1, r3, r2
 80050aa:	23c8      	movs	r3, #200	; 0xc8
 80050ac:	2228      	movs	r2, #40	; 0x28
 80050ae:	4814      	ldr	r0, [pc, #80]	; (8005100 <tempHumidPrintErrorMessage+0x98>)
 80050b0:	f005 fe7a 	bl	800ada8 <HAL_UART_Transmit>

		/* Convert to ASCI */
		itoa(sensorBufferNumber, buff, 10);
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	f107 010c 	add.w	r1, r7, #12
 80050ba:	220a      	movs	r2, #10
 80050bc:	4618      	mov	r0, r3
 80050be:	f006 fb23 	bl	800b708 <itoa>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Sensor ", sizeof("Sensor "), USART_TIMEOUT_VALUE);
 80050c2:	2364      	movs	r3, #100	; 0x64
 80050c4:	2208      	movs	r2, #8
 80050c6:	490f      	ldr	r1, [pc, #60]	; (8005104 <tempHumidPrintErrorMessage+0x9c>)
 80050c8:	480d      	ldr	r0, [pc, #52]	; (8005100 <tempHumidPrintErrorMessage+0x98>)
 80050ca:	f005 fe6d 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,(uint8_t*)buff, sizeof(buff), USART_TIMEOUT_VALUE);
 80050ce:	f107 010c 	add.w	r1, r7, #12
 80050d2:	2364      	movs	r3, #100	; 0x64
 80050d4:	2202      	movs	r2, #2
 80050d6:	480a      	ldr	r0, [pc, #40]	; (8005100 <tempHumidPrintErrorMessage+0x98>)
 80050d8:	f005 fe66 	bl	800ada8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), USART_TIMEOUT_VALUE);
 80050dc:	2364      	movs	r3, #100	; 0x64
 80050de:	2202      	movs	r2, #2
 80050e0:	4909      	ldr	r1, [pc, #36]	; (8005108 <tempHumidPrintErrorMessage+0xa0>)
 80050e2:	4807      	ldr	r0, [pc, #28]	; (8005100 <tempHumidPrintErrorMessage+0x98>)
 80050e4:	f005 fe60 	bl	800ada8 <HAL_UART_Transmit>
		errorMessage = newErrorMessage;
 80050e8:	4a03      	ldr	r2, [pc, #12]	; (80050f8 <tempHumidPrintErrorMessage+0x90>)
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	7013      	strb	r3, [r2, #0]
	}
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000a99 	.word	0x20000a99
 80050fc:	20000304 	.word	0x20000304
 8005100:	20000d6c 	.word	0x20000d6c
 8005104:	0800c2b8 	.word	0x0800c2b8
 8005108:	0800c2a0 	.word	0x0800c2a0

0800510c <tempHumidity_Timer_Start>:
  * @brief Timer 2 initialisation
  * @param None
  * @retval None
  */
void tempHumidity_Timer_Start(uint16_t timerPeriod, uint8_t sensorNumber)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	460a      	mov	r2, r1
 8005116:	80fb      	strh	r3, [r7, #6]
 8005118:	4613      	mov	r3, r2
 800511a:	717b      	strb	r3, [r7, #5]

	/* Calculate ARR value using value for 1us */
	uint16_t arrValue = timerPeriod * ARR_1uS_VALUE;
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	461a      	mov	r2, r3
 8005120:	0052      	lsls	r2, r2, #1
 8005122:	4413      	add	r3, r2
 8005124:	81fb      	strh	r3, [r7, #14]

	/* Set global sensor value */
	sensorNumberConfig = sensorNumber;
 8005126:	4a24      	ldr	r2, [pc, #144]	; (80051b8 <tempHumidity_Timer_Start+0xac>)
 8005128:	797b      	ldrb	r3, [r7, #5]
 800512a:	7013      	strb	r3, [r2, #0]

	/* Initialise Timer2 for output capture */
	tim2OC.Instance = TIM2;
 800512c:	4b23      	ldr	r3, [pc, #140]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 800512e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005132:	601a      	str	r2, [r3, #0]
	tim2OC.Init.Prescaler =	uS_TIMER_PRESCALER_VALUE;
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 8005136:	220f      	movs	r2, #15
 8005138:	605a      	str	r2, [r3, #4]
	tim2OC.Init.CounterMode = TIM_COUNTERMODE_UP;
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 800513c:	2200      	movs	r2, #0
 800513e:	609a      	str	r2, [r3, #8]
	tim2OC.Init.Period = arrValue;
 8005140:	89fb      	ldrh	r3, [r7, #14]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 8005144:	60d3      	str	r3, [r2, #12]
	tim2OC.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 8005148:	2200      	movs	r2, #0
 800514a:	611a      	str	r2, [r3, #16]
	tim2OC.Init.RepetitionCounter = 0x00;
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 800514e:	2200      	movs	r2, #0
 8005150:	615a      	str	r2, [r3, #20]
	tim2OC.Init.AutoReloadPreload =	TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 8005154:	2200      	movs	r2, #0
 8005156:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_OC_Init(&tim2OC) != HAL_OK)
 8005158:	4818      	ldr	r0, [pc, #96]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 800515a:	f004 faef 	bl	800973c <HAL_TIM_OC_Init>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <tempHumidity_Timer_Start+0x5c>
	{
		Error_Handler();
 8005164:	f000 fb16 	bl	8005794 <Error_Handler>
	}

	tim2OCinit.OCMode = TIM_OCMODE_INACTIVE;
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <tempHumidity_Timer_Start+0xb4>)
 800516a:	2220      	movs	r2, #32
 800516c:	601a      	str	r2, [r3, #0]
	tim2OCinit.Pulse = 0;
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <tempHumidity_Timer_Start+0xb4>)
 8005170:	2200      	movs	r2, #0
 8005172:	605a      	str	r2, [r3, #4]
	tim2OCinit.OCPolarity =  TIM_OCPOLARITY_HIGH;	//This bit must be cleared to enable capture compare in output mode.
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <tempHumidity_Timer_Start+0xb4>)
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_OC_ConfigChannel(&tim2OC, &tim2OCinit, sensorNumber) != HAL_OK)
 800517a:	797b      	ldrb	r3, [r7, #5]
 800517c:	461a      	mov	r2, r3
 800517e:	4910      	ldr	r1, [pc, #64]	; (80051c0 <tempHumidity_Timer_Start+0xb4>)
 8005180:	480e      	ldr	r0, [pc, #56]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 8005182:	f005 f82d 	bl	800a1e0 <HAL_TIM_OC_ConfigChannel>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <tempHumidity_Timer_Start+0x84>
	{
		Error_Handler();
 800518c:	f000 fb02 	bl	8005794 <Error_Handler>
	}

	/* Start Timer 2 with interrupt */

	if(HAL_TIM_OC_Start_IT(&tim2OC, sensorNumber) != HAL_OK)
 8005190:	797b      	ldrb	r3, [r7, #5]
 8005192:	4619      	mov	r1, r3
 8005194:	4809      	ldr	r0, [pc, #36]	; (80051bc <tempHumidity_Timer_Start+0xb0>)
 8005196:	f004 fb85 	bl	80098a4 <HAL_TIM_OC_Start_IT>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <tempHumidity_Timer_Start+0x98>
	{
		Error_Handler();
 80051a0:	f000 faf8 	bl	8005794 <Error_Handler>
	}

	/* Set flag after first interrupt */
	timerOCStartFlag = TRUE;
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <tempHumidity_Timer_Start+0xb8>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
	timerICStartFlag = FALSE;
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <tempHumidity_Timer_Start+0xbc>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]



}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000d6b 	.word	0x20000d6b
 80051bc:	20000ca4 	.word	0x20000ca4
 80051c0:	20000d3c 	.word	0x20000d3c
 80051c4:	20000d68 	.word	0x20000d68
 80051c8:	20000d69 	.word	0x20000d69

080051cc <tempHumidity_Timer_Read_Setup>:
  * @param None
  * @retval None
  */

static void tempHumidity_Timer_Read_Setup(uint8_t sensorNumber)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
	/* Setup Timer 2 for Input Capture */

	tim2IC.Instance = TIM2;
 80051d6:	4b21      	ldr	r3, [pc, #132]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 80051d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051dc:	601a      	str	r2, [r3, #0]
	tim2IC.Init.Prescaler =	uS_TIMER_PRESCALER_VALUE;
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 80051e0:	220f      	movs	r2, #15
 80051e2:	605a      	str	r2, [r3, #4]
	tim2IC.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
	tim2IC.Init.Period = 0xFFFF; //Full overflow
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 80051ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f0:	60da      	str	r2, [r3, #12]
	tim2IC.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051f2:	4b1a      	ldr	r3, [pc, #104]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	611a      	str	r2, [r3, #16]
	tim2IC.Init.RepetitionCounter = 0x00;
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	615a      	str	r2, [r3, #20]
	tim2IC.Init.AutoReloadPreload =	TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 8005200:	2200      	movs	r2, #0
 8005202:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_IC_Init(&tim2IC) != HAL_OK)
 8005204:	4815      	ldr	r0, [pc, #84]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 8005206:	f004 fc79 	bl	8009afc <HAL_TIM_IC_Init>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <tempHumidity_Timer_Read_Setup+0x48>
	{
		Error_Handler();
 8005210:	f000 fac0 	bl	8005794 <Error_Handler>
	}

	tim2ICinit.ICPolarity = TIM_ICPOLARITY_BOTHEDGE;
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <tempHumidity_Timer_Read_Setup+0x94>)
 8005216:	220a      	movs	r2, #10
 8005218:	601a      	str	r2, [r3, #0]
	tim2ICinit.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <tempHumidity_Timer_Read_Setup+0x94>)
 800521c:	2201      	movs	r2, #1
 800521e:	605a      	str	r2, [r3, #4]
	tim2ICinit.ICPrescaler =  TIM_ICPSC_DIV1;
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <tempHumidity_Timer_Read_Setup+0x94>)
 8005222:	2200      	movs	r2, #0
 8005224:	609a      	str	r2, [r3, #8]
	tim2ICinit.ICFilter =  0x00;
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <tempHumidity_Timer_Read_Setup+0x94>)
 8005228:	2200      	movs	r2, #0
 800522a:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_IC_ConfigChannel(&tim2IC, &tim2ICinit, sensorNumber) != HAL_OK)
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	461a      	mov	r2, r3
 8005230:	490b      	ldr	r1, [pc, #44]	; (8005260 <tempHumidity_Timer_Read_Setup+0x94>)
 8005232:	480a      	ldr	r0, [pc, #40]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 8005234:	f005 f84e 	bl	800a2d4 <HAL_TIM_IC_ConfigChannel>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <tempHumidity_Timer_Read_Setup+0x76>
	{
		Error_Handler();
 800523e:	f000 faa9 	bl	8005794 <Error_Handler>
	}

	/* Start the Input Compare Timer */
	HAL_TIM_IC_Start_IT(&tim2IC, sensorNumber);
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	4619      	mov	r1, r3
 8005246:	4805      	ldr	r0, [pc, #20]	; (800525c <tempHumidity_Timer_Read_Setup+0x90>)
 8005248:	f004 fd7c 	bl	8009d44 <HAL_TIM_IC_Start_IT>

	/* Set flag after first interrupt */
	timerICStartFlag = TRUE;
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <tempHumidity_Timer_Read_Setup+0x98>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000cf0 	.word	0x20000cf0
 8005260:	20000d58 	.word	0x20000d58
 8005264:	20000d69 	.word	0x20000d69

08005268 <tempHumidity_EndTimers>:
  * @param None
  * @retval None
  */

void tempHumidity_EndTimers()
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
	/* De-initialise timers */
	HAL_TIM_OC_DeInit(&tim2OC);
 800526c:	480a      	ldr	r0, [pc, #40]	; (8005298 <tempHumidity_EndTimers+0x30>)
 800526e:	f004 fabc 	bl	80097ea <HAL_TIM_OC_DeInit>
	HAL_TIM_IC_DeInit(&tim2IC);
 8005272:	480a      	ldr	r0, [pc, #40]	; (800529c <tempHumidity_EndTimers+0x34>)
 8005274:	f004 fc99 	bl	8009baa <HAL_TIM_IC_DeInit>

	/* Reset local flags */
	timerOCStartFlag = FALSE;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <tempHumidity_EndTimers+0x38>)
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
	timerICStartFlag = FALSE;
 800527e:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <tempHumidity_EndTimers+0x3c>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
	inputCaptureCount = 0;
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <tempHumidity_EndTimers+0x40>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0x00;
 800528a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800528e:	2200      	movs	r2, #0
 8005290:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000ca4 	.word	0x20000ca4
 800529c:	20000cf0 	.word	0x20000cf0
 80052a0:	20000d68 	.word	0x20000d68
 80052a4:	20000d69 	.word	0x20000d69
 80052a8:	20000d6a 	.word	0x20000d6a

080052ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @param None
  * @retval None
  */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

	/* This allows us to ignore the fist interrupt caused by enabling the interrupt */
	if(timerOCStartFlag)
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
	{
		/* Deactivate and De-initialise the timer */
		HAL_TIM_OC_DeInit(&tim2OC);
 80052bc:	4808      	ldr	r0, [pc, #32]	; (80052e0 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80052be:	f004 fa94 	bl	80097ea <HAL_TIM_OC_DeInit>

		timerOCStartFlag = FALSE;
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]

		/* If status is now read, set up Timer 2 for Input Capture */
		tempHumidity_Timer_Read_Setup(sensorNumberConfig);
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff7d 	bl	80051cc <tempHumidity_Timer_Read_Setup>
	}
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000d68 	.word	0x20000d68
 80052e0:	20000ca4 	.word	0x20000ca4
 80052e4:	20000d6b 	.word	0x20000d6b

080052e8 <HAL_TIM_IC_CaptureCallback>:
  * @param None
  * @retval None
  */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	/* This allows us to ignore the fist interrupt caused by enabling the interrupt */
	if(timerICStartFlag)
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_TIM_IC_CaptureCallback+0x84>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d034      	beq.n	8005362 <HAL_TIM_IC_CaptureCallback+0x7a>
	{
		/* Stop Input Compare Timer to avoid any more interrupts */
		HAL_TIM_IC_Stop(&tim2IC, sensorNumberConfig);
 80052f8:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <HAL_TIM_IC_CaptureCallback+0x88>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	4619      	mov	r1, r3
 80052fe:	481d      	ldr	r0, [pc, #116]	; (8005374 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8005300:	f004 fcaf 	bl	8009c62 <HAL_TIM_IC_Stop>

		/* Reset counter so that each value starts from 0*/
		TIM2->CNT = 0x00;
 8005304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005308:	2200      	movs	r2, #0
 800530a:	625a      	str	r2, [r3, #36]	; 0x24


		/* Check if we have reached the expected number of transmissions */
		if(inputCaptureCount < DHT11_EXPECTED_TRANSITIONS)
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_TIM_IC_CaptureCallback+0x90>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b52      	cmp	r3, #82	; 0x52
 8005312:	d81a      	bhi.n	800534a <HAL_TIM_IC_CaptureCallback+0x62>
		{
			/* Get period of last pulse */
			DHT11_DataBufferInputCapture[inputCaptureCount] = HAL_TIM_ReadCapturedValue(&tim2IC, sensorNumberConfig);
 8005314:	4b16      	ldr	r3, [pc, #88]	; (8005370 <HAL_TIM_IC_CaptureCallback+0x88>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <HAL_TIM_IC_CaptureCallback+0x90>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	461c      	mov	r4, r3
 8005320:	4611      	mov	r1, r2
 8005322:	4814      	ldr	r0, [pc, #80]	; (8005374 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8005324:	f005 f872 	bl	800a40c <HAL_TIM_ReadCapturedValue>
 8005328:	4603      	mov	r3, r0
 800532a:	4a14      	ldr	r2, [pc, #80]	; (800537c <HAL_TIM_IC_CaptureCallback+0x94>)
 800532c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			inputCaptureCount++;
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_TIM_IC_CaptureCallback+0x90>)
 800533a:	701a      	strb	r2, [r3, #0]

			/* Start the Input Compare Timer again */
			HAL_TIM_IC_Start_IT(&tim2IC, sensorNumberConfig);
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <HAL_TIM_IC_CaptureCallback+0x88>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	4619      	mov	r1, r3
 8005342:	480c      	ldr	r0, [pc, #48]	; (8005374 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8005344:	f004 fcfe 	bl	8009d44 <HAL_TIM_IC_Start_IT>

			/* De-initialise timer for use again later */
			HAL_TIM_IC_DeInit(&tim2IC);
		}
	}
}
 8005348:	e00b      	b.n	8005362 <HAL_TIM_IC_CaptureCallback+0x7a>
			flags.tempHumidICCompleteFlag = TRUE;
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_TIM_IC_CaptureCallback+0x98>)
 800534c:	7813      	ldrb	r3, [r2, #0]
 800534e:	2101      	movs	r1, #1
 8005350:	f361 0383 	bfi	r3, r1, #2, #2
 8005354:	7013      	strb	r3, [r2, #0]
			inputCaptureCount = 0;
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_DeInit(&tim2IC);
 800535c:	4805      	ldr	r0, [pc, #20]	; (8005374 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800535e:	f004 fc24 	bl	8009baa <HAL_TIM_IC_DeInit>
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}
 800536a:	bf00      	nop
 800536c:	20000d69 	.word	0x20000d69
 8005370:	20000d6b 	.word	0x20000d6b
 8005374:	20000cf0 	.word	0x20000cf0
 8005378:	20000d6a 	.word	0x20000d6a
 800537c:	20000aa4 	.word	0x20000aa4
 8005380:	20000ea0 	.word	0x20000ea0

08005384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <MX_USART2_UART_Init+0x58>)
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <MX_USART2_UART_Init+0x5c>)
 800538c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800538e:	4b13      	ldr	r3, [pc, #76]	; (80053dc <MX_USART2_UART_Init+0x58>)
 8005390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <MX_USART2_UART_Init+0x58>)
 8005398:	2200      	movs	r2, #0
 800539a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <MX_USART2_UART_Init+0x58>)
 800539e:	2200      	movs	r2, #0
 80053a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053aa:	220c      	movs	r2, #12
 80053ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053bc:	2200      	movs	r2, #0
 80053be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <MX_USART2_UART_Init+0x58>)
 80053c8:	f005 fca0 	bl	800ad0c <HAL_UART_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80053d2:	f000 f9df 	bl	8005794 <Error_Handler>
  }

}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000d6c 	.word	0x20000d6c
 80053e0:	40004400 	.word	0x40004400

080053e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053e8:	f000 fca3 	bl	8005d32 <HAL_Init>
  //HAL_SuspendTick();

  /* Delay to allow for all power lines to stabilise */
  HAL_Delay(2000);
 80053ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80053f0:	f000 fd10 	bl	8005e14 <HAL_Delay>

  /* Configure the system clock */
  SystemClock_Config();
 80053f4:	f7fe f936 	bl	8003664 <SystemClock_Config>

  /* Initialise all configured peripherals */
  MX_GPIO_Init();
 80053f8:	f7fe f988 	bl	800370c <MX_GPIO_Init>
  I2C_Setup();
 80053fc:	f000 f968 	bl	80056d0 <I2C_Setup>
  SPI_Setup();
 8005400:	f000 f98a 	bl	8005718 <SPI_Setup>
  PowerControl_Init();
 8005404:	f7fe fc2a 	bl	8003c5c <PowerControl_Init>
  MX_USART2_UART_Init();
 8005408:	f7ff ffbc 	bl	8005384 <MX_USART2_UART_Init>
  TempHumid_Init();
 800540c:	f7ff f95e 	bl	80046cc <TempHumid_Init>
  RTC_Setup();
 8005410:	f7fe fc84 	bl	8003d1c <RTC_Setup>
  RTC_GetTimeDate();
 8005414:	f7fe fcf8 	bl	8003e08 <RTC_GetTimeDate>
  LCD_I2C_Init();
 8005418:	f7fe f9ea 	bl	80037f0 <LCD_I2C_Init>
  MX_FATFS_Init();
 800541c:	f7fb f8b2 	bl	8000584 <MX_FATFS_Init>
  SD_Control_Init();
 8005420:	f7fe ff62 	bl	80042e8 <SD_Control_Init>


  /* Initialise flags */
  flags.tempHumidDataReadyFlag = 0;
 8005424:	4a21      	ldr	r2, [pc, #132]	; (80054ac <main+0xc8>)
 8005426:	7813      	ldrb	r3, [r2, #0]
 8005428:	f36f 0301 	bfc	r3, #0, #2
 800542c:	7013      	strb	r3, [r2, #0]
  flags.dateTimeAlarmFlag = 0;
 800542e:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <main+0xc8>)
 8005430:	7813      	ldrb	r3, [r2, #0]
 8005432:	f36f 1305 	bfc	r3, #4, #2
 8005436:	7013      	strb	r3, [r2, #0]
  /* Infinite loop */
  while(1)
  {
	 /* Wait for elapsed sensor time */

	if(flags.LCDUpdateFlag)
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <main+0xc8>)
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d012      	beq.n	800546c <main+0x88>
	{
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		RTC_GetTimeDate();
 8005446:	f7fe fcdf 	bl	8003e08 <RTC_GetTimeDate>
		update_LCD();
 800544a:	f000 f847 	bl	80054dc <update_LCD>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005454:	f000 ffc3 	bl	80063de <HAL_GPIO_TogglePin>
		/* Reset flags */
		flags.tempHumidDataReadyFlag = 0;
 8005458:	4a14      	ldr	r2, [pc, #80]	; (80054ac <main+0xc8>)
 800545a:	7813      	ldrb	r3, [r2, #0]
 800545c:	f36f 0301 	bfc	r3, #0, #2
 8005460:	7013      	strb	r3, [r2, #0]
		flags.LCDUpdateFlag = 0;
 8005462:	4a12      	ldr	r2, [pc, #72]	; (80054ac <main+0xc8>)
 8005464:	7853      	ldrb	r3, [r2, #1]
 8005466:	f36f 0301 	bfc	r3, #0, #2
 800546a:	7053      	strb	r3, [r2, #1]
	}

	if(flags.sensorUpdateFlag)
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <main+0xc8>)
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <main+0xa4>
	{
		update_Sensors();
 800547a:	f000 f819 	bl	80054b0 <update_Sensors>

		/* Reset flags */
		flags.sensorUpdateFlag = 0;
 800547e:	4a0b      	ldr	r2, [pc, #44]	; (80054ac <main+0xc8>)
 8005480:	7853      	ldrb	r3, [r2, #1]
 8005482:	f36f 0383 	bfc	r3, #2, #2
 8005486:	7053      	strb	r3, [r2, #1]
	}

	if(flags.modeUpdateFlag)
 8005488:	4b08      	ldr	r3, [pc, #32]	; (80054ac <main+0xc8>)
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0d0      	beq.n	8005438 <main+0x54>
	{
		GrowTent_Mode();
 8005496:	f7fe faa7 	bl	80039e8 <GrowTent_Mode>
		SD_Control_Write();
 800549a:	f7ff f80b 	bl	80044b4 <SD_Control_Write>

		/* Reset flags */
		flags.modeUpdateFlag = 0;
 800549e:	4a03      	ldr	r2, [pc, #12]	; (80054ac <main+0xc8>)
 80054a0:	7853      	ldrb	r3, [r2, #1]
 80054a2:	f36f 1305 	bfc	r3, #4, #2
 80054a6:	7053      	strb	r3, [r2, #1]
	if(flags.LCDUpdateFlag)
 80054a8:	e7c6      	b.n	8005438 <main+0x54>
 80054aa:	bf00      	nop
 80054ac:	20000ea0 	.word	0x20000ea0

080054b0 <update_Sensors>:
/**
  * @brief  This function is used to update all sensors
  * @retval None
  */
static void update_Sensors(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
	while(flags.tempHumidDataReadyFlag == 0)
 80054b4:	e002      	b.n	80054bc <update_Sensors+0xc>
	{
		 TempHumid_Read(DHT11_SENSOR_1);
 80054b6:	2000      	movs	r0, #0
 80054b8:	f7ff f942 	bl	8004740 <TempHumid_Read>
	while(flags.tempHumidDataReadyFlag == 0)
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <update_Sensors+0x28>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f5      	beq.n	80054b6 <update_Sensors+0x6>
	}

	 /* Reset flags */
	 flags.tempHumidDataReadyFlag = 0;
 80054ca:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <update_Sensors+0x28>)
 80054cc:	7813      	ldrb	r3, [r2, #0]
 80054ce:	f36f 0301 	bfc	r3, #0, #2
 80054d2:	7013      	strb	r3, [r2, #0]
/*
	while(flags.tempHumidDataReadyFlag == 0)
	{
		 TempHumid_Read(DHT11_SENSOR_2);
	}*/
}
 80054d4:	bf00      	nop
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000ea0 	.word	0x20000ea0

080054dc <update_LCD>:
/**
  * @brief  This function is used to format the values and print to the LCD display.
  * @retval None
  */
static void update_LCD(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
	/* Array of text to mix with integers */
	unsigned char characterASCII[6] = {"T:.H0 "};
 80054e2:	4a6e      	ldr	r2, [pc, #440]	; (800569c <update_LCD+0x1c0>)
 80054e4:	f107 0318 	add.w	r3, r7, #24
 80054e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054ec:	6018      	str	r0, [r3, #0]
 80054ee:	3304      	adds	r3, #4
 80054f0:	8019      	strh	r1, [r3, #0]
	unsigned char dayASCII[] = {"Day"};
 80054f2:	4b6b      	ldr	r3, [pc, #428]	; (80056a0 <update_LCD+0x1c4>)
 80054f4:	617b      	str	r3, [r7, #20]
	unsigned char nightASCII[] = {"Night"};
 80054f6:	4a6b      	ldr	r2, [pc, #428]	; (80056a4 <update_LCD+0x1c8>)
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005500:	6018      	str	r0, [r3, #0]
 8005502:	3304      	adds	r3, #4
 8005504:	8019      	strh	r1, [r3, #0]
	unsigned char errorASCII[] = {"Error"};
 8005506:	4a68      	ldr	r2, [pc, #416]	; (80056a8 <update_LCD+0x1cc>)
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800550e:	6018      	str	r0, [r3, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	8019      	strh	r1, [r3, #0]

	/* First, clear the display. Cursor will return home */

	/* Temperature */
	LCD_SetCursorPosition(0x00, 0x00);
 8005514:	2100      	movs	r1, #0
 8005516:	2000      	movs	r0, #0
 8005518:	f7fe fa26 	bl	8003968 <LCD_SetCursorPosition>
	LCD_WriteAlphaLCD((uint8_t*)&characterASCII[0], sizeof(characterASCII[0]));
 800551c:	f107 0318 	add.w	r3, r7, #24
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe f99e 	bl	8003864 <LCD_WriteAlphaLCD>
	LCD_WriteAlphaLCD((uint8_t*)&characterASCII[1], sizeof(characterASCII[1]));
 8005528:	f107 0318 	add.w	r3, r7, #24
 800552c:	3301      	adds	r3, #1
 800552e:	2101      	movs	r1, #1
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe f997 	bl	8003864 <LCD_WriteAlphaLCD>
	LCD_WriteNumericLCD(&systemVariables.temperature_int, sizeof(systemVariables.temperature_int));
 8005536:	2101      	movs	r1, #1
 8005538:	485c      	ldr	r0, [pc, #368]	; (80056ac <update_LCD+0x1d0>)
 800553a:	f7fe f9c9 	bl	80038d0 <LCD_WriteNumericLCD>
	LCD_WriteAlphaLCD((uint8_t*)&characterASCII[2], sizeof(characterASCII[2]));
 800553e:	f107 0318 	add.w	r3, r7, #24
 8005542:	3302      	adds	r3, #2
 8005544:	2101      	movs	r1, #1
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe f98c 	bl	8003864 <LCD_WriteAlphaLCD>
	LCD_WriteNumericLCD(&systemVariables.temperature_frac, sizeof(systemVariables.temperature_frac));
 800554c:	2101      	movs	r1, #1
 800554e:	4858      	ldr	r0, [pc, #352]	; (80056b0 <update_LCD+0x1d4>)
 8005550:	f7fe f9be 	bl	80038d0 <LCD_WriteNumericLCD>

	/* Humidity */
	/* Move cursor to second row first column */
	LCD_SetCursorPosition(0x01, 0x00);
 8005554:	2100      	movs	r1, #0
 8005556:	2001      	movs	r0, #1
 8005558:	f7fe fa06 	bl	8003968 <LCD_SetCursorPosition>
	LCD_WriteAlphaLCD((uint8_t*)&characterASCII[3], sizeof(characterASCII[3]));
 800555c:	f107 0318 	add.w	r3, r7, #24
 8005560:	3303      	adds	r3, #3
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe f97d 	bl	8003864 <LCD_WriteAlphaLCD>
	LCD_WriteAlphaLCD((uint8_t*)&characterASCII[1], sizeof(characterASCII[1]));
 800556a:	f107 0318 	add.w	r3, r7, #24
 800556e:	3301      	adds	r3, #1
 8005570:	2101      	movs	r1, #1
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe f976 	bl	8003864 <LCD_WriteAlphaLCD>
	LCD_WriteNumericLCD(&systemVariables.humidity_int, sizeof(systemVariables.humidity_int));
 8005578:	2101      	movs	r1, #1
 800557a:	484e      	ldr	r0, [pc, #312]	; (80056b4 <update_LCD+0x1d8>)
 800557c:	f7fe f9a8 	bl	80038d0 <LCD_WriteNumericLCD>
	LCD_WriteAlphaLCD((uint8_t*)&characterASCII[2], sizeof(characterASCII[2]));
 8005580:	f107 0318 	add.w	r3, r7, #24
 8005584:	3302      	adds	r3, #2
 8005586:	2101      	movs	r1, #1
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe f96b 	bl	8003864 <LCD_WriteAlphaLCD>
	LCD_WriteNumericLCD(&systemVariables.humidity_frac, sizeof(systemVariables.humidity_frac));
 800558e:	2101      	movs	r1, #1
 8005590:	4849      	ldr	r0, [pc, #292]	; (80056b8 <update_LCD+0x1dc>)
 8005592:	f7fe f99d 	bl	80038d0 <LCD_WriteNumericLCD>

	/* Time */
	if(flags.rtcBackupValidFlag == 0)
 8005596:	4b49      	ldr	r3, [pc, #292]	; (80056bc <update_LCD+0x1e0>)
 8005598:	789b      	ldrb	r3, [r3, #2]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d16d      	bne.n	8005680 <update_LCD+0x1a4>
	{
		LCD_SetCursorPosition(0x00, 0x08);
 80055a4:	2108      	movs	r1, #8
 80055a6:	2000      	movs	r0, #0
 80055a8:	f7fe f9de 	bl	8003968 <LCD_SetCursorPosition>
		if(systemVariables.timeHours < 10)
 80055ac:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <update_LCD+0x1e4>)
 80055ae:	795b      	ldrb	r3, [r3, #5]
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	d806      	bhi.n	80055c2 <update_LCD+0xe6>
		{
			LCD_WriteAlphaLCD((uint8_t*)&characterASCII[4], sizeof(characterASCII[4]));
 80055b4:	f107 0318 	add.w	r3, r7, #24
 80055b8:	3304      	adds	r3, #4
 80055ba:	2101      	movs	r1, #1
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe f951 	bl	8003864 <LCD_WriteAlphaLCD>
		}
		LCD_WriteNumericLCD(&systemVariables.timeHours, sizeof(systemVariables.timeHours));
 80055c2:	2101      	movs	r1, #1
 80055c4:	483f      	ldr	r0, [pc, #252]	; (80056c4 <update_LCD+0x1e8>)
 80055c6:	f7fe f983 	bl	80038d0 <LCD_WriteNumericLCD>
		LCD_WriteAlphaLCD((uint8_t*)&characterASCII[1], sizeof(characterASCII[1]));
 80055ca:	f107 0318 	add.w	r3, r7, #24
 80055ce:	3301      	adds	r3, #1
 80055d0:	2101      	movs	r1, #1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe f946 	bl	8003864 <LCD_WriteAlphaLCD>
		if(systemVariables.timeMinutes < 10)
 80055d8:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <update_LCD+0x1e4>)
 80055da:	799b      	ldrb	r3, [r3, #6]
 80055dc:	2b09      	cmp	r3, #9
 80055de:	d806      	bhi.n	80055ee <update_LCD+0x112>
		{
			LCD_WriteAlphaLCD((uint8_t*)&characterASCII[4], sizeof(characterASCII[4]));
 80055e0:	f107 0318 	add.w	r3, r7, #24
 80055e4:	3304      	adds	r3, #4
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe f93b 	bl	8003864 <LCD_WriteAlphaLCD>
		}
		LCD_WriteNumericLCD(&systemVariables.timeMinutes, sizeof(systemVariables.timeMinutes));
 80055ee:	2101      	movs	r1, #1
 80055f0:	4835      	ldr	r0, [pc, #212]	; (80056c8 <update_LCD+0x1ec>)
 80055f2:	f7fe f96d 	bl	80038d0 <LCD_WriteNumericLCD>
		LCD_WriteAlphaLCD((uint8_t*)&characterASCII[1], sizeof(characterASCII[1]));
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	3301      	adds	r3, #1
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe f930 	bl	8003864 <LCD_WriteAlphaLCD>
		if(systemVariables.timeSeconds < 10)
 8005604:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <update_LCD+0x1e4>)
 8005606:	79db      	ldrb	r3, [r3, #7]
 8005608:	2b09      	cmp	r3, #9
 800560a:	d806      	bhi.n	800561a <update_LCD+0x13e>
		{
			LCD_WriteAlphaLCD((uint8_t*)&characterASCII[4], sizeof(characterASCII[4]));
 800560c:	f107 0318 	add.w	r3, r7, #24
 8005610:	3304      	adds	r3, #4
 8005612:	2101      	movs	r1, #1
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe f925 	bl	8003864 <LCD_WriteAlphaLCD>
		}
		LCD_WriteNumericLCD(&systemVariables.timeSeconds, sizeof(systemVariables.timeSeconds));
 800561a:	2101      	movs	r1, #1
 800561c:	482b      	ldr	r0, [pc, #172]	; (80056cc <update_LCD+0x1f0>)
 800561e:	f7fe f957 	bl	80038d0 <LCD_WriteNumericLCD>

		/* Day Or Night Flag */
		/* Move cursor to first row and to the right */
		if(flags.dayNightFlag == DAY)
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <update_LCD+0x1e0>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d11c      	bne.n	800566a <update_LCD+0x18e>
		{
			LCD_SetCursorPosition(0x01, 0x0B);
 8005630:	210b      	movs	r1, #11
 8005632:	2001      	movs	r0, #1
 8005634:	f7fe f998 	bl	8003968 <LCD_SetCursorPosition>
			LCD_WriteAlphaLCD((uint8_t*)&characterASCII[5], sizeof(characterASCII[5]));
 8005638:	f107 0318 	add.w	r3, r7, #24
 800563c:	3305      	adds	r3, #5
 800563e:	2101      	movs	r1, #1
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe f90f 	bl	8003864 <LCD_WriteAlphaLCD>
			LCD_WriteAlphaLCD((uint8_t*)&characterASCII[5], sizeof(characterASCII[5]));
 8005646:	f107 0318 	add.w	r3, r7, #24
 800564a:	3305      	adds	r3, #5
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe f908 	bl	8003864 <LCD_WriteAlphaLCD>
			LCD_SetCursorPosition(0x01, 0x0D);
 8005654:	210d      	movs	r1, #13
 8005656:	2001      	movs	r0, #1
 8005658:	f7fe f986 	bl	8003968 <LCD_SetCursorPosition>
			LCD_WriteAlphaLCD((uint8_t*)dayASCII, sizeof(dayASCII));
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	2104      	movs	r1, #4
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe f8fe 	bl	8003864 <LCD_WriteAlphaLCD>
		LCD_SetCursorPosition(0x00, 0x08);
		LCD_WriteAlphaLCD((uint8_t*)&errorASCII[0], sizeof(errorASCII[0]));
	}


}
 8005668:	e013      	b.n	8005692 <update_LCD+0x1b6>
			LCD_SetCursorPosition(0x01, 0x0B);
 800566a:	210b      	movs	r1, #11
 800566c:	2001      	movs	r0, #1
 800566e:	f7fe f97b 	bl	8003968 <LCD_SetCursorPosition>
			LCD_WriteAlphaLCD((uint8_t*)nightASCII, sizeof(nightASCII));
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	2106      	movs	r1, #6
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe f8f3 	bl	8003864 <LCD_WriteAlphaLCD>
}
 800567e:	e008      	b.n	8005692 <update_LCD+0x1b6>
		LCD_SetCursorPosition(0x00, 0x08);
 8005680:	2108      	movs	r1, #8
 8005682:	2000      	movs	r0, #0
 8005684:	f7fe f970 	bl	8003968 <LCD_SetCursorPosition>
		LCD_WriteAlphaLCD((uint8_t*)&errorASCII[0], sizeof(errorASCII[0]));
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	2101      	movs	r1, #1
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe f8e9 	bl	8003864 <LCD_WriteAlphaLCD>
}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	0800c2c0 	.word	0x0800c2c0
 80056a0:	00796144 	.word	0x00796144
 80056a4:	0800c2c8 	.word	0x0800c2c8
 80056a8:	0800c2d0 	.word	0x0800c2d0
 80056ac:	20000ea5 	.word	0x20000ea5
 80056b0:	20000ea6 	.word	0x20000ea6
 80056b4:	20000ea7 	.word	0x20000ea7
 80056b8:	20000ea8 	.word	0x20000ea8
 80056bc:	20000ea0 	.word	0x20000ea0
 80056c0:	20000ea4 	.word	0x20000ea4
 80056c4:	20000ea9 	.word	0x20000ea9
 80056c8:	20000eaa 	.word	0x20000eaa
 80056cc:	20000eab 	.word	0x20000eab

080056d0 <I2C_Setup>:
/**
  * @brief  This function is used to setup the I2C handle
  * @retval None
  */
static void I2C_Setup(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
	/* Setup I2C 1 for communication */
	i2c1.Instance = I2C1;
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <I2C_Setup+0x3c>)
 80056d6:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <I2C_Setup+0x40>)
 80056d8:	601a      	str	r2, [r3, #0]
	i2c1.Init.Timing = ((0x0B << 28) | (0x04 << 20) | (0x02 << 16) | (0x0F << 8) | (0x13 << 0));		/* Taken from the reference manual. Order is PRESCL RES SCLDEL SDADEL SCLH SCLL */
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <I2C_Setup+0x3c>)
 80056dc:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <I2C_Setup+0x44>)
 80056de:	605a      	str	r2, [r3, #4]
	i2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <I2C_Setup+0x3c>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	60da      	str	r2, [r3, #12]
	i2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <I2C_Setup+0x3c>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
	i2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <I2C_Setup+0x3c>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
	i2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <I2C_Setup+0x3c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	621a      	str	r2, [r3, #32]
	if(HAL_I2C_Init(&i2c1)  != HAL_OK)
 80056f8:	4804      	ldr	r0, [pc, #16]	; (800570c <I2C_Setup+0x3c>)
 80056fa:	f000 fe89 	bl	8006410 <HAL_I2C_Init>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <I2C_Setup+0x38>
	{
		Error_Handler();
 8005704:	f000 f846 	bl	8005794 <Error_Handler>
	}
}
 8005708:	bf00      	nop
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000df0 	.word	0x20000df0
 8005710:	40005400 	.word	0x40005400
 8005714:	b0420f13 	.word	0xb0420f13

08005718 <SPI_Setup>:
/**
  * @brief  This function is used to setup the SPI handle
  * @retval None
  */
static void SPI_Setup(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <SPI_Setup+0x74>)
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <SPI_Setup+0x78>)
 8005720:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <SPI_Setup+0x74>)
 8005724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005728:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <SPI_Setup+0x74>)
 800572c:	2200      	movs	r2, #0
 800572e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005730:	4b16      	ldr	r3, [pc, #88]	; (800578c <SPI_Setup+0x74>)
 8005732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005736:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005738:	4b14      	ldr	r3, [pc, #80]	; (800578c <SPI_Setup+0x74>)
 800573a:	2200      	movs	r2, #0
 800573c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <SPI_Setup+0x74>)
 8005740:	2200      	movs	r2, #0
 8005742:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <SPI_Setup+0x74>)
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <SPI_Setup+0x74>)
 800574e:	2230      	movs	r2, #48	; 0x30
 8005750:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005752:	4b0e      	ldr	r3, [pc, #56]	; (800578c <SPI_Setup+0x74>)
 8005754:	2200      	movs	r2, #0
 8005756:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <SPI_Setup+0x74>)
 800575a:	2200      	movs	r2, #0
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <SPI_Setup+0x74>)
 8005760:	2200      	movs	r2, #0
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <SPI_Setup+0x74>)
 8005766:	2207      	movs	r2, #7
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <SPI_Setup+0x74>)
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <SPI_Setup+0x74>)
 8005772:	2208      	movs	r2, #8
 8005774:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005776:	4805      	ldr	r0, [pc, #20]	; (800578c <SPI_Setup+0x74>)
 8005778:	f003 fbc5 	bl	8008f06 <HAL_SPI_Init>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <SPI_Setup+0x6e>
	{
		Error_Handler();
 8005782:	f000 f807 	bl	8005794 <Error_Handler>
	}
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000e3c 	.word	0x20000e3c
 8005790:	40013000 	.word	0x40013000

08005794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005798:	b672      	cpsid	i
}
 800579a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800579c:	e7fe      	b.n	800579c <Error_Handler+0x8>
	...

080057a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a6:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_MspInit+0x40>)
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <HAL_MspInit+0x40>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6613      	str	r3, [r2, #96]	; 0x60
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_MspInit+0x40>)
 80057b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_MspInit+0x40>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <HAL_MspInit+0x40>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_MspInit+0x40>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]

}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40021000 	.word	0x40021000

080057e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b09e      	sub	sp, #120	; 0x78
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057fc:	f107 0310 	add.w	r3, r7, #16
 8005800:	2254      	movs	r2, #84	; 0x54
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f005 ff81 	bl	800b70c <memset>
  if(huart->Instance==USART2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_UART_MspInit+0xcc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d148      	bne.n	80058a6 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005814:	2302      	movs	r3, #2
 8005816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005818:	2300      	movs	r3, #0
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800581c:	f107 0310 	add.w	r3, r7, #16
 8005820:	4618      	mov	r0, r3
 8005822:	f002 fbe5 	bl	8007ff0 <HAL_RCCEx_PeriphCLKConfig>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800582c:	f7ff ffb2 	bl	8005794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005830:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_UART_MspInit+0xd0>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <HAL_UART_MspInit+0xd0>)
 8005836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583a:	6593      	str	r3, [r2, #88]	; 0x58
 800583c:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_UART_MspInit+0xd0>)
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005848:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <HAL_UART_MspInit+0xd0>)
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_UART_MspInit+0xd0>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <HAL_UART_MspInit+0xd0>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005860:	2304      	movs	r3, #4
 8005862:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005864:	2302      	movs	r3, #2
 8005866:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005868:	2300      	movs	r3, #0
 800586a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800586c:	2303      	movs	r3, #3
 800586e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005870:	2307      	movs	r3, #7
 8005872:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005874:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005878:	4619      	mov	r1, r3
 800587a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800587e:	f000 fc2d 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005888:	2302      	movs	r3, #2
 800588a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800588c:	2300      	movs	r3, #0
 800588e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005890:	2303      	movs	r3, #3
 8005892:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005894:	2307      	movs	r3, #7
 8005896:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800589c:	4619      	mov	r1, r3
 800589e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058a2:	f000 fc1b 	bl	80060dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80058a6:	bf00      	nop
 80058a8:	3778      	adds	r7, #120	; 0x78
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40004400 	.word	0x40004400
 80058b4:	40021000 	.word	0x40021000

080058b8 <HAL_TIM_OC_MspInit>:
  * @param TIM_HandleTypeDef Handle
  * @retval None
  */

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	/* Setup the clock */
	__HAL_RCC_TIM2_CLK_ENABLE();
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <HAL_TIM_OC_MspInit+0x84>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c4:	4a1d      	ldr	r2, [pc, #116]	; (800593c <HAL_TIM_OC_MspInit+0x84>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6593      	str	r3, [r2, #88]	; 0x58
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <HAL_TIM_OC_MspInit+0x84>)
 80058ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]

	/* Enable the IRQ of TIM2 */
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058d8:	201c      	movs	r0, #28
 80058da:	f000 fbd6 	bl	800608a <HAL_NVIC_EnableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058de:	f107 030c 	add.w	r3, r7, #12
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	609a      	str	r2, [r3, #8]
 80058ea:	60da      	str	r2, [r3, #12]
 80058ec:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = TEMPHUMID_1_PIN;
 80058ee:	2301      	movs	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058f2:	2312      	movs	r3, #18
 80058f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058fe:	2301      	movs	r3, #1
 8005900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	4619      	mov	r1, r3
 8005908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800590c:	f000 fbe6 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMPHUMID_2_PIN;
 8005910:	2302      	movs	r3, #2
 8005912:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005914:	2312      	movs	r3, #18
 8005916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591c:	2300      	movs	r3, #0
 800591e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005920:	2301      	movs	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4619      	mov	r1, r3
 800592a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800592e:	f000 fbd5 	bl	80060dc <HAL_GPIO_Init>
}
 8005932:	bf00      	nop
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000

08005940 <HAL_TIM_OC_MspDeInit>:

void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

    __HAL_RCC_TIM2_CLK_DISABLE();
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_TIM_OC_MspDeInit+0x24>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	4a05      	ldr	r2, [pc, #20]	; (8005964 <HAL_TIM_OC_MspDeInit+0x24>)
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6593      	str	r3, [r2, #88]	; 0x58

    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8005954:	201c      	movs	r0, #28
 8005956:	f000 fba6 	bl	80060a6 <HAL_NVIC_DisableIRQ>
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000

08005968 <HAL_TIM_IC_MspInit>:
  * @param TIM_HandleTypeDef Handle
  * @retval None
  */

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	/* Setup the clock */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <HAL_TIM_IC_MspInit+0x84>)
 8005972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_TIM_IC_MspInit+0x84>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6593      	str	r3, [r2, #88]	; 0x58
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <HAL_TIM_IC_MspInit+0x84>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	68bb      	ldr	r3, [r7, #8]

	/* Enable the IRQ of TIM2 */
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005988:	201c      	movs	r0, #28
 800598a:	f000 fb7e 	bl	800608a <HAL_NVIC_EnableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	609a      	str	r2, [r3, #8]
 800599a:	60da      	str	r2, [r3, #12]
 800599c:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = TEMPHUMID_1_PIN;
 800599e:	2301      	movs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059a2:	2312      	movs	r3, #18
 80059a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	4619      	mov	r1, r3
 80059b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059bc:	f000 fb8e 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMPHUMID_2_PIN;
 80059c0:	2302      	movs	r3, #2
 80059c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059c4:	2312      	movs	r3, #18
 80059c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059d0:	2301      	movs	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMPHUMID_PORT, &GPIO_InitStruct);
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	4619      	mov	r1, r3
 80059da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059de:	f000 fb7d 	bl	80060dc <HAL_GPIO_Init>
}
 80059e2:	bf00      	nop
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000

080059f0 <HAL_TIM_IC_MspDeInit>:

void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
    __HAL_RCC_TIM2_CLK_DISABLE();
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_TIM_IC_MspDeInit+0x24>)
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <HAL_TIM_IC_MspDeInit+0x24>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	6593      	str	r3, [r2, #88]	; 0x58

    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8005a04:	201c      	movs	r0, #28
 8005a06:	f000 fb4e 	bl	80060a6 <HAL_NVIC_DisableIRQ>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000

08005a18 <HAL_RTC_MspInit>:
  * @param TIM_HandleTypeDef Handle
  * @retval None
  */

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
	HAL_PWR_EnableBkUpAccess();
 8005a38:	f001 fc4a 	bl	80072d0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_RTC_ENABLE();
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	4a06      	ldr	r2, [pc, #24]	; (8005a70 <HAL_RTC_MspInit+0x58>)
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005a60:	2029      	movs	r0, #41	; 0x29
 8005a62:	f000 fb12 	bl	800608a <HAL_NVIC_EnableIRQ>
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_I2C_MspInit>:
  * @param TIM_HandleTypeDef Handle
  * @retval None
  */

void HAL_I2C_MspInit(I2C_HandleTypeDef *hrtc)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <HAL_I2C_MspInit+0x80>)
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_I2C_MspInit+0x80>)
 8005a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a86:	6593      	str	r3, [r2, #88]	; 0x58
 8005a88:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <HAL_I2C_MspInit+0x80>)
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a94:	f107 030c 	add.w	r3, r7, #12
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LCD_SCL_PIN;
 8005aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005aaa:	2312      	movs	r3, #18
 8005aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct);
 8005aba:	f107 030c 	add.w	r3, r7, #12
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ac4:	f000 fb0a 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_SDA_PIN;
 8005ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ace:	2312      	movs	r3, #18
 8005ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ada:	2304      	movs	r3, #4
 8005adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct);
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ae8:	f000 faf8 	bl	80060dc <HAL_GPIO_Init>
}
 8005aec:	bf00      	nop
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40021000 	.word	0x40021000

08005af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_SPI1_CLK_ENABLE();
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <HAL_SPI_MspInit+0x48>)
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <HAL_SPI_MspInit+0x48>)
 8005b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b0a:	6613      	str	r3, [r2, #96]	; 0x60
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <HAL_SPI_MspInit+0x48>)
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]
	/**SPI1 GPIO Configuration
	PB3     ------> SPI1_SCK
	PB4     ------> SPI1_MISO
	PB5     ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = SPI_SCLK_PIN|SPI_MISO_PIN|SPI_MOSI_PIN;
 8005b18:	2338      	movs	r3, #56	; 0x38
 8005b1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b24:	2303      	movs	r3, #3
 8005b26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b28:	2305      	movs	r3, #5
 8005b2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI_PORT, &GPIO_InitStruct);
 8005b2c:	f107 030c 	add.w	r3, r7, #12
 8005b30:	4619      	mov	r1, r3
 8005b32:	4804      	ldr	r0, [pc, #16]	; (8005b44 <HAL_SPI_MspInit+0x4c>)
 8005b34:	f000 fad2 	bl	80060dc <HAL_GPIO_Init>


}
 8005b38:	bf00      	nop
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	48000400 	.word	0x48000400

08005b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b4c:	e7fe      	b.n	8005b4c <NMI_Handler+0x4>

08005b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b52:	e7fe      	b.n	8005b52 <HardFault_Handler+0x4>

08005b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b58:	e7fe      	b.n	8005b58 <MemManage_Handler+0x4>

08005b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b5e:	e7fe      	b.n	8005b5e <BusFault_Handler+0x4>

08005b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b64:	e7fe      	b.n	8005b64 <UsageFault_Handler+0x4>

08005b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b76:	bf00      	nop
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr
	...

08005b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b90:	f000 f924 	bl	8005ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* LCD time base count */
  if(LCDUpdateCount < LCD_UPDATE_VALUE)
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <SysTick_Handler+0x90>)
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b9c:	d206      	bcs.n	8005bac <SysTick_Handler+0x20>
  {
	  LCDUpdateCount++;
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <SysTick_Handler+0x90>)
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <SysTick_Handler+0x90>)
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e008      	b.n	8005bbe <SysTick_Handler+0x32>
  }
  else
  {
	  flags.LCDUpdateFlag = TRUE;
 8005bac:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <SysTick_Handler+0x94>)
 8005bae:	7853      	ldrb	r3, [r2, #1]
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	f361 0301 	bfi	r3, r1, #0, #2
 8005bb6:	7053      	strb	r3, [r2, #1]
	  LCDUpdateCount = 0;
 8005bb8:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <SysTick_Handler+0x90>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	801a      	strh	r2, [r3, #0]
  }

  /* Sensor time base count */
  if(sensorUpdateCount < SENSOR_UPDATE_VALUE)
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <SysTick_Handler+0x98>)
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	f241 3287 	movw	r2, #4999	; 0x1387
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d806      	bhi.n	8005bd8 <SysTick_Handler+0x4c>
  {
	  sensorUpdateCount++;
 8005bca:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <SysTick_Handler+0x98>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <SysTick_Handler+0x98>)
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e008      	b.n	8005bea <SysTick_Handler+0x5e>
  }
  else
  {
	  flags.sensorUpdateFlag = TRUE;
 8005bd8:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <SysTick_Handler+0x94>)
 8005bda:	7853      	ldrb	r3, [r2, #1]
 8005bdc:	2101      	movs	r1, #1
 8005bde:	f361 0383 	bfi	r3, r1, #2, #2
 8005be2:	7053      	strb	r3, [r2, #1]
	  sensorUpdateCount = 0;
 8005be4:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <SysTick_Handler+0x98>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	801a      	strh	r2, [r3, #0]
  }

  /* Grow tent mode time base count */
  if(modeUpdateCount < MODE_UPDATE_VALUE)
 8005bea:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <SysTick_Handler+0x9c>)
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	f242 720f 	movw	r2, #9999	; 0x270f
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d806      	bhi.n	8005c04 <SysTick_Handler+0x78>
  {
	  modeUpdateCount++;
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <SysTick_Handler+0x9c>)
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <SysTick_Handler+0x9c>)
 8005c00:	801a      	strh	r2, [r3, #0]
	  flags.modeUpdateFlag = TRUE;
	  modeUpdateCount = 0;
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c02:	e008      	b.n	8005c16 <SysTick_Handler+0x8a>
	  flags.modeUpdateFlag = TRUE;
 8005c04:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <SysTick_Handler+0x94>)
 8005c06:	7853      	ldrb	r3, [r2, #1]
 8005c08:	2101      	movs	r1, #1
 8005c0a:	f361 1305 	bfi	r3, r1, #4, #2
 8005c0e:	7053      	strb	r3, [r2, #1]
	  modeUpdateCount = 0;
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <SysTick_Handler+0x9c>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	801a      	strh	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000eb0 	.word	0x20000eb0
 8005c20:	20000ea0 	.word	0x20000ea0
 8005c24:	20000eb2 	.word	0x20000eb2
 8005c28:	20000eb4 	.word	0x20000eb4

08005c2c <TIM6_DAC_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

void TIM6_DAC_IRQHandler(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0

}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&tim2OC);
 8005c3c:	4803      	ldr	r0, [pc, #12]	; (8005c4c <TIM2_IRQHandler+0x14>)
 8005c3e:	f004 f9af 	bl	8009fa0 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&tim2IC);
 8005c42:	4803      	ldr	r0, [pc, #12]	; (8005c50 <TIM2_IRQHandler+0x18>)
 8005c44:	f004 f9ac 	bl	8009fa0 <HAL_TIM_IRQHandler>
}
 8005c48:	bf00      	nop
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000ca4 	.word	0x20000ca4
 8005c50:	20000cf0 	.word	0x20000cf0

08005c54 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler()
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&rtc1);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <RTC_Alarm_IRQHandler+0x10>)
 8005c5a:	f003 f835 	bl	8008cc8 <HAL_RTC_AlarmIRQHandler>
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200004a4 	.word	0x200004a4

08005c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c70:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <_sbrk+0x5c>)
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <_sbrk+0x60>)
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c7c:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <_sbrk+0x64>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <_sbrk+0x64>)
 8005c86:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <_sbrk+0x68>)
 8005c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c8a:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <_sbrk+0x64>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d207      	bcs.n	8005ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c98:	f005 fcf4 	bl	800b684 <__errno>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	220c      	movs	r2, #12
 8005ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	e009      	b.n	8005cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ca8:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <_sbrk+0x64>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <_sbrk+0x64>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <_sbrk+0x64>)
 8005cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20010000 	.word	0x20010000
 8005cc8:	00000400 	.word	0x00000400
 8005ccc:	20000eb8 	.word	0x20000eb8
 8005cd0:	20000ed0 	.word	0x20000ed0

08005cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
#endif
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ce4:	f7ff fff6 	bl	8005cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ce8:	480c      	ldr	r0, [pc, #48]	; (8005d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8005cea:	490d      	ldr	r1, [pc, #52]	; (8005d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cec:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <LoopForever+0xe>)
  movs r3, #0
 8005cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cf0:	e002      	b.n	8005cf8 <LoopCopyDataInit>

08005cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cf6:	3304      	adds	r3, #4

08005cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cfc:	d3f9      	bcc.n	8005cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d00:	4c0a      	ldr	r4, [pc, #40]	; (8005d2c <LoopForever+0x16>)
  movs r3, #0
 8005d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d04:	e001      	b.n	8005d0a <LoopFillZerobss>

08005d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d08:	3204      	adds	r2, #4

08005d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d0c:	d3fb      	bcc.n	8005d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d0e:	f005 fcbf 	bl	800b690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d12:	f7ff fb67 	bl	80053e4 <main>

08005d16 <LoopForever>:

LoopForever:
    b LoopForever
 8005d16:	e7fe      	b.n	8005d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005d18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d20:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8005d24:	0800c50c 	.word	0x0800c50c
  ldr r2, =_sbss
 8005d28:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8005d2c:	20000ed0 	.word	0x20000ed0

08005d30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d30:	e7fe      	b.n	8005d30 <ADC1_IRQHandler>

08005d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d3c:	2003      	movs	r0, #3
 8005d3e:	f000 f97d 	bl	800603c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d42:	2000      	movs	r0, #0
 8005d44:	f000 f80e 	bl	8005d64 <HAL_InitTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	71fb      	strb	r3, [r7, #7]
 8005d52:	e001      	b.n	8005d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d54:	f7ff fd24 	bl	80057a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d58:	79fb      	ldrb	r3, [r7, #7]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <HAL_InitTick+0x6c>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d023      	beq.n	8005dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005d78:	4b16      	ldr	r3, [pc, #88]	; (8005dd4 <HAL_InitTick+0x70>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <HAL_InitTick+0x6c>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f997 	bl	80060c2 <HAL_SYSTICK_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b0f      	cmp	r3, #15
 8005d9e:	d809      	bhi.n	8005db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005da0:	2200      	movs	r2, #0
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	f000 f953 	bl	8006052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dac:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <HAL_InitTick+0x74>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e007      	b.n	8005dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
 8005db8:	e004      	b.n	8005dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
 8005dbe:	e001      	b.n	8005dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200003d4 	.word	0x200003d4
 8005dd4:	200003cc 	.word	0x200003cc
 8005dd8:	200003d0 	.word	0x200003d0

08005ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_IncTick+0x1c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_IncTick+0x20>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4413      	add	r3, r2
 8005dec:	4a03      	ldr	r2, [pc, #12]	; (8005dfc <HAL_IncTick+0x20>)
 8005dee:	6013      	str	r3, [r2, #0]
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	200003d4 	.word	0x200003d4
 8005dfc:	20000ebc 	.word	0x20000ebc

08005e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return uwTick;
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <HAL_GetTick+0x10>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	20000ebc 	.word	0x20000ebc

08005e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e1c:	f7ff fff0 	bl	8005e00 <HAL_GetTick>
 8005e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d005      	beq.n	8005e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_Delay+0x44>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e3a:	bf00      	nop
 8005e3c:	f7ff ffe0 	bl	8005e00 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d8f7      	bhi.n	8005e3c <HAL_Delay+0x28>
  {
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200003d4 	.word	0x200003d4

08005e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e8e:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	60d3      	str	r3, [r2, #12]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <__NVIC_GetPriorityGrouping+0x18>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	f003 0307 	and.w	r3, r3, #7
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	db0b      	blt.n	8005eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	f003 021f 	and.w	r2, r3, #31
 8005ed8:	4906      	ldr	r1, [pc, #24]	; (8005ef4 <__NVIC_EnableIRQ+0x34>)
 8005eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr
 8005ef4:	e000e100 	.word	0xe000e100

08005ef8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db12      	blt.n	8005f30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	f003 021f 	and.w	r2, r3, #31
 8005f10:	490a      	ldr	r1, [pc, #40]	; (8005f3c <__NVIC_DisableIRQ+0x44>)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2001      	movs	r0, #1
 8005f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1e:	3320      	adds	r3, #32
 8005f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f24:	f3bf 8f4f 	dsb	sy
}
 8005f28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f2a:	f3bf 8f6f 	isb	sy
}
 8005f2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	e000e100 	.word	0xe000e100

08005f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	6039      	str	r1, [r7, #0]
 8005f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	db0a      	blt.n	8005f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	490c      	ldr	r1, [pc, #48]	; (8005f8c <__NVIC_SetPriority+0x4c>)
 8005f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5e:	0112      	lsls	r2, r2, #4
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	440b      	add	r3, r1
 8005f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f68:	e00a      	b.n	8005f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	4908      	ldr	r1, [pc, #32]	; (8005f90 <__NVIC_SetPriority+0x50>)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	3b04      	subs	r3, #4
 8005f78:	0112      	lsls	r2, r2, #4
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	761a      	strb	r2, [r3, #24]
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	e000e100 	.word	0xe000e100
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f1c3 0307 	rsb	r3, r3, #7
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	bf28      	it	cs
 8005fb2:	2304      	movcs	r3, #4
 8005fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	2b06      	cmp	r3, #6
 8005fbc:	d902      	bls.n	8005fc4 <NVIC_EncodePriority+0x30>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3b03      	subs	r3, #3
 8005fc2:	e000      	b.n	8005fc6 <NVIC_EncodePriority+0x32>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	43d9      	mvns	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fec:	4313      	orrs	r3, r2
         );
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3724      	adds	r7, #36	; 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3b01      	subs	r3, #1
 8006004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006008:	d301      	bcc.n	800600e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800600a:	2301      	movs	r3, #1
 800600c:	e00f      	b.n	800602e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800600e:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <SysTick_Config+0x40>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3b01      	subs	r3, #1
 8006014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006016:	210f      	movs	r1, #15
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	f7ff ff90 	bl	8005f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <SysTick_Config+0x40>)
 8006022:	2200      	movs	r2, #0
 8006024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006026:	4b04      	ldr	r3, [pc, #16]	; (8006038 <SysTick_Config+0x40>)
 8006028:	2207      	movs	r2, #7
 800602a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	e000e010 	.word	0xe000e010

0800603c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff ff09 	bl	8005e5c <__NVIC_SetPriorityGrouping>
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	4603      	mov	r3, r0
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006064:	f7ff ff1e 	bl	8005ea4 <__NVIC_GetPriorityGrouping>
 8006068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7ff ff90 	bl	8005f94 <NVIC_EncodePriority>
 8006074:	4602      	mov	r2, r0
 8006076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff ff5f 	bl	8005f40 <__NVIC_SetPriority>
}
 8006082:	bf00      	nop
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	4603      	mov	r3, r0
 8006092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff ff11 	bl	8005ec0 <__NVIC_EnableIRQ>
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	4603      	mov	r3, r0
 80060ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80060b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff1f 	bl	8005ef8 <__NVIC_DisableIRQ>
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ff94 	bl	8005ff8 <SysTick_Config>
 80060d0:	4603      	mov	r3, r0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060ea:	e148      	b.n	800637e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 813a 	beq.w	8006378 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d005      	beq.n	800611c <HAL_GPIO_Init+0x40>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d130      	bne.n	800617e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	2203      	movs	r2, #3
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4013      	ands	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006152:	2201      	movs	r2, #1
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4013      	ands	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0201 	and.w	r2, r3, #1
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b03      	cmp	r3, #3
 8006188:	d017      	beq.n	80061ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4013      	ands	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d123      	bne.n	800620e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	08da      	lsrs	r2, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3208      	adds	r2, #8
 80061ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	220f      	movs	r2, #15
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	08da      	lsrs	r2, r3, #3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3208      	adds	r2, #8
 8006208:	6939      	ldr	r1, [r7, #16]
 800620a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	2203      	movs	r2, #3
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 0203 	and.w	r2, r3, #3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8094 	beq.w	8006378 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006250:	4b52      	ldr	r3, [pc, #328]	; (800639c <HAL_GPIO_Init+0x2c0>)
 8006252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006254:	4a51      	ldr	r2, [pc, #324]	; (800639c <HAL_GPIO_Init+0x2c0>)
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	6613      	str	r3, [r2, #96]	; 0x60
 800625c:	4b4f      	ldr	r3, [pc, #316]	; (800639c <HAL_GPIO_Init+0x2c0>)
 800625e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006268:	4a4d      	ldr	r2, [pc, #308]	; (80063a0 <HAL_GPIO_Init+0x2c4>)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	3302      	adds	r3, #2
 8006270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	220f      	movs	r2, #15
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4013      	ands	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006292:	d00d      	beq.n	80062b0 <HAL_GPIO_Init+0x1d4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a43      	ldr	r2, [pc, #268]	; (80063a4 <HAL_GPIO_Init+0x2c8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <HAL_GPIO_Init+0x1d0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a42      	ldr	r2, [pc, #264]	; (80063a8 <HAL_GPIO_Init+0x2cc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_GPIO_Init+0x1cc>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e004      	b.n	80062b2 <HAL_GPIO_Init+0x1d6>
 80062a8:	2307      	movs	r3, #7
 80062aa:	e002      	b.n	80062b2 <HAL_GPIO_Init+0x1d6>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_GPIO_Init+0x1d6>
 80062b0:	2300      	movs	r3, #0
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	f002 0203 	and.w	r2, r2, #3
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	4093      	lsls	r3, r2
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062c2:	4937      	ldr	r1, [pc, #220]	; (80063a0 <HAL_GPIO_Init+0x2c4>)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062d0:	4b36      	ldr	r3, [pc, #216]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	43db      	mvns	r3, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4013      	ands	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062f4:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062fa:	4b2c      	ldr	r3, [pc, #176]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	43db      	mvns	r3, r3
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4013      	ands	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800631e:	4a23      	ldr	r2, [pc, #140]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006324:	4b21      	ldr	r3, [pc, #132]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	43db      	mvns	r3, r3
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800634e:	4b17      	ldr	r3, [pc, #92]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	43db      	mvns	r3, r3
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4013      	ands	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006372:	4a0e      	ldr	r2, [pc, #56]	; (80063ac <HAL_GPIO_Init+0x2d0>)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	3301      	adds	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f aeaf 	bne.w	80060ec <HAL_GPIO_Init+0x10>
  }
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40021000 	.word	0x40021000
 80063a0:	40010000 	.word	0x40010000
 80063a4:	48000400 	.word	0x48000400
 80063a8:	48000800 	.word	0x48000800
 80063ac:	40010400 	.word	0x40010400

080063b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	807b      	strh	r3, [r7, #2]
 80063bc:	4613      	mov	r3, r2
 80063be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063c0:	787b      	ldrb	r3, [r7, #1]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063c6:	887a      	ldrh	r2, [r7, #2]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063cc:	e002      	b.n	80063d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063f0:	887a      	ldrh	r2, [r7, #2]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4013      	ands	r3, r2
 80063f6:	041a      	lsls	r2, r3, #16
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	43d9      	mvns	r1, r3
 80063fc:	887b      	ldrh	r3, [r7, #2]
 80063fe:	400b      	ands	r3, r1
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	619a      	str	r2, [r3, #24]
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e081      	b.n	8006526 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff fb1c 	bl	8005a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2224      	movs	r2, #36	; 0x24
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d107      	bne.n	800648a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	e006      	b.n	8006498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d104      	bne.n	80064aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	461a      	mov	r2, r3
 800653c:	460b      	mov	r3, r1
 800653e:	817b      	strh	r3, [r7, #10]
 8006540:	4613      	mov	r3, r2
 8006542:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b20      	cmp	r3, #32
 800654e:	f040 80da 	bne.w	8006706 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_I2C_Master_Transmit+0x30>
 800655c:	2302      	movs	r3, #2
 800655e:	e0d3      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006568:	f7ff fc4a 	bl	8005e00 <HAL_GetTick>
 800656c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2319      	movs	r3, #25
 8006574:	2201      	movs	r2, #1
 8006576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fc55 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e0be      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2221      	movs	r2, #33	; 0x21
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2210      	movs	r2, #16
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	893a      	ldrh	r2, [r7, #8]
 80065aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2bff      	cmp	r3, #255	; 0xff
 80065ba:	d90e      	bls.n	80065da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	8979      	ldrh	r1, [r7, #10]
 80065ca:	4b51      	ldr	r3, [pc, #324]	; (8006710 <HAL_I2C_Master_Transmit+0x1e0>)
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fe4c 	bl	8007270 <I2C_TransferConfig>
 80065d8:	e06c      	b.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	4b48      	ldr	r3, [pc, #288]	; (8006710 <HAL_I2C_Master_Transmit+0x1e0>)
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fe3b 	bl	8007270 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80065fa:	e05b      	b.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	6a39      	ldr	r1, [r7, #32]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fc52 	bl	8006eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e07b      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d034      	beq.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	2b00      	cmp	r3, #0
 8006650:	d130      	bne.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2200      	movs	r2, #0
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fbe4 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e04d      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2bff      	cmp	r3, #255	; 0xff
 8006674:	d90e      	bls.n	8006694 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	8979      	ldrh	r1, [r7, #10]
 8006684:	2300      	movs	r3, #0
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fdef 	bl	8007270 <I2C_TransferConfig>
 8006692:	e00f      	b.n	80066b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	8979      	ldrh	r1, [r7, #10]
 80066a6:	2300      	movs	r3, #0
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fdde 	bl	8007270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d19e      	bne.n	80065fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fc31 	bl	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e01a      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2220      	movs	r2, #32
 80066d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <HAL_I2C_Master_Transmit+0x1e4>)
 80066e6:	400b      	ands	r3, r1
 80066e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e000      	b.n	8006708 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	80002000 	.word	0x80002000
 8006714:	fe00e800 	.word	0xfe00e800

08006718 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	461a      	mov	r2, r3
 8006724:	460b      	mov	r3, r1
 8006726:	817b      	strh	r3, [r7, #10]
 8006728:	4613      	mov	r3, r2
 800672a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 80db 	bne.w	80068f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_I2C_Master_Receive+0x30>
 8006744:	2302      	movs	r3, #2
 8006746:	e0d4      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006750:	f7ff fb56 	bl	8005e00 <HAL_GetTick>
 8006754:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2319      	movs	r3, #25
 800675c:	2201      	movs	r2, #1
 800675e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fb61 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0bf      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2222      	movs	r2, #34	; 0x22
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2210      	movs	r2, #16
 800677e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	893a      	ldrh	r2, [r7, #8]
 8006792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2bff      	cmp	r3, #255	; 0xff
 80067a2:	d90e      	bls.n	80067c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	22ff      	movs	r2, #255	; 0xff
 80067a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	8979      	ldrh	r1, [r7, #10]
 80067b2:	4b52      	ldr	r3, [pc, #328]	; (80068fc <HAL_I2C_Master_Receive+0x1e4>)
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fd58 	bl	8007270 <I2C_TransferConfig>
 80067c0:	e06d      	b.n	800689e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	8979      	ldrh	r1, [r7, #10]
 80067d4:	4b49      	ldr	r3, [pc, #292]	; (80068fc <HAL_I2C_Master_Receive+0x1e4>)
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fd47 	bl	8007270 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80067e2:	e05c      	b.n	800689e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	6a39      	ldr	r1, [r7, #32]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fbdb 	bl	8006fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e07c      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d034      	beq.n	800689e <HAL_I2C_Master_Receive+0x186>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d130      	bne.n	800689e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2200      	movs	r2, #0
 8006844:	2180      	movs	r1, #128	; 0x80
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 faef 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e04d      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685a:	b29b      	uxth	r3, r3
 800685c:	2bff      	cmp	r3, #255	; 0xff
 800685e:	d90e      	bls.n	800687e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	22ff      	movs	r2, #255	; 0xff
 8006864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	b2da      	uxtb	r2, r3
 800686c:	8979      	ldrh	r1, [r7, #10]
 800686e:	2300      	movs	r3, #0
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fcfa 	bl	8007270 <I2C_TransferConfig>
 800687c:	e00f      	b.n	800689e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688c:	b2da      	uxtb	r2, r3
 800688e:	8979      	ldrh	r1, [r7, #10]
 8006890:	2300      	movs	r3, #0
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fce9 	bl	8007270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d19d      	bne.n	80067e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	6a39      	ldr	r1, [r7, #32]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fb3c 	bl	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e01a      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2220      	movs	r2, #32
 80068c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <HAL_I2C_Master_Receive+0x1e8>)
 80068d0:	400b      	ands	r3, r1
 80068d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	80002400 	.word	0x80002400
 8006900:	fe00e800 	.word	0xfe00e800

08006904 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	461a      	mov	r2, r3
 8006912:	4603      	mov	r3, r0
 8006914:	817b      	strh	r3, [r7, #10]
 8006916:	460b      	mov	r3, r1
 8006918:	813b      	strh	r3, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b20      	cmp	r3, #32
 8006928:	f040 80f9 	bne.w	8006b1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_I2C_Mem_Write+0x34>
 8006932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d105      	bne.n	8006944 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0ed      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_I2C_Mem_Write+0x4e>
 800694e:	2302      	movs	r3, #2
 8006950:	e0e6      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800695a:	f7ff fa51 	bl	8005e00 <HAL_GetTick>
 800695e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2319      	movs	r3, #25
 8006966:	2201      	movs	r2, #1
 8006968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fa5c 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0d1      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2221      	movs	r2, #33	; 0x21
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2240      	movs	r2, #64	; 0x40
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a3a      	ldr	r2, [r7, #32]
 8006996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800699c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069a4:	88f8      	ldrh	r0, [r7, #6]
 80069a6:	893a      	ldrh	r2, [r7, #8]
 80069a8:	8979      	ldrh	r1, [r7, #10]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4603      	mov	r3, r0
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f9c1 	bl	8006d3c <I2C_RequestMemoryWrite>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0a9      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2bff      	cmp	r3, #255	; 0xff
 80069d4:	d90e      	bls.n	80069f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	22ff      	movs	r2, #255	; 0xff
 80069da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	8979      	ldrh	r1, [r7, #10]
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fc3f 	bl	8007270 <I2C_TransferConfig>
 80069f2:	e00f      	b.n	8006a14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	8979      	ldrh	r1, [r7, #10]
 8006a06:	2300      	movs	r3, #0
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fc2e 	bl	8007270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fa46 	bl	8006eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e07b      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d034      	beq.n	8006acc <HAL_I2C_Mem_Write+0x1c8>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d130      	bne.n	8006acc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	2200      	movs	r2, #0
 8006a72:	2180      	movs	r1, #128	; 0x80
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f9d8 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e04d      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2bff      	cmp	r3, #255	; 0xff
 8006a8c:	d90e      	bls.n	8006aac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	8979      	ldrh	r1, [r7, #10]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fbe3 	bl	8007270 <I2C_TransferConfig>
 8006aaa:	e00f      	b.n	8006acc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	8979      	ldrh	r1, [r7, #10]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fbd2 	bl	8007270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d19e      	bne.n	8006a14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fa25 	bl	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e01a      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2220      	movs	r2, #32
 8006af0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <HAL_I2C_Mem_Write+0x224>)
 8006afe:	400b      	ands	r3, r1
 8006b00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e000      	b.n	8006b20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
  }
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	fe00e800 	.word	0xfe00e800

08006b2c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	607a      	str	r2, [r7, #4]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	f040 80f1 	bne.w	8006d30 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5c:	d101      	bne.n	8006b62 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e0e7      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_I2C_IsDeviceReady+0x44>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e0e0      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2224      	movs	r2, #36	; 0x24
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d107      	bne.n	8006b9e <HAL_I2C_IsDeviceReady+0x72>
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b9c:	e004      	b.n	8006ba8 <HAL_I2C_IsDeviceReady+0x7c>
 8006b9e:	897b      	ldrh	r3, [r7, #10]
 8006ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006bae:	f7ff f927 	bl	8005e00 <HAL_GetTick>
 8006bb2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006be0:	e034      	b.n	8006c4c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d01a      	beq.n	8006c20 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bea:	f7ff f909 	bl	8005e00 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d302      	bcc.n	8006c00 <HAL_I2C_IsDeviceReady+0xd4>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10f      	bne.n	8006c20 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e088      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f003 0310 	and.w	r3, r3, #16
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006c4c:	7ffb      	ldrb	r3, [r7, #31]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <HAL_I2C_IsDeviceReady+0x12c>
 8006c52:	7fbb      	ldrb	r3, [r7, #30]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0c4      	beq.n	8006be2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d01a      	beq.n	8006c9c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2120      	movs	r1, #32
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f8da 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e058      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2220      	movs	r2, #32
 8006c86:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e04a      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2120      	movs	r1, #32
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f8bf 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e03d      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2210      	movs	r2, #16
 8006cbc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d118      	bne.n	8006d00 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cdc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2120      	movs	r1, #32
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f89e 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e01c      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3301      	adds	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	f63f af3b 	bhi.w	8006b86 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	f043 0220 	orr.w	r2, r3, #32
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006d30:	2302      	movs	r3, #2
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	4608      	mov	r0, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	461a      	mov	r2, r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	817b      	strh	r3, [r7, #10]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	813b      	strh	r3, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	8979      	ldrh	r1, [r7, #10]
 8006d5c:	4b20      	ldr	r3, [pc, #128]	; (8006de0 <I2C_RequestMemoryWrite+0xa4>)
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fa83 	bl	8007270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	69b9      	ldr	r1, [r7, #24]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f89b 	bl	8006eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e02c      	b.n	8006dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d105      	bne.n	8006d90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d84:	893b      	ldrh	r3, [r7, #8]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	629a      	str	r2, [r3, #40]	; 0x28
 8006d8e:	e015      	b.n	8006dbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d90:	893b      	ldrh	r3, [r7, #8]
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f881 	bl	8006eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e012      	b.n	8006dd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db2:	893b      	ldrh	r3, [r7, #8]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2180      	movs	r1, #128	; 0x80
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f82f 	bl	8006e2a <I2C_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	80002000 	.word	0x80002000

08006de4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d103      	bne.n	8006e02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d007      	beq.n	8006e20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	619a      	str	r2, [r3, #24]
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	4613      	mov	r3, r2
 8006e38:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e3a:	e022      	b.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e42:	d01e      	beq.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e44:	f7fe ffdc 	bl	8005e00 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d302      	bcc.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d113      	bne.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	f043 0220 	orr.w	r2, r3, #32
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e00f      	b.n	8006ea2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d0cd      	beq.n	8006e3c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006eb6:	e02c      	b.n	8006f12 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f8eb 	bl	8007098 <I2C_IsErrorOccurred>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e02a      	b.n	8006f22 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d01e      	beq.n	8006f12 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed4:	f7fe ff94 	bl	8005e00 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d113      	bne.n	8006f12 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eee:	f043 0220 	orr.w	r2, r3, #32
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e007      	b.n	8006f22 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d1cb      	bne.n	8006eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f36:	e028      	b.n	8006f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f8ab 	bl	8007098 <I2C_IsErrorOccurred>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e026      	b.n	8006f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4c:	f7fe ff58 	bl	8005e00 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d302      	bcc.n	8006f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d113      	bne.n	8006f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f043 0220 	orr.w	r2, r3, #32
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e007      	b.n	8006f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d1cf      	bne.n	8006f38 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fb0:	e064      	b.n	800707c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f86e 	bl	8007098 <I2C_IsErrorOccurred>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e062      	b.n	800708c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d138      	bne.n	8007046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d105      	bne.n	8006fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e04e      	b.n	800708c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b10      	cmp	r3, #16
 8006ffa:	d107      	bne.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2210      	movs	r2, #16
 8007002:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2204      	movs	r2, #4
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
 800700a:	e002      	b.n	8007012 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2220      	movs	r2, #32
 8007018:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6859      	ldr	r1, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007026:	400b      	ands	r3, r1
 8007028:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e022      	b.n	800708c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007046:	f7fe fedb 	bl	8005e00 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10f      	bne.n	800707c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	f043 0220 	orr.w	r2, r3, #32
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e007      	b.n	800708c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b04      	cmp	r3, #4
 8007088:	d193      	bne.n	8006fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d075      	beq.n	80071b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2210      	movs	r2, #16
 80070ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070cc:	e056      	b.n	800717c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d052      	beq.n	800717c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070d6:	f7fe fe93 	bl	8005e00 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d302      	bcc.n	80070ec <I2C_IsErrorOccurred+0x54>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d147      	bne.n	800717c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800710a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710e:	d12e      	bne.n	800716e <I2C_IsErrorOccurred+0xd6>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007116:	d02a      	beq.n	800716e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	2b20      	cmp	r3, #32
 800711c:	d027      	beq.n	800716e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800712c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800712e:	f7fe fe67 	bl	8005e00 <HAL_GetTick>
 8007132:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007134:	e01b      	b.n	800716e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007136:	f7fe fe63 	bl	8005e00 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b19      	cmp	r3, #25
 8007142:	d914      	bls.n	800716e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b20      	cmp	r3, #32
 800717a:	d1dc      	bne.n	8007136 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b20      	cmp	r3, #32
 8007188:	d003      	beq.n	8007192 <I2C_IsErrorOccurred+0xfa>
 800718a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718e:	2b00      	cmp	r3, #0
 8007190:	d09d      	beq.n	80070ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2220      	movs	r2, #32
 80071a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	f043 0304 	orr.w	r3, r3, #4
 80071a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f043 0301 	orr.w	r3, r3, #1
 80071c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	f043 0308 	orr.w	r3, r3, #8
 80071ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f043 0302 	orr.w	r3, r3, #2
 800720c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800721e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01c      	beq.n	8007260 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff fddc 	bl	8006de4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b0d      	ldr	r3, [pc, #52]	; (800726c <I2C_IsErrorOccurred+0x1d4>)
 8007238:	400b      	ands	r3, r1
 800723a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	431a      	orrs	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007264:	4618      	mov	r0, r3
 8007266:	3728      	adds	r7, #40	; 0x28
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	fe00e800 	.word	0xfe00e800

08007270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	817b      	strh	r3, [r7, #10]
 800727e:	4613      	mov	r3, r2
 8007280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007282:	897b      	ldrh	r3, [r7, #10]
 8007284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007288:	7a7b      	ldrb	r3, [r7, #9]
 800728a:	041b      	lsls	r3, r3, #16
 800728c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007290:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	4313      	orrs	r3, r2
 800729a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800729e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	0d5b      	lsrs	r3, r3, #21
 80072aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <I2C_TransferConfig+0x5c>)
 80072b0:	430b      	orrs	r3, r1
 80072b2:	43db      	mvns	r3, r3
 80072b4:	ea02 0103 	and.w	r1, r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	03ff63ff 	.word	0x03ff63ff

080072d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072d4:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a03      	ldr	r2, [pc, #12]	; (80072e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80072da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072de:	6013      	str	r3, [r2, #0]
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr
 80072e8:	40007000 	.word	0x40007000

080072ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <HAL_PWREx_GetVoltageRange+0x14>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr
 8007300:	40007000 	.word	0x40007000

08007304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007312:	d130      	bne.n	8007376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007314:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800731c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007320:	d038      	beq.n	8007394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007322:	4b1f      	ldr	r3, [pc, #124]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800732a:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800732c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2232      	movs	r2, #50	; 0x32
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	4a1a      	ldr	r2, [pc, #104]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800733e:	fba2 2303 	umull	r2, r3, r2, r3
 8007342:	0c9b      	lsrs	r3, r3, #18
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007348:	e002      	b.n	8007350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3b01      	subs	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007350:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735c:	d102      	bne.n	8007364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f2      	bne.n	800734a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800736c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007370:	d110      	bne.n	8007394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e00f      	b.n	8007396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007382:	d007      	beq.n	8007394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800738c:	4a04      	ldr	r2, [pc, #16]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800738e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr
 80073a0:	40007000 	.word	0x40007000
 80073a4:	200003cc 	.word	0x200003cc
 80073a8:	431bde83 	.word	0x431bde83

080073ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d102      	bne.n	80073c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f000 bc10 	b.w	8007be0 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c0:	4b96      	ldr	r3, [pc, #600]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 030c 	and.w	r3, r3, #12
 80073c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073ca:	4b94      	ldr	r3, [pc, #592]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 80e4 	beq.w	80075aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <HAL_RCC_OscConfig+0x4c>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b0c      	cmp	r3, #12
 80073ec:	f040 808b 	bne.w	8007506 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	f040 8087 	bne.w	8007506 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073f8:	4b88      	ldr	r3, [pc, #544]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_RCC_OscConfig+0x64>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e3e7      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	4b81      	ldr	r3, [pc, #516]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d004      	beq.n	800742a <HAL_RCC_OscConfig+0x7e>
 8007420:	4b7e      	ldr	r3, [pc, #504]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007428:	e005      	b.n	8007436 <HAL_RCC_OscConfig+0x8a>
 800742a:	4b7c      	ldr	r3, [pc, #496]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800742c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007430:	091b      	lsrs	r3, r3, #4
 8007432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007436:	4293      	cmp	r3, r2
 8007438:	d223      	bcs.n	8007482 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fd76 	bl	8007f30 <RCC_SetFlashLatencyFromMSIRange>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e3c8      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800744e:	4b73      	ldr	r3, [pc, #460]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a72      	ldr	r2, [pc, #456]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007454:	f043 0308 	orr.w	r3, r3, #8
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	4b70      	ldr	r3, [pc, #448]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	496d      	ldr	r1, [pc, #436]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007468:	4313      	orrs	r3, r2
 800746a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800746c:	4b6b      	ldr	r3, [pc, #428]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	4968      	ldr	r1, [pc, #416]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800747c:	4313      	orrs	r3, r2
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	e025      	b.n	80074ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007482:	4b66      	ldr	r3, [pc, #408]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a65      	ldr	r2, [pc, #404]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007488:	f043 0308 	orr.w	r3, r3, #8
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	4b63      	ldr	r3, [pc, #396]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	4960      	ldr	r1, [pc, #384]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800749c:	4313      	orrs	r3, r2
 800749e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074a0:	4b5e      	ldr	r3, [pc, #376]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	495b      	ldr	r1, [pc, #364]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fd36 	bl	8007f30 <RCC_SetFlashLatencyFromMSIRange>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e388      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074ce:	f000 fc6f 	bl	8007db0 <HAL_RCC_GetSysClockFreq>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b51      	ldr	r3, [pc, #324]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	4950      	ldr	r1, [pc, #320]	; (8007620 <HAL_RCC_OscConfig+0x274>)
 80074e0:	5ccb      	ldrb	r3, [r1, r3]
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	4a4e      	ldr	r2, [pc, #312]	; (8007624 <HAL_RCC_OscConfig+0x278>)
 80074ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80074ee:	4b4e      	ldr	r3, [pc, #312]	; (8007628 <HAL_RCC_OscConfig+0x27c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fc36 	bl	8005d64 <HAL_InitTick>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d052      	beq.n	80075a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	e36c      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d032      	beq.n	8007574 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800750e:	4b43      	ldr	r3, [pc, #268]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a42      	ldr	r2, [pc, #264]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800751a:	f7fe fc71 	bl	8005e00 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007522:	f7fe fc6d 	bl	8005e00 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e355      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007534:	4b39      	ldr	r3, [pc, #228]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0f0      	beq.n	8007522 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007540:	4b36      	ldr	r3, [pc, #216]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a35      	ldr	r2, [pc, #212]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007546:	f043 0308 	orr.w	r3, r3, #8
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	4b33      	ldr	r3, [pc, #204]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	4930      	ldr	r1, [pc, #192]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800755e:	4b2f      	ldr	r3, [pc, #188]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	492b      	ldr	r1, [pc, #172]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800756e:	4313      	orrs	r3, r2
 8007570:	604b      	str	r3, [r1, #4]
 8007572:	e01a      	b.n	80075aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007574:	4b29      	ldr	r3, [pc, #164]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a28      	ldr	r2, [pc, #160]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007580:	f7fe fc3e 	bl	8005e00 <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007588:	f7fe fc3a 	bl	8005e00 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e322      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800759a:	4b20      	ldr	r3, [pc, #128]	; (800761c <HAL_RCC_OscConfig+0x270>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f0      	bne.n	8007588 <HAL_RCC_OscConfig+0x1dc>
 80075a6:	e000      	b.n	80075aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d073      	beq.n	800769e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d005      	beq.n	80075c8 <HAL_RCC_OscConfig+0x21c>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	d10e      	bne.n	80075e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d10b      	bne.n	80075e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c8:	4b14      	ldr	r3, [pc, #80]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d063      	beq.n	800769c <HAL_RCC_OscConfig+0x2f0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d15f      	bne.n	800769c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e2ff      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e8:	d106      	bne.n	80075f8 <HAL_RCC_OscConfig+0x24c>
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a0b      	ldr	r2, [pc, #44]	; (800761c <HAL_RCC_OscConfig+0x270>)
 80075f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	e025      	b.n	8007644 <HAL_RCC_OscConfig+0x298>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007600:	d114      	bne.n	800762c <HAL_RCC_OscConfig+0x280>
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a05      	ldr	r2, [pc, #20]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a02      	ldr	r2, [pc, #8]	; (800761c <HAL_RCC_OscConfig+0x270>)
 8007614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e013      	b.n	8007644 <HAL_RCC_OscConfig+0x298>
 800761c:	40021000 	.word	0x40021000
 8007620:	0800c358 	.word	0x0800c358
 8007624:	200003cc 	.word	0x200003cc
 8007628:	200003d0 	.word	0x200003d0
 800762c:	4ba0      	ldr	r3, [pc, #640]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a9f      	ldr	r2, [pc, #636]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	4b9d      	ldr	r3, [pc, #628]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a9c      	ldr	r2, [pc, #624]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800763e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d013      	beq.n	8007674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fe fbd8 	bl	8005e00 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007654:	f7fe fbd4 	bl	8005e00 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b64      	cmp	r3, #100	; 0x64
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e2bc      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007666:	4b92      	ldr	r3, [pc, #584]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <HAL_RCC_OscConfig+0x2a8>
 8007672:	e014      	b.n	800769e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007674:	f7fe fbc4 	bl	8005e00 <HAL_GetTick>
 8007678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800767a:	e008      	b.n	800768e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800767c:	f7fe fbc0 	bl	8005e00 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b64      	cmp	r3, #100	; 0x64
 8007688:	d901      	bls.n	800768e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e2a8      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800768e:	4b88      	ldr	r3, [pc, #544]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1f0      	bne.n	800767c <HAL_RCC_OscConfig+0x2d0>
 800769a:	e000      	b.n	800769e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800769c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d060      	beq.n	800776c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d005      	beq.n	80076bc <HAL_RCC_OscConfig+0x310>
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	d119      	bne.n	80076ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d116      	bne.n	80076ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076bc:	4b7c      	ldr	r3, [pc, #496]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <HAL_RCC_OscConfig+0x328>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e285      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d4:	4b76      	ldr	r3, [pc, #472]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	061b      	lsls	r3, r3, #24
 80076e2:	4973      	ldr	r1, [pc, #460]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e8:	e040      	b.n	800776c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d023      	beq.n	800773a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076f2:	4b6f      	ldr	r3, [pc, #444]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a6e      	ldr	r2, [pc, #440]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80076f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fe:	f7fe fb7f 	bl	8005e00 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007704:	e008      	b.n	8007718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007706:	f7fe fb7b 	bl	8005e00 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e263      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007718:	4b65      	ldr	r3, [pc, #404]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0f0      	beq.n	8007706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007724:	4b62      	ldr	r3, [pc, #392]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	061b      	lsls	r3, r3, #24
 8007732:	495f      	ldr	r1, [pc, #380]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007734:	4313      	orrs	r3, r2
 8007736:	604b      	str	r3, [r1, #4]
 8007738:	e018      	b.n	800776c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800773a:	4b5d      	ldr	r3, [pc, #372]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a5c      	ldr	r2, [pc, #368]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007746:	f7fe fb5b 	bl	8005e00 <HAL_GetTick>
 800774a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800774e:	f7fe fb57 	bl	8005e00 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e23f      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007760:	4b53      	ldr	r3, [pc, #332]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f0      	bne.n	800774e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d03c      	beq.n	80077f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01c      	beq.n	80077ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007780:	4b4b      	ldr	r3, [pc, #300]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007786:	4a4a      	ldr	r2, [pc, #296]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007790:	f7fe fb36 	bl	8005e00 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007798:	f7fe fb32 	bl	8005e00 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e21a      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077aa:	4b41      	ldr	r3, [pc, #260]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80077ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0ef      	beq.n	8007798 <HAL_RCC_OscConfig+0x3ec>
 80077b8:	e01b      	b.n	80077f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ba:	4b3d      	ldr	r3, [pc, #244]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80077bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c0:	4a3b      	ldr	r2, [pc, #236]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ca:	f7fe fb19 	bl	8005e00 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077d2:	f7fe fb15 	bl	8005e00 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e1fd      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077e4:	4b32      	ldr	r3, [pc, #200]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80077e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1ef      	bne.n	80077d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80a6 	beq.w	800794c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007800:	2300      	movs	r3, #0
 8007802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007804:	4b2a      	ldr	r3, [pc, #168]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10d      	bne.n	800782c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007810:	4b27      	ldr	r3, [pc, #156]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	4a26      	ldr	r2, [pc, #152]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800781a:	6593      	str	r3, [r2, #88]	; 0x58
 800781c:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007824:	60bb      	str	r3, [r7, #8]
 8007826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007828:	2301      	movs	r3, #1
 800782a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800782c:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <HAL_RCC_OscConfig+0x508>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d118      	bne.n	800786a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <HAL_RCC_OscConfig+0x508>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <HAL_RCC_OscConfig+0x508>)
 800783e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007844:	f7fe fadc 	bl	8005e00 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800784c:	f7fe fad8 	bl	8005e00 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1c0      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800785e:	4b15      	ldr	r3, [pc, #84]	; (80078b4 <HAL_RCC_OscConfig+0x508>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f0      	beq.n	800784c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d108      	bne.n	8007884 <HAL_RCC_OscConfig+0x4d8>
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007878:	4a0d      	ldr	r2, [pc, #52]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007882:	e029      	b.n	80078d8 <HAL_RCC_OscConfig+0x52c>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b05      	cmp	r3, #5
 800788a:	d115      	bne.n	80078b8 <HAL_RCC_OscConfig+0x50c>
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007892:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 8007894:	f043 0304 	orr.w	r3, r3, #4
 8007898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a2:	4a03      	ldr	r2, [pc, #12]	; (80078b0 <HAL_RCC_OscConfig+0x504>)
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078ac:	e014      	b.n	80078d8 <HAL_RCC_OscConfig+0x52c>
 80078ae:	bf00      	nop
 80078b0:	40021000 	.word	0x40021000
 80078b4:	40007000 	.word	0x40007000
 80078b8:	4b9a      	ldr	r3, [pc, #616]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80078ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078be:	4a99      	ldr	r2, [pc, #612]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078c8:	4b96      	ldr	r3, [pc, #600]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80078ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ce:	4a95      	ldr	r2, [pc, #596]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80078d0:	f023 0304 	bic.w	r3, r3, #4
 80078d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d016      	beq.n	800790e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e0:	f7fe fa8e 	bl	8005e00 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078e6:	e00a      	b.n	80078fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e8:	f7fe fa8a 	bl	8005e00 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e170      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078fe:	4b89      	ldr	r3, [pc, #548]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0ed      	beq.n	80078e8 <HAL_RCC_OscConfig+0x53c>
 800790c:	e015      	b.n	800793a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790e:	f7fe fa77 	bl	8005e00 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007914:	e00a      	b.n	800792c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007916:	f7fe fa73 	bl	8005e00 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	f241 3288 	movw	r2, #5000	; 0x1388
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e159      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800792c:	4b7d      	ldr	r3, [pc, #500]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1ed      	bne.n	8007916 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800793a:	7ffb      	ldrb	r3, [r7, #31]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d105      	bne.n	800794c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007940:	4b78      	ldr	r3, [pc, #480]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007944:	4a77      	ldr	r2, [pc, #476]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800794a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	d03c      	beq.n	80079d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01c      	beq.n	800799a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007960:	4b70      	ldr	r3, [pc, #448]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007966:	4a6f      	ldr	r2, [pc, #444]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007970:	f7fe fa46 	bl	8005e00 <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007978:	f7fe fa42 	bl	8005e00 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e12a      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800798a:	4b66      	ldr	r3, [pc, #408]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 800798c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0ef      	beq.n	8007978 <HAL_RCC_OscConfig+0x5cc>
 8007998:	e01b      	b.n	80079d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800799a:	4b62      	ldr	r3, [pc, #392]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 800799c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079a0:	4a60      	ldr	r2, [pc, #384]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079aa:	f7fe fa29 	bl	8005e00 <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079b2:	f7fe fa25 	bl	8005e00 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e10d      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079c4:	4b57      	ldr	r3, [pc, #348]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80079c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1ef      	bne.n	80079b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8101 	beq.w	8007bde <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	f040 80c9 	bne.w	8007b78 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80079e6:	4b4f      	ldr	r3, [pc, #316]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f003 0203 	and.w	r2, r3, #3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d12c      	bne.n	8007a54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	3b01      	subs	r3, #1
 8007a06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d123      	bne.n	8007a54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d11b      	bne.n	8007a54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d113      	bne.n	8007a54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d109      	bne.n	8007a54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d06b      	beq.n	8007b2c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b0c      	cmp	r3, #12
 8007a58:	d062      	beq.n	8007b20 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a5a:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e0ba      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a6a:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a76:	f7fe f9c3 	bl	8005e00 <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a7e:	f7fe f9bf 	bl	8005e00 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e0a7      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a90:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f0      	bne.n	8007a7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a9c:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <HAL_RCC_OscConfig+0x77c>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007aac:	3a01      	subs	r2, #1
 8007aae:	0112      	lsls	r2, r2, #4
 8007ab0:	4311      	orrs	r1, r2
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ab6:	0212      	lsls	r2, r2, #8
 8007ab8:	4311      	orrs	r1, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007abe:	0852      	lsrs	r2, r2, #1
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	0552      	lsls	r2, r2, #21
 8007ac4:	4311      	orrs	r1, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007aca:	0852      	lsrs	r2, r2, #1
 8007acc:	3a01      	subs	r2, #1
 8007ace:	0652      	lsls	r2, r2, #25
 8007ad0:	4311      	orrs	r1, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ad6:	06d2      	lsls	r2, r2, #27
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	4912      	ldr	r1, [pc, #72]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007ae0:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a0f      	ldr	r2, [pc, #60]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007aea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a0c      	ldr	r2, [pc, #48]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007af6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007af8:	f7fe f982 	bl	8005e00 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b00:	f7fe f97e 	bl	8005e00 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e066      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_RCC_OscConfig+0x778>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b1e:	e05e      	b.n	8007bde <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e05d      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
 8007b24:	40021000 	.word	0x40021000
 8007b28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b2c:	4b2e      	ldr	r3, [pc, #184]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d152      	bne.n	8007bde <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b38:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2a      	ldr	r2, [pc, #168]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b44:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	4a27      	ldr	r2, [pc, #156]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b50:	f7fe f956 	bl	8005e00 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b58:	f7fe f952 	bl	8005e00 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e03a      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b6a:	4b1f      	ldr	r3, [pc, #124]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0f0      	beq.n	8007b58 <HAL_RCC_OscConfig+0x7ac>
 8007b76:	e032      	b.n	8007bde <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b0c      	cmp	r3, #12
 8007b7c:	d02d      	beq.n	8007bda <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b88:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b8a:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d105      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007b96:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	4a10      	ldr	r2, [pc, #64]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007ba8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb2:	f7fe f925 	bl	8005e00 <HAL_GetTick>
 8007bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bba:	f7fe f921 	bl	8005e00 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e009      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_RCC_OscConfig+0x83c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1f0      	bne.n	8007bba <HAL_RCC_OscConfig+0x80e>
 8007bd8:	e001      	b.n	8007bde <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40021000 	.word	0x40021000

08007bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e0c8      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c00:	4b66      	ldr	r3, [pc, #408]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d910      	bls.n	8007c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0e:	4b63      	ldr	r3, [pc, #396]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f023 0207 	bic.w	r2, r3, #7
 8007c16:	4961      	ldr	r1, [pc, #388]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c1e:	4b5f      	ldr	r3, [pc, #380]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0b0      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d04c      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d107      	bne.n	8007c54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c44:	4b56      	ldr	r3, [pc, #344]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d121      	bne.n	8007c94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e09e      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c5c:	4b50      	ldr	r3, [pc, #320]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d115      	bne.n	8007c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e092      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c74:	4b4a      	ldr	r3, [pc, #296]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e086      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c84:	4b46      	ldr	r3, [pc, #280]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e07e      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c94:	4b42      	ldr	r3, [pc, #264]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f023 0203 	bic.w	r2, r3, #3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	493f      	ldr	r1, [pc, #252]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca6:	f7fe f8ab 	bl	8005e00 <HAL_GetTick>
 8007caa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cac:	e00a      	b.n	8007cc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cae:	f7fe f8a7 	bl	8005e00 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e066      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cc4:	4b36      	ldr	r3, [pc, #216]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 020c 	and.w	r2, r3, #12
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d1eb      	bne.n	8007cae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d008      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ce2:	4b2f      	ldr	r3, [pc, #188]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	492c      	ldr	r1, [pc, #176]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b29      	ldr	r3, [pc, #164]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d210      	bcs.n	8007d24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 0207 	bic.w	r2, r3, #7
 8007d0a:	4924      	ldr	r1, [pc, #144]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b22      	ldr	r3, [pc, #136]	; (8007d9c <HAL_RCC_ClockConfig+0x1b0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e036      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d008      	beq.n	8007d42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d30:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	4918      	ldr	r1, [pc, #96]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d4e:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4910      	ldr	r1, [pc, #64]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d62:	f000 f825 	bl	8007db0 <HAL_RCC_GetSysClockFreq>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	091b      	lsrs	r3, r3, #4
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	490c      	ldr	r1, [pc, #48]	; (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d74:	5ccb      	ldrb	r3, [r1, r3]
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	4a0a      	ldr	r2, [pc, #40]	; (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <HAL_RCC_ClockConfig+0x1c0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd ffec 	bl	8005d64 <HAL_InitTick>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40022000 	.word	0x40022000
 8007da0:	40021000 	.word	0x40021000
 8007da4:	0800c358 	.word	0x0800c358
 8007da8:	200003cc 	.word	0x200003cc
 8007dac:	200003d0 	.word	0x200003d0

08007db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b089      	sub	sp, #36	; 0x24
 8007db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dbe:	4b3d      	ldr	r3, [pc, #244]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dc8:	4b3a      	ldr	r3, [pc, #232]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_RCC_GetSysClockFreq+0x34>
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b0c      	cmp	r3, #12
 8007ddc:	d121      	bne.n	8007e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d11e      	bne.n	8007e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007de4:	4b33      	ldr	r3, [pc, #204]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d107      	bne.n	8007e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007df0:	4b30      	ldr	r3, [pc, #192]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	e005      	b.n	8007e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e00:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	091b      	lsrs	r3, r3, #4
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e0c:	4a2a      	ldr	r2, [pc, #168]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e20:	e00a      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d102      	bne.n	8007e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e28:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	e004      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d101      	bne.n	8007e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e34:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0c      	cmp	r3, #12
 8007e3c:	d134      	bne.n	8007ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d003      	beq.n	8007e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d003      	beq.n	8007e5c <HAL_RCC_GetSysClockFreq+0xac>
 8007e54:	e005      	b.n	8007e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e56:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e58:	617b      	str	r3, [r7, #20]
      break;
 8007e5a:	e005      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e5c:	4b18      	ldr	r3, [pc, #96]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e5e:	617b      	str	r3, [r7, #20]
      break;
 8007e60:	e002      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	617b      	str	r3, [r7, #20]
      break;
 8007e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e68:	4b12      	ldr	r3, [pc, #72]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	091b      	lsrs	r3, r3, #4
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	3301      	adds	r3, #1
 8007e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	fb03 f202 	mul.w	r2, r3, r2
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e8e:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	0e5b      	lsrs	r3, r3, #25
 8007e94:	f003 0303 	and.w	r3, r3, #3
 8007e98:	3301      	adds	r3, #1
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3724      	adds	r7, #36	; 0x24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	0800c370 	.word	0x0800c370
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	007a1200 	.word	0x007a1200

08007ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007eca:	681b      	ldr	r3, [r3, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	200003cc 	.word	0x200003cc

08007ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007edc:	f7ff fff2 	bl	8007ec4 <HAL_RCC_GetHCLKFreq>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	4904      	ldr	r1, [pc, #16]	; (8007f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eee:	5ccb      	ldrb	r3, [r1, r3]
 8007ef0:	f003 031f 	and.w	r3, r3, #31
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40021000 	.word	0x40021000
 8007f00:	0800c368 	.word	0x0800c368

08007f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f08:	f7ff ffdc 	bl	8007ec4 <HAL_RCC_GetHCLKFreq>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	0adb      	lsrs	r3, r3, #11
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	4904      	ldr	r1, [pc, #16]	; (8007f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f1a:	5ccb      	ldrb	r3, [r1, r3]
 8007f1c:	f003 031f 	and.w	r3, r3, #31
 8007f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	0800c368 	.word	0x0800c368

08007f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f38:	2300      	movs	r3, #0
 8007f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f48:	f7ff f9d0 	bl	80072ec <HAL_PWREx_GetVoltageRange>
 8007f4c:	6178      	str	r0, [r7, #20]
 8007f4e:	e014      	b.n	8007f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f50:	4b25      	ldr	r3, [pc, #148]	; (8007fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f54:	4a24      	ldr	r2, [pc, #144]	; (8007fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007f68:	f7ff f9c0 	bl	80072ec <HAL_PWREx_GetVoltageRange>
 8007f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	; (8007fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	4a1d      	ldr	r2, [pc, #116]	; (8007fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f80:	d10b      	bne.n	8007f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b80      	cmp	r3, #128	; 0x80
 8007f86:	d919      	bls.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8007f8c:	d902      	bls.n	8007f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f8e:	2302      	movs	r3, #2
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	e013      	b.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f94:	2301      	movs	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	e010      	b.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b80      	cmp	r3, #128	; 0x80
 8007f9e:	d902      	bls.n	8007fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	e00a      	b.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b80      	cmp	r3, #128	; 0x80
 8007faa:	d102      	bne.n	8007fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fac:	2302      	movs	r3, #2
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	e004      	b.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b70      	cmp	r3, #112	; 0x70
 8007fb6:	d101      	bne.n	8007fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fb8:	2301      	movs	r3, #1
 8007fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f023 0207 	bic.w	r2, r3, #7
 8007fc4:	4909      	ldr	r1, [pc, #36]	; (8007fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d001      	beq.n	8007fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	40022000 	.word	0x40022000

08007ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008008:	2b00      	cmp	r3, #0
 800800a:	d031      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008010:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008014:	d01a      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008016:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800801a:	d814      	bhi.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800801c:	2b00      	cmp	r3, #0
 800801e:	d009      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008024:	d10f      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008026:	4b5d      	ldr	r3, [pc, #372]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	4a5c      	ldr	r2, [pc, #368]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800802c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008030:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008032:	e00c      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f9ce 	bl	80083dc <RCCEx_PLLSAI1_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008044:	e003      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	74fb      	strb	r3, [r7, #19]
      break;
 800804a:	e000      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800804c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800804e:	7cfb      	ldrb	r3, [r7, #19]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008054:	4b51      	ldr	r3, [pc, #324]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	494e      	ldr	r1, [pc, #312]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800806a:	e001      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806c:	7cfb      	ldrb	r3, [r7, #19]
 800806e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 809e 	beq.w	80081ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800807e:	2300      	movs	r3, #0
 8008080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008082:	4b46      	ldr	r3, [pc, #280]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008092:	2300      	movs	r3, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008098:	4b40      	ldr	r3, [pc, #256]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809c:	4a3f      	ldr	r2, [pc, #252]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800809e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a2:	6593      	str	r3, [r2, #88]	; 0x58
 80080a4:	4b3d      	ldr	r3, [pc, #244]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ac:	60bb      	str	r3, [r7, #8]
 80080ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080b0:	2301      	movs	r3, #1
 80080b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080b4:	4b3a      	ldr	r3, [pc, #232]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a39      	ldr	r2, [pc, #228]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80080ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080c0:	f7fd fe9e 	bl	8005e00 <HAL_GetTick>
 80080c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080c6:	e009      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c8:	f7fd fe9a 	bl	8005e00 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d902      	bls.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	74fb      	strb	r3, [r7, #19]
        break;
 80080da:	e005      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080dc:	4b30      	ldr	r3, [pc, #192]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0ef      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80080e8:	7cfb      	ldrb	r3, [r7, #19]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d15a      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080ee:	4b2b      	ldr	r3, [pc, #172]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	429a      	cmp	r2, r3
 8008108:	d019      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008114:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008116:	4b21      	ldr	r3, [pc, #132]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811c:	4a1f      	ldr	r2, [pc, #124]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800811e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800812e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008136:	4a19      	ldr	r2, [pc, #100]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d016      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008148:	f7fd fe5a 	bl	8005e00 <HAL_GetTick>
 800814c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800814e:	e00b      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008150:	f7fd fe56 	bl	8005e00 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	4293      	cmp	r3, r2
 8008160:	d902      	bls.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	74fb      	strb	r3, [r7, #19]
            break;
 8008166:	e006      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0ec      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008176:	7cfb      	ldrb	r3, [r7, #19]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817c:	4b07      	ldr	r3, [pc, #28]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800817e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818a:	4904      	ldr	r1, [pc, #16]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008192:	e009      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008194:	7cfb      	ldrb	r3, [r7, #19]
 8008196:	74bb      	strb	r3, [r7, #18]
 8008198:	e006      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800819a:	bf00      	nop
 800819c:	40021000 	.word	0x40021000
 80081a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081a8:	7c7b      	ldrb	r3, [r7, #17]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081ae:	4b8a      	ldr	r3, [pc, #552]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	4a89      	ldr	r2, [pc, #548]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081c6:	4b84      	ldr	r3, [pc, #528]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	f023 0203 	bic.w	r2, r3, #3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	4980      	ldr	r1, [pc, #512]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081e8:	4b7b      	ldr	r3, [pc, #492]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	f023 020c 	bic.w	r2, r3, #12
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	4978      	ldr	r1, [pc, #480]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800820a:	4b73      	ldr	r3, [pc, #460]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800820c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	496f      	ldr	r1, [pc, #444]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800822c:	4b6a      	ldr	r3, [pc, #424]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800822e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008232:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	4967      	ldr	r1, [pc, #412]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800824e:	4b62      	ldr	r3, [pc, #392]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	495e      	ldr	r1, [pc, #376]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008270:	4b59      	ldr	r3, [pc, #356]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	4956      	ldr	r1, [pc, #344]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008292:	4b51      	ldr	r3, [pc, #324]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	494d      	ldr	r1, [pc, #308]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d028      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b4:	4b48      	ldr	r3, [pc, #288]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	4945      	ldr	r1, [pc, #276]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082d2:	d106      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082d4:	4b40      	ldr	r3, [pc, #256]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	4a3f      	ldr	r2, [pc, #252]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082de:	60d3      	str	r3, [r2, #12]
 80082e0:	e011      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082ea:	d10c      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	2101      	movs	r1, #1
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f872 	bl	80083dc <RCCEx_PLLSAI1_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80082fc:	7cfb      	ldrb	r3, [r7, #19]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008302:	7cfb      	ldrb	r3, [r7, #19]
 8008304:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d028      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008312:	4b31      	ldr	r3, [pc, #196]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008320:	492d      	ldr	r1, [pc, #180]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008330:	d106      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008332:	4b29      	ldr	r3, [pc, #164]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	4a28      	ldr	r2, [pc, #160]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800833c:	60d3      	str	r3, [r2, #12]
 800833e:	e011      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008348:	d10c      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f843 	bl	80083dc <RCCEx_PLLSAI1_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800835a:	7cfb      	ldrb	r3, [r7, #19]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01c      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008370:	4b19      	ldr	r3, [pc, #100]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800837e:	4916      	ldr	r1, [pc, #88]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800838a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838e:	d10c      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3304      	adds	r3, #4
 8008394:	2102      	movs	r1, #2
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f820 	bl	80083dc <RCCEx_PLLSAI1_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083a0:	7cfb      	ldrb	r3, [r7, #19]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80083a6:	7cfb      	ldrb	r3, [r7, #19]
 80083a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083b6:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	4904      	ldr	r1, [pc, #16]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40021000 	.word	0x40021000

080083dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80083ea:	4b74      	ldr	r3, [pc, #464]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d018      	beq.n	8008428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80083f6:	4b71      	ldr	r3, [pc, #452]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f003 0203 	and.w	r2, r3, #3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d10d      	bne.n	8008422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
       ||
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800840e:	4b6b      	ldr	r3, [pc, #428]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	091b      	lsrs	r3, r3, #4
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
       ||
 800841e:	429a      	cmp	r2, r3
 8008420:	d047      	beq.n	80084b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	e044      	b.n	80084b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d018      	beq.n	8008462 <RCCEx_PLLSAI1_Config+0x86>
 8008430:	2b03      	cmp	r3, #3
 8008432:	d825      	bhi.n	8008480 <RCCEx_PLLSAI1_Config+0xa4>
 8008434:	2b01      	cmp	r3, #1
 8008436:	d002      	beq.n	800843e <RCCEx_PLLSAI1_Config+0x62>
 8008438:	2b02      	cmp	r3, #2
 800843a:	d009      	beq.n	8008450 <RCCEx_PLLSAI1_Config+0x74>
 800843c:	e020      	b.n	8008480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800843e:	4b5f      	ldr	r3, [pc, #380]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d11d      	bne.n	8008486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800844e:	e01a      	b.n	8008486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008450:	4b5a      	ldr	r3, [pc, #360]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008458:	2b00      	cmp	r3, #0
 800845a:	d116      	bne.n	800848a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008460:	e013      	b.n	800848a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008462:	4b56      	ldr	r3, [pc, #344]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10f      	bne.n	800848e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800846e:	4b53      	ldr	r3, [pc, #332]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800847e:	e006      	b.n	800848e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	73fb      	strb	r3, [r7, #15]
      break;
 8008484:	e004      	b.n	8008490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008486:	bf00      	nop
 8008488:	e002      	b.n	8008490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800848e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10d      	bne.n	80084b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008496:	4b49      	ldr	r3, [pc, #292]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	430b      	orrs	r3, r1
 80084ac:	4943      	ldr	r1, [pc, #268]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d17c      	bne.n	80085b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084b8:	4b40      	ldr	r3, [pc, #256]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c4:	f7fd fc9c 	bl	8005e00 <HAL_GetTick>
 80084c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084ca:	e009      	b.n	80084e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084cc:	f7fd fc98 	bl	8005e00 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d902      	bls.n	80084e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
        break;
 80084de:	e005      	b.n	80084ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084e0:	4b36      	ldr	r3, [pc, #216]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1ef      	bne.n	80084cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d15f      	bne.n	80085b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d110      	bne.n	800851a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008500:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6892      	ldr	r2, [r2, #8]
 8008508:	0211      	lsls	r1, r2, #8
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	68d2      	ldr	r2, [r2, #12]
 800850e:	06d2      	lsls	r2, r2, #27
 8008510:	430a      	orrs	r2, r1
 8008512:	492a      	ldr	r1, [pc, #168]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008514:	4313      	orrs	r3, r2
 8008516:	610b      	str	r3, [r1, #16]
 8008518:	e027      	b.n	800856a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d112      	bne.n	8008546 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008520:	4b26      	ldr	r3, [pc, #152]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008528:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6892      	ldr	r2, [r2, #8]
 8008530:	0211      	lsls	r1, r2, #8
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6912      	ldr	r2, [r2, #16]
 8008536:	0852      	lsrs	r2, r2, #1
 8008538:	3a01      	subs	r2, #1
 800853a:	0552      	lsls	r2, r2, #21
 800853c:	430a      	orrs	r2, r1
 800853e:	491f      	ldr	r1, [pc, #124]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008540:	4313      	orrs	r3, r2
 8008542:	610b      	str	r3, [r1, #16]
 8008544:	e011      	b.n	800856a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008546:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800854e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6892      	ldr	r2, [r2, #8]
 8008556:	0211      	lsls	r1, r2, #8
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6952      	ldr	r2, [r2, #20]
 800855c:	0852      	lsrs	r2, r2, #1
 800855e:	3a01      	subs	r2, #1
 8008560:	0652      	lsls	r2, r2, #25
 8008562:	430a      	orrs	r2, r1
 8008564:	4915      	ldr	r1, [pc, #84]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008566:	4313      	orrs	r3, r2
 8008568:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008574:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008576:	f7fd fc43 	bl	8005e00 <HAL_GetTick>
 800857a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800857c:	e009      	b.n	8008592 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800857e:	f7fd fc3f 	bl	8005e00 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d902      	bls.n	8008592 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	73fb      	strb	r3, [r7, #15]
          break;
 8008590:	e005      	b.n	800859e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0ef      	beq.n	800857e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	4903      	ldr	r1, [pc, #12]	; (80085bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40021000 	.word	0x40021000

080085c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d06c      	beq.n	80086ac <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7fd fa16 	bl	8005a18 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	22ca      	movs	r2, #202	; 0xca
 80085fa:	625a      	str	r2, [r3, #36]	; 0x24
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2253      	movs	r2, #83	; 0x53
 8008602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fbcb 	bl	8008da0 <RTC_EnterInitMode>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d14b      	bne.n	80086ac <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6899      	ldr	r1, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	68d2      	ldr	r2, [r2, #12]
 800864e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6919      	ldr	r1, [r3, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	041a      	lsls	r2, r3, #16
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fbcf 	bl	8008e08 <RTC_ExitInitMode>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d11b      	bne.n	80086ac <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0203 	bic.w	r2, r2, #3
 8008682:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69da      	ldr	r2, [r3, #28]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	22ff      	movs	r2, #255	; 0xff
 80086a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80086b6:	b590      	push	{r4, r7, lr}
 80086b8:	b087      	sub	sp, #28
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_RTC_SetTime+0x1a>
 80086cc:	2302      	movs	r3, #2
 80086ce:	e08b      	b.n	80087e8 <HAL_RTC_SetTime+0x132>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	22ca      	movs	r2, #202	; 0xca
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2253      	movs	r2, #83	; 0x53
 80086ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fb55 	bl	8008da0 <RTC_EnterInitMode>
 80086f6:	4603      	mov	r3, r0
 80086f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80086fa:	7cfb      	ldrb	r3, [r7, #19]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d163      	bne.n	80087c8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d126      	bne.n	8008754 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fbb0 	bl	8008e84 <RTC_ByteToBcd2>
 8008724:	4603      	mov	r3, r0
 8008726:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fba9 	bl	8008e84 <RTC_ByteToBcd2>
 8008732:	4603      	mov	r3, r0
 8008734:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008736:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	789b      	ldrb	r3, [r3, #2]
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fba1 	bl	8008e84 <RTC_ByteToBcd2>
 8008742:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008744:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	78db      	ldrb	r3, [r3, #3]
 800874c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e018      	b.n	8008786 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2200      	movs	r2, #0
 8008766:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008774:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800877a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	78db      	ldrb	r3, [r3, #3]
 8008780:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008782:	4313      	orrs	r3, r2
 8008784:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008790:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008794:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6899      	ldr	r1, [r3, #8]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	431a      	orrs	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fb22 	bl	8008e08 <RTC_ExitInitMode>
 80087c4:	4603      	mov	r3, r0
 80087c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	22ff      	movs	r2, #255	; 0xff
 80087ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80087d0:	7cfb      	ldrb	r3, [r7, #19]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80087e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}

080087f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800881e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008822:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	0c1b      	lsrs	r3, r3, #16
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882e:	b2da      	uxtb	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	b2db      	uxtb	r3, r3
 800883a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884c:	b2da      	uxtb	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	0d9b      	lsrs	r3, r3, #22
 8008856:	b2db      	uxtb	r3, r3
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d11a      	bne.n	800889e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fb28 	bl	8008ec2 <RTC_Bcd2ToByte>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fb1f 	bl	8008ec2 <RTC_Bcd2ToByte>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	789b      	ldrb	r3, [r3, #2]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fb16 	bl	8008ec2 <RTC_Bcd2ToByte>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088a8:	b590      	push	{r4, r7, lr}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_RTC_SetDate+0x1a>
 80088be:	2302      	movs	r3, #2
 80088c0:	e075      	b.n	80089ae <HAL_RTC_SetDate+0x106>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10e      	bne.n	80088f6 <HAL_RTC_SetDate+0x4e>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	f023 0310 	bic.w	r3, r3, #16
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	330a      	adds	r3, #10
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d11c      	bne.n	8008936 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	78db      	ldrb	r3, [r3, #3]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fabf 	bl	8008e84 <RTC_ByteToBcd2>
 8008906:	4603      	mov	r3, r0
 8008908:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fab8 	bl	8008e84 <RTC_ByteToBcd2>
 8008914:	4603      	mov	r3, r0
 8008916:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008918:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	789b      	ldrb	r3, [r3, #2]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fab0 	bl	8008e84 <RTC_ByteToBcd2>
 8008924:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008926:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	e00e      	b.n	8008954 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	78db      	ldrb	r3, [r3, #3]
 800893a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008942:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008948:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	22ca      	movs	r2, #202	; 0xca
 800895a:	625a      	str	r2, [r3, #36]	; 0x24
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2253      	movs	r2, #83	; 0x53
 8008962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fa1b 	bl	8008da0 <RTC_EnterInitMode>
 800896a:	4603      	mov	r3, r0
 800896c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800896e:	7cfb      	ldrb	r3, [r7, #19]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10c      	bne.n	800898e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800897e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008982:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa3f 	bl	8008e08 <RTC_ExitInitMode>
 800898a:	4603      	mov	r3, r0
 800898c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	22ff      	movs	r2, #255	; 0xff
 8008994:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008996:	7cfb      	ldrb	r3, [r7, #19]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80089ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd90      	pop	{r4, r7, pc}

080089b6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	0c1b      	lsrs	r3, r3, #16
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	0b5b      	lsrs	r3, r3, #13
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11a      	bne.n	8008a46 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	78db      	ldrb	r3, [r3, #3]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fa54 	bl	8008ec2 <RTC_Bcd2ToByte>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fa4b 	bl	8008ec2 <RTC_Bcd2ToByte>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	789b      	ldrb	r3, [r3, #2]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fa42 	bl	8008ec2 <RTC_Bcd2ToByte>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_RTC_SetAlarm_IT+0x1a>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e127      	b.n	8008cba <HAL_RTC_SetAlarm_IT+0x26a>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2202      	movs	r2, #2
 8008a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d137      	bne.n	8008af0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d102      	bne.n	8008a94 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2200      	movs	r2, #0
 8008a92:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f9f3 	bl	8008e84 <RTC_ByteToBcd2>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f9ec 	bl	8008e84 <RTC_ByteToBcd2>
 8008aac:	4603      	mov	r3, r0
 8008aae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ab0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	789b      	ldrb	r3, [r3, #2]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f9e4 	bl	8008e84 <RTC_ByteToBcd2>
 8008abc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008abe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	78db      	ldrb	r3, [r3, #3]
 8008ac6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ac8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f9d6 	bl	8008e84 <RTC_ByteToBcd2>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008adc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008ae4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008aea:	4313      	orrs	r3, r2
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	e023      	b.n	8008b38 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d102      	bne.n	8008b04 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2200      	movs	r2, #0
 8008b02:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	785b      	ldrb	r3, [r3, #1]
 8008b0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b10:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	78db      	ldrb	r3, [r3, #3]
 8008b1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b34:	4313      	orrs	r3, r2
 8008b36:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	22ca      	movs	r2, #202	; 0xca
 8008b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2253      	movs	r2, #83	; 0x53
 8008b52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5c:	d14a      	bne.n	8008bf4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b6c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008b7e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8008b80:	f7fd f93e 	bl	8005e00 <HAL_GetTick>
 8008b84:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b86:	e015      	b.n	8008bb4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b88:	f7fd f93a 	bl	8005e00 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b96:	d90d      	bls.n	8008bb4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	22ff      	movs	r2, #255	; 0xff
 8008b9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e082      	b.n	8008cba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0e2      	beq.n	8008b88 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008be0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bf0:	609a      	str	r2, [r3, #8]
 8008bf2:	e049      	b.n	8008c88 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c02:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008c14:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8008c16:	f7fd f8f3 	bl	8005e00 <HAL_GetTick>
 8008c1a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c1c:	e015      	b.n	8008c4a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c1e:	f7fd f8ef 	bl	8005e00 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c2c:	d90d      	bls.n	8008c4a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	22ff      	movs	r2, #255	; 0xff
 8008c34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e037      	b.n	8008cba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0e2      	beq.n	8008c1e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c86:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a0d      	ldr	r2, [pc, #52]	; (8008cc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8008c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c92:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <HAL_RTC_SetAlarm_IT+0x274>)
 8008c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c9e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	22ff      	movs	r2, #255	; 0xff
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3724      	adds	r7, #36	; 0x24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd90      	pop	{r4, r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40010400 	.word	0x40010400

08008cc8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008cd0:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008cd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008cd6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d012      	beq.n	8008d0c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008d04:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fb fa90 	bl	800422c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d012      	beq.n	8008d40 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008d38:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f8da 	bl	8008ef4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40010400 	.word	0x40010400

08008d54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d6a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008d6c:	f7fd f848 	bl	8005e00 <HAL_GetTick>
 8008d70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d72:	e009      	b.n	8008d88 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d74:	f7fd f844 	bl	8005e00 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d82:	d901      	bls.n	8008d88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e007      	b.n	8008d98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0ee      	beq.n	8008d74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d120      	bne.n	8008dfc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008dc4:	f7fd f81c 	bl	8005e00 <HAL_GetTick>
 8008dc8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008dca:	e00d      	b.n	8008de8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008dcc:	f7fd f818 	bl	8005e00 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dda:	d905      	bls.n	8008de8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2203      	movs	r2, #3
 8008de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d102      	bne.n	8008dfc <RTC_EnterInitMode+0x5c>
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d1e7      	bne.n	8008dcc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008e14:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e1e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e20:	4b17      	ldr	r3, [pc, #92]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10c      	bne.n	8008e46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff ff91 	bl	8008d54 <HAL_RTC_WaitForSynchro>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01e      	beq.n	8008e76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	73fb      	strb	r3, [r7, #15]
 8008e44:	e017      	b.n	8008e76 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	4a0d      	ldr	r2, [pc, #52]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e4c:	f023 0320 	bic.w	r3, r3, #32
 8008e50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff ff7e 	bl	8008d54 <HAL_RTC_WaitForSynchro>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2203      	movs	r2, #3
 8008e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <RTC_ExitInitMode+0x78>)
 8008e70:	f043 0320 	orr.w	r3, r3, #32
 8008e74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	40002800 	.word	0x40002800

08008e84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008e96:	e005      	b.n	8008ea4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	3b0a      	subs	r3, #10
 8008ea2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	2b09      	cmp	r3, #9
 8008ea8:	d8f6      	bhi.n	8008e98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr

08008ec2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	4603      	mov	r3, r0
 8008eca:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	091b      	lsrs	r3, r3, #4
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	f003 030f 	and.w	r3, r3, #15
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	b2db      	uxtb	r3, r3
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr

08008f06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e095      	b.n	8009044 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d108      	bne.n	8008f32 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f28:	d009      	beq.n	8008f3e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	61da      	str	r2, [r3, #28]
 8008f30:	e005      	b.n	8008f3e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d106      	bne.n	8008f5e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fc fdcd 	bl	8005af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2202      	movs	r2, #2
 8008f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f7e:	d902      	bls.n	8008f86 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e002      	b.n	8008f8c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f94:	d007      	beq.n	8008fa6 <HAL_SPI_Init+0xa0>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f9e:	d002      	beq.n	8008fa6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe8:	ea42 0103 	orr.w	r1, r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	f003 0204 	and.w	r2, r3, #4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	431a      	orrs	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009022:	ea42 0103 	orr.w	r1, r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	; 0x28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800905a:	2301      	movs	r3, #1
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_SPI_TransmitReceive+0x26>
 800906e:	2302      	movs	r3, #2
 8009070:	e1fb      	b.n	800946a <HAL_SPI_TransmitReceive+0x41e>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800907a:	f7fc fec1 	bl	8005e00 <HAL_GetTick>
 800907e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009086:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800908e:	887b      	ldrh	r3, [r7, #2]
 8009090:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009092:	887b      	ldrh	r3, [r7, #2]
 8009094:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009096:	7efb      	ldrb	r3, [r7, #27]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d00e      	beq.n	80090ba <HAL_SPI_TransmitReceive+0x6e>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090a2:	d106      	bne.n	80090b2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <HAL_SPI_TransmitReceive+0x66>
 80090ac:	7efb      	ldrb	r3, [r7, #27]
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d003      	beq.n	80090ba <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80090b2:	2302      	movs	r3, #2
 80090b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80090b8:	e1cd      	b.n	8009456 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_SPI_TransmitReceive+0x80>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_SPI_TransmitReceive+0x80>
 80090c6:	887b      	ldrh	r3, [r7, #2]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80090d2:	e1c0      	b.n	8009456 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d003      	beq.n	80090e8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2205      	movs	r2, #5
 80090e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	887a      	ldrh	r2, [r7, #2]
 80090f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	887a      	ldrh	r2, [r7, #2]
 8009100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	887a      	ldrh	r2, [r7, #2]
 800910e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	887a      	ldrh	r2, [r7, #2]
 8009114:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800912a:	d802      	bhi.n	8009132 <HAL_SPI_TransmitReceive+0xe6>
 800912c:	8a3b      	ldrh	r3, [r7, #16]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d908      	bls.n	8009144 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009140:	605a      	str	r2, [r3, #4]
 8009142:	e007      	b.n	8009154 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009152:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b40      	cmp	r3, #64	; 0x40
 8009160:	d007      	beq.n	8009172 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009170:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800917a:	d97c      	bls.n	8009276 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <HAL_SPI_TransmitReceive+0x13e>
 8009184:	8a7b      	ldrh	r3, [r7, #18]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d169      	bne.n	800925e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	881a      	ldrh	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	1c9a      	adds	r2, r3, #2
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ae:	e056      	b.n	800925e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d11b      	bne.n	80091f6 <HAL_SPI_TransmitReceive+0x1aa>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d016      	beq.n	80091f6 <HAL_SPI_TransmitReceive+0x1aa>
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d113      	bne.n	80091f6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b01      	cmp	r3, #1
 8009202:	d11c      	bne.n	800923e <HAL_SPI_TransmitReceive+0x1f2>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800920a:	b29b      	uxth	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d016      	beq.n	800923e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	b292      	uxth	r2, r2
 800921c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	1c9a      	adds	r2, r3, #2
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800922e:	b29b      	uxth	r3, r3
 8009230:	3b01      	subs	r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800923a:	2301      	movs	r3, #1
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800923e:	f7fc fddf 	bl	8005e00 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924a:	429a      	cmp	r2, r3
 800924c:	d807      	bhi.n	800925e <HAL_SPI_TransmitReceive+0x212>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d003      	beq.n	800925e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800925c:	e0fb      	b.n	8009456 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1a3      	bne.n	80091b0 <HAL_SPI_TransmitReceive+0x164>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d19d      	bne.n	80091b0 <HAL_SPI_TransmitReceive+0x164>
 8009274:	e0df      	b.n	8009436 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x23a>
 800927e:	8a7b      	ldrh	r3, [r7, #18]
 8009280:	2b01      	cmp	r3, #1
 8009282:	f040 80cb 	bne.w	800941c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800928a:	b29b      	uxth	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	d912      	bls.n	80092b6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	881a      	ldrh	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	1c9a      	adds	r2, r3, #2
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	3b02      	subs	r3, #2
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092b4:	e0b2      	b.n	800941c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	330c      	adds	r3, #12
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092dc:	e09e      	b.n	800941c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d134      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x30a>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d02f      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x30a>
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d12c      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b01      	cmp	r3, #1
 8009304:	d912      	bls.n	800932c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	881a      	ldrh	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009316:	1c9a      	adds	r2, r3, #2
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b02      	subs	r3, #2
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800932a:	e012      	b.n	8009352 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b01      	cmp	r3, #1
 8009362:	d148      	bne.n	80093f6 <HAL_SPI_TransmitReceive+0x3aa>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d042      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009376:	b29b      	uxth	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	d923      	bls.n	80093c4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	b292      	uxth	r2, r2
 8009388:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	1c9a      	adds	r2, r3, #2
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800939a:	b29b      	uxth	r3, r3
 800939c:	3b02      	subs	r3, #2
 800939e:	b29a      	uxth	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d81f      	bhi.n	80093f2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093c0:	605a      	str	r2, [r3, #4]
 80093c2:	e016      	b.n	80093f2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f103 020c 	add.w	r2, r3, #12
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	7812      	ldrb	r2, [r2, #0]
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093f2:	2301      	movs	r3, #1
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093f6:	f7fc fd03 	bl	8005e00 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009402:	429a      	cmp	r2, r3
 8009404:	d803      	bhi.n	800940e <HAL_SPI_TransmitReceive+0x3c2>
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d102      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x3c8>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800941a:	e01c      	b.n	8009456 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f af5b 	bne.w	80092de <HAL_SPI_TransmitReceive+0x292>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	f47f af54 	bne.w	80092de <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f938 	bl	80096b0 <SPI_EndRxTxTransaction>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d006      	beq.n	8009454 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	661a      	str	r2, [r3, #96]	; 0x60
 8009452:	e000      	b.n	8009456 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009454:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800946a:	4618      	mov	r0, r3
 800946c:	3728      	adds	r7, #40	; 0x28
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4613      	mov	r3, r2
 8009482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009484:	f7fc fcbc 	bl	8005e00 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	1a9b      	subs	r3, r3, r2
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	4413      	add	r3, r2
 8009492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009494:	f7fc fcb4 	bl	8005e00 <HAL_GetTick>
 8009498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800949a:	4b39      	ldr	r3, [pc, #228]	; (8009580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	015b      	lsls	r3, r3, #5
 80094a0:	0d1b      	lsrs	r3, r3, #20
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	fb02 f303 	mul.w	r3, r2, r3
 80094a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094aa:	e054      	b.n	8009556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d050      	beq.n	8009556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094b4:	f7fc fca4 	bl	8005e00 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d902      	bls.n	80094ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d13d      	bne.n	8009546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e2:	d111      	bne.n	8009508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ec:	d004      	beq.n	80094f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f6:	d107      	bne.n	8009508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009510:	d10f      	bne.n	8009532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e017      	b.n	8009576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	3b01      	subs	r3, #1
 8009554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4013      	ands	r3, r2
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	bf0c      	ite	eq
 8009566:	2301      	moveq	r3, #1
 8009568:	2300      	movne	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	461a      	mov	r2, r3
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	429a      	cmp	r2, r3
 8009572:	d19b      	bne.n	80094ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200003cc 	.word	0x200003cc

08009584 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08a      	sub	sp, #40	; 0x28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009596:	f7fc fc33 	bl	8005e00 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	4413      	add	r3, r2
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80095a6:	f7fc fc2b 	bl	8005e00 <HAL_GetTick>
 80095aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	330c      	adds	r3, #12
 80095b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095b4:	4b3d      	ldr	r3, [pc, #244]	; (80096ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	00da      	lsls	r2, r3, #3
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	0d1b      	lsrs	r3, r3, #20
 80095c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
 80095ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80095cc:	e060      	b.n	8009690 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80095d4:	d107      	bne.n	80095e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d050      	beq.n	8009690 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095ee:	f7fc fc07 	bl	8005e00 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d902      	bls.n	8009604 <SPI_WaitFifoStateUntilTimeout+0x80>
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	d13d      	bne.n	8009680 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009612:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800961c:	d111      	bne.n	8009642 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009626:	d004      	beq.n	8009632 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009630:	d107      	bne.n	8009642 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009640:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964a:	d10f      	bne.n	800966c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800966a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e010      	b.n	80096a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	3b01      	subs	r3, #1
 800968e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4013      	ands	r3, r2
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d196      	bne.n	80095ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3728      	adds	r7, #40	; 0x28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200003cc 	.word	0x200003cc

080096b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f7ff ff5b 	bl	8009584 <SPI_WaitFifoStateUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d8:	f043 0220 	orr.w	r2, r3, #32
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e027      	b.n	8009734 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2200      	movs	r2, #0
 80096ec:	2180      	movs	r1, #128	; 0x80
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7ff fec0 	bl	8009474 <SPI_WaitFlagStateUntilTimeout>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d007      	beq.n	800970a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fe:	f043 0220 	orr.w	r2, r3, #32
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e014      	b.n	8009734 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2200      	movs	r2, #0
 8009712:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7ff ff34 	bl	8009584 <SPI_WaitFifoStateUntilTimeout>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d007      	beq.n	8009732 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009726:	f043 0220 	orr.w	r2, r3, #32
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e000      	b.n	8009734 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e049      	b.n	80097e2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fc f8a8 	bl	80058b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f000 fea6 	bl	800a4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2202      	movs	r2, #2
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6a1a      	ldr	r2, [r3, #32]
 8009800:	f241 1311 	movw	r3, #4369	; 0x1111
 8009804:	4013      	ands	r3, r2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10f      	bne.n	800982a <HAL_TIM_OC_DeInit+0x40>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6a1a      	ldr	r2, [r3, #32]
 8009810:	f240 4344 	movw	r3, #1092	; 0x444
 8009814:	4013      	ands	r3, r2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d107      	bne.n	800982a <HAL_TIM_OC_DeInit+0x40>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0201 	bic.w	r2, r2, #1
 8009828:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fc f888 	bl	8005940 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <HAL_TIM_OC_Start_IT+0x28>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	bf14      	ite	ne
 80098c4:	2301      	movne	r3, #1
 80098c6:	2300      	moveq	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	e03c      	b.n	8009946 <HAL_TIM_OC_Start_IT+0xa2>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d109      	bne.n	80098e6 <HAL_TIM_OC_Start_IT+0x42>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b01      	cmp	r3, #1
 80098dc:	bf14      	ite	ne
 80098de:	2301      	movne	r3, #1
 80098e0:	2300      	moveq	r3, #0
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	e02f      	b.n	8009946 <HAL_TIM_OC_Start_IT+0xa2>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d109      	bne.n	8009900 <HAL_TIM_OC_Start_IT+0x5c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	bf14      	ite	ne
 80098f8:	2301      	movne	r3, #1
 80098fa:	2300      	moveq	r3, #0
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	e022      	b.n	8009946 <HAL_TIM_OC_Start_IT+0xa2>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b0c      	cmp	r3, #12
 8009904:	d109      	bne.n	800991a <HAL_TIM_OC_Start_IT+0x76>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b01      	cmp	r3, #1
 8009910:	bf14      	ite	ne
 8009912:	2301      	movne	r3, #1
 8009914:	2300      	moveq	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	e015      	b.n	8009946 <HAL_TIM_OC_Start_IT+0xa2>
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b10      	cmp	r3, #16
 800991e:	d109      	bne.n	8009934 <HAL_TIM_OC_Start_IT+0x90>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b01      	cmp	r3, #1
 800992a:	bf14      	ite	ne
 800992c:	2301      	movne	r3, #1
 800992e:	2300      	moveq	r3, #0
 8009930:	b2db      	uxtb	r3, r3
 8009932:	e008      	b.n	8009946 <HAL_TIM_OC_Start_IT+0xa2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b01      	cmp	r3, #1
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e0c9      	b.n	8009ae2 <HAL_TIM_OC_Start_IT+0x23e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <HAL_TIM_OC_Start_IT+0xba>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800995c:	e023      	b.n	80099a6 <HAL_TIM_OC_Start_IT+0x102>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b04      	cmp	r3, #4
 8009962:	d104      	bne.n	800996e <HAL_TIM_OC_Start_IT+0xca>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800996c:	e01b      	b.n	80099a6 <HAL_TIM_OC_Start_IT+0x102>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b08      	cmp	r3, #8
 8009972:	d104      	bne.n	800997e <HAL_TIM_OC_Start_IT+0xda>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800997c:	e013      	b.n	80099a6 <HAL_TIM_OC_Start_IT+0x102>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d104      	bne.n	800998e <HAL_TIM_OC_Start_IT+0xea>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800998c:	e00b      	b.n	80099a6 <HAL_TIM_OC_Start_IT+0x102>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b10      	cmp	r3, #16
 8009992:	d104      	bne.n	800999e <HAL_TIM_OC_Start_IT+0xfa>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800999c:	e003      	b.n	80099a6 <HAL_TIM_OC_Start_IT+0x102>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b0c      	cmp	r3, #12
 80099aa:	d841      	bhi.n	8009a30 <HAL_TIM_OC_Start_IT+0x18c>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <HAL_TIM_OC_Start_IT+0x110>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099e9 	.word	0x080099e9
 80099b8:	08009a31 	.word	0x08009a31
 80099bc:	08009a31 	.word	0x08009a31
 80099c0:	08009a31 	.word	0x08009a31
 80099c4:	080099fb 	.word	0x080099fb
 80099c8:	08009a31 	.word	0x08009a31
 80099cc:	08009a31 	.word	0x08009a31
 80099d0:	08009a31 	.word	0x08009a31
 80099d4:	08009a0d 	.word	0x08009a0d
 80099d8:	08009a31 	.word	0x08009a31
 80099dc:	08009a31 	.word	0x08009a31
 80099e0:	08009a31 	.word	0x08009a31
 80099e4:	08009a1f 	.word	0x08009a1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0202 	orr.w	r2, r2, #2
 80099f6:	60da      	str	r2, [r3, #12]
      break;
 80099f8:	e01d      	b.n	8009a36 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0204 	orr.w	r2, r2, #4
 8009a08:	60da      	str	r2, [r3, #12]
      break;
 8009a0a:	e014      	b.n	8009a36 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f042 0208 	orr.w	r2, r2, #8
 8009a1a:	60da      	str	r2, [r3, #12]
      break;
 8009a1c:	e00b      	b.n	8009a36 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0210 	orr.w	r2, r2, #16
 8009a2c:	60da      	str	r2, [r3, #12]
      break;
 8009a2e:	e002      	b.n	8009a36 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
      break;
 8009a34:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d151      	bne.n	8009ae0 <HAL_TIM_OC_Start_IT+0x23c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2201      	movs	r2, #1
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 f922 	bl	800ac8e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a27      	ldr	r2, [pc, #156]	; (8009aec <HAL_TIM_OC_Start_IT+0x248>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d009      	beq.n	8009a68 <HAL_TIM_OC_Start_IT+0x1c4>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a25      	ldr	r2, [pc, #148]	; (8009af0 <HAL_TIM_OC_Start_IT+0x24c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d004      	beq.n	8009a68 <HAL_TIM_OC_Start_IT+0x1c4>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a24      	ldr	r2, [pc, #144]	; (8009af4 <HAL_TIM_OC_Start_IT+0x250>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d101      	bne.n	8009a6c <HAL_TIM_OC_Start_IT+0x1c8>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e000      	b.n	8009a6e <HAL_TIM_OC_Start_IT+0x1ca>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <HAL_TIM_OC_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a19      	ldr	r2, [pc, #100]	; (8009aec <HAL_TIM_OC_Start_IT+0x248>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d009      	beq.n	8009aa0 <HAL_TIM_OC_Start_IT+0x1fc>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a94:	d004      	beq.n	8009aa0 <HAL_TIM_OC_Start_IT+0x1fc>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a15      	ldr	r2, [pc, #84]	; (8009af0 <HAL_TIM_OC_Start_IT+0x24c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d115      	bne.n	8009acc <HAL_TIM_OC_Start_IT+0x228>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <HAL_TIM_OC_Start_IT+0x254>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b06      	cmp	r3, #6
 8009ab0:	d015      	beq.n	8009ade <HAL_TIM_OC_Start_IT+0x23a>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab8:	d011      	beq.n	8009ade <HAL_TIM_OC_Start_IT+0x23a>
      {
        __HAL_TIM_ENABLE(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f042 0201 	orr.w	r2, r2, #1
 8009ac8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aca:	e008      	b.n	8009ade <HAL_TIM_OC_Start_IT+0x23a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	e000      	b.n	8009ae0 <HAL_TIM_OC_Start_IT+0x23c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ade:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40012c00 	.word	0x40012c00
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40014400 	.word	0x40014400
 8009af8:	00010007 	.word	0x00010007

08009afc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e049      	b.n	8009ba2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7fb ff20 	bl	8005968 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f000 fcc6 	bl	800a4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6a1a      	ldr	r2, [r3, #32]
 8009bc0:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10f      	bne.n	8009bea <HAL_TIM_IC_DeInit+0x40>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6a1a      	ldr	r2, [r3, #32]
 8009bd0:	f240 4344 	movw	r3, #1092	; 0x444
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d107      	bne.n	8009bea <HAL_TIM_IC_DeInit+0x40>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fb ff00 	bl	80059f0 <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f001 f80a 	bl	800ac8e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6a1a      	ldr	r2, [r3, #32]
 8009c80:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c84:	4013      	ands	r3, r2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10f      	bne.n	8009caa <HAL_TIM_IC_Stop+0x48>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6a1a      	ldr	r2, [r3, #32]
 8009c90:	f240 4344 	movw	r3, #1092	; 0x444
 8009c94:	4013      	ands	r3, r2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d107      	bne.n	8009caa <HAL_TIM_IC_Stop+0x48>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 0201 	bic.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <HAL_TIM_IC_Stop+0x58>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cb8:	e023      	b.n	8009d02 <HAL_TIM_IC_Stop+0xa0>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d104      	bne.n	8009cca <HAL_TIM_IC_Stop+0x68>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc8:	e01b      	b.n	8009d02 <HAL_TIM_IC_Stop+0xa0>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	d104      	bne.n	8009cda <HAL_TIM_IC_Stop+0x78>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd8:	e013      	b.n	8009d02 <HAL_TIM_IC_Stop+0xa0>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b0c      	cmp	r3, #12
 8009cde:	d104      	bne.n	8009cea <HAL_TIM_IC_Stop+0x88>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ce8:	e00b      	b.n	8009d02 <HAL_TIM_IC_Stop+0xa0>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b10      	cmp	r3, #16
 8009cee:	d104      	bne.n	8009cfa <HAL_TIM_IC_Stop+0x98>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cf8:	e003      	b.n	8009d02 <HAL_TIM_IC_Stop+0xa0>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d104      	bne.n	8009d12 <HAL_TIM_IC_Stop+0xb0>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d10:	e013      	b.n	8009d3a <HAL_TIM_IC_Stop+0xd8>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d104      	bne.n	8009d22 <HAL_TIM_IC_Stop+0xc0>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d20:	e00b      	b.n	8009d3a <HAL_TIM_IC_Stop+0xd8>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d104      	bne.n	8009d32 <HAL_TIM_IC_Stop+0xd0>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d30:	e003      	b.n	8009d3a <HAL_TIM_IC_Stop+0xd8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d104      	bne.n	8009d62 <HAL_TIM_IC_Start_IT+0x1e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	e023      	b.n	8009daa <HAL_TIM_IC_Start_IT+0x66>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d104      	bne.n	8009d72 <HAL_TIM_IC_Start_IT+0x2e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	e01b      	b.n	8009daa <HAL_TIM_IC_Start_IT+0x66>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b08      	cmp	r3, #8
 8009d76:	d104      	bne.n	8009d82 <HAL_TIM_IC_Start_IT+0x3e>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	e013      	b.n	8009daa <HAL_TIM_IC_Start_IT+0x66>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b0c      	cmp	r3, #12
 8009d86:	d104      	bne.n	8009d92 <HAL_TIM_IC_Start_IT+0x4e>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	e00b      	b.n	8009daa <HAL_TIM_IC_Start_IT+0x66>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b10      	cmp	r3, #16
 8009d96:	d104      	bne.n	8009da2 <HAL_TIM_IC_Start_IT+0x5e>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	e003      	b.n	8009daa <HAL_TIM_IC_Start_IT+0x66>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d104      	bne.n	8009dbc <HAL_TIM_IC_Start_IT+0x78>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	e013      	b.n	8009de4 <HAL_TIM_IC_Start_IT+0xa0>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d104      	bne.n	8009dcc <HAL_TIM_IC_Start_IT+0x88>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	e00b      	b.n	8009de4 <HAL_TIM_IC_Start_IT+0xa0>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	d104      	bne.n	8009ddc <HAL_TIM_IC_Start_IT+0x98>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	e003      	b.n	8009de4 <HAL_TIM_IC_Start_IT+0xa0>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d102      	bne.n	8009df2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dec:	7b7b      	ldrb	r3, [r7, #13]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d001      	beq.n	8009df6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e0c9      	b.n	8009f8a <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d104      	bne.n	8009e06 <HAL_TIM_IC_Start_IT+0xc2>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e04:	e023      	b.n	8009e4e <HAL_TIM_IC_Start_IT+0x10a>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d104      	bne.n	8009e16 <HAL_TIM_IC_Start_IT+0xd2>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e14:	e01b      	b.n	8009e4e <HAL_TIM_IC_Start_IT+0x10a>
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d104      	bne.n	8009e26 <HAL_TIM_IC_Start_IT+0xe2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e24:	e013      	b.n	8009e4e <HAL_TIM_IC_Start_IT+0x10a>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b0c      	cmp	r3, #12
 8009e2a:	d104      	bne.n	8009e36 <HAL_TIM_IC_Start_IT+0xf2>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e34:	e00b      	b.n	8009e4e <HAL_TIM_IC_Start_IT+0x10a>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b10      	cmp	r3, #16
 8009e3a:	d104      	bne.n	8009e46 <HAL_TIM_IC_Start_IT+0x102>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e44:	e003      	b.n	8009e4e <HAL_TIM_IC_Start_IT+0x10a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d104      	bne.n	8009e5e <HAL_TIM_IC_Start_IT+0x11a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e5c:	e013      	b.n	8009e86 <HAL_TIM_IC_Start_IT+0x142>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b04      	cmp	r3, #4
 8009e62:	d104      	bne.n	8009e6e <HAL_TIM_IC_Start_IT+0x12a>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e6c:	e00b      	b.n	8009e86 <HAL_TIM_IC_Start_IT+0x142>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d104      	bne.n	8009e7e <HAL_TIM_IC_Start_IT+0x13a>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e7c:	e003      	b.n	8009e86 <HAL_TIM_IC_Start_IT+0x142>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b0c      	cmp	r3, #12
 8009e8a:	d841      	bhi.n	8009f10 <HAL_TIM_IC_Start_IT+0x1cc>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <HAL_TIM_IC_Start_IT+0x150>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ec9 	.word	0x08009ec9
 8009e98:	08009f11 	.word	0x08009f11
 8009e9c:	08009f11 	.word	0x08009f11
 8009ea0:	08009f11 	.word	0x08009f11
 8009ea4:	08009edb 	.word	0x08009edb
 8009ea8:	08009f11 	.word	0x08009f11
 8009eac:	08009f11 	.word	0x08009f11
 8009eb0:	08009f11 	.word	0x08009f11
 8009eb4:	08009eed 	.word	0x08009eed
 8009eb8:	08009f11 	.word	0x08009f11
 8009ebc:	08009f11 	.word	0x08009f11
 8009ec0:	08009f11 	.word	0x08009f11
 8009ec4:	08009eff 	.word	0x08009eff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0202 	orr.w	r2, r2, #2
 8009ed6:	60da      	str	r2, [r3, #12]
      break;
 8009ed8:	e01d      	b.n	8009f16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0204 	orr.w	r2, r2, #4
 8009ee8:	60da      	str	r2, [r3, #12]
      break;
 8009eea:	e014      	b.n	8009f16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0208 	orr.w	r2, r2, #8
 8009efa:	60da      	str	r2, [r3, #12]
      break;
 8009efc:	e00b      	b.n	8009f16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f042 0210 	orr.w	r2, r2, #16
 8009f0c:	60da      	str	r2, [r3, #12]
      break;
 8009f0e:	e002      	b.n	8009f16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	73fb      	strb	r3, [r7, #15]
      break;
 8009f14:	bf00      	nop
  }

  if (status == HAL_OK)
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d135      	bne.n	8009f88 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2201      	movs	r2, #1
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 feb2 	bl	800ac8e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a19      	ldr	r2, [pc, #100]	; (8009f94 <HAL_TIM_IC_Start_IT+0x250>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d009      	beq.n	8009f48 <HAL_TIM_IC_Start_IT+0x204>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f3c:	d004      	beq.n	8009f48 <HAL_TIM_IC_Start_IT+0x204>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a15      	ldr	r2, [pc, #84]	; (8009f98 <HAL_TIM_IC_Start_IT+0x254>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d115      	bne.n	8009f74 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <HAL_TIM_IC_Start_IT+0x258>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b06      	cmp	r3, #6
 8009f58:	d015      	beq.n	8009f86 <HAL_TIM_IC_Start_IT+0x242>
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f60:	d011      	beq.n	8009f86 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0201 	orr.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f72:	e008      	b.n	8009f86 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	e000      	b.n	8009f88 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	40012c00 	.word	0x40012c00
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	00010007 	.word	0x00010007

08009fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d122      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d11b      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0202 	mvn.w	r2, #2
 8009fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fb f980 	bl	80052e8 <HAL_TIM_IC_CaptureCallback>
 8009fe8:	e005      	b.n	8009ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fb f95e 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa58 	bl	800a4a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b04      	cmp	r3, #4
 800a008:	d122      	bne.n	800a050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d11b      	bne.n	800a050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f06f 0204 	mvn.w	r2, #4
 800a020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7fb f956 	bl	80052e8 <HAL_TIM_IC_CaptureCallback>
 800a03c:	e005      	b.n	800a04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7fb f934 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fa2e 	bl	800a4a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b08      	cmp	r3, #8
 800a05c:	d122      	bne.n	800a0a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d11b      	bne.n	800a0a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0208 	mvn.w	r2, #8
 800a074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2204      	movs	r2, #4
 800a07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fb f92c 	bl	80052e8 <HAL_TIM_IC_CaptureCallback>
 800a090:	e005      	b.n	800a09e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fb f90a 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fa04 	bl	800a4a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b10      	cmp	r3, #16
 800a0b0:	d122      	bne.n	800a0f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b10      	cmp	r3, #16
 800a0be:	d11b      	bne.n	800a0f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f06f 0210 	mvn.w	r2, #16
 800a0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7fb f902 	bl	80052e8 <HAL_TIM_IC_CaptureCallback>
 800a0e4:	e005      	b.n	800a0f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7fb f8e0 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9da 	bl	800a4a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10e      	bne.n	800a124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	d107      	bne.n	800a124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f06f 0201 	mvn.w	r2, #1
 800a11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f9b8 	bl	800a494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b80      	cmp	r3, #128	; 0x80
 800a130:	d10e      	bne.n	800a150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13c:	2b80      	cmp	r3, #128	; 0x80
 800a13e:	d107      	bne.n	800a150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fdcc 	bl	800ace8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15e:	d10e      	bne.n	800a17e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d107      	bne.n	800a17e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fdbe 	bl	800acfa <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d10e      	bne.n	800a1aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d107      	bne.n	800a1aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f987 	bl	800a4b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f003 0320 	and.w	r3, r3, #32
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d10e      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d107      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f06f 0220 	mvn.w	r2, #32
 800a1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fd80 	bl	800acd6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d101      	bne.n	800a1fe <HAL_TIM_OC_ConfigChannel+0x1e>
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e066      	b.n	800a2cc <HAL_TIM_OC_ConfigChannel+0xec>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b14      	cmp	r3, #20
 800a20a:	d857      	bhi.n	800a2bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800a20c:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a269 	.word	0x0800a269
 800a218:	0800a2bd 	.word	0x0800a2bd
 800a21c:	0800a2bd 	.word	0x0800a2bd
 800a220:	0800a2bd 	.word	0x0800a2bd
 800a224:	0800a277 	.word	0x0800a277
 800a228:	0800a2bd 	.word	0x0800a2bd
 800a22c:	0800a2bd 	.word	0x0800a2bd
 800a230:	0800a2bd 	.word	0x0800a2bd
 800a234:	0800a285 	.word	0x0800a285
 800a238:	0800a2bd 	.word	0x0800a2bd
 800a23c:	0800a2bd 	.word	0x0800a2bd
 800a240:	0800a2bd 	.word	0x0800a2bd
 800a244:	0800a293 	.word	0x0800a293
 800a248:	0800a2bd 	.word	0x0800a2bd
 800a24c:	0800a2bd 	.word	0x0800a2bd
 800a250:	0800a2bd 	.word	0x0800a2bd
 800a254:	0800a2a1 	.word	0x0800a2a1
 800a258:	0800a2bd 	.word	0x0800a2bd
 800a25c:	0800a2bd 	.word	0x0800a2bd
 800a260:	0800a2bd 	.word	0x0800a2bd
 800a264:	0800a2af 	.word	0x0800a2af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68b9      	ldr	r1, [r7, #8]
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 f98e 	bl	800a590 <TIM_OC1_SetConfig>
      break;
 800a274:	e025      	b.n	800a2c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 fa03 	bl	800a688 <TIM_OC2_SetConfig>
      break;
 800a282:	e01e      	b.n	800a2c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68b9      	ldr	r1, [r7, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fa74 	bl	800a778 <TIM_OC3_SetConfig>
      break;
 800a290:	e017      	b.n	800a2c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 fae5 	bl	800a868 <TIM_OC4_SetConfig>
      break;
 800a29e:	e010      	b.n	800a2c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fb3a 	bl	800a920 <TIM_OC5_SetConfig>
      break;
 800a2ac:	e009      	b.n	800a2c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fb8b 	bl	800a9d0 <TIM_OC6_SetConfig>
      break;
 800a2ba:	e002      	b.n	800a2c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d101      	bne.n	800a2f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e088      	b.n	800a404 <HAL_TIM_IC_ConfigChannel+0x130>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11b      	bne.n	800a338 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6819      	ldr	r1, [r3, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f000 fbb6 	bl	800aa80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f022 020c 	bic.w	r2, r2, #12
 800a322:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6999      	ldr	r1, [r3, #24]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	619a      	str	r2, [r3, #24]
 800a336:	e060      	b.n	800a3fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d11c      	bne.n	800a378 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6819      	ldr	r1, [r3, #0]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f000 fbeb 	bl	800ab28 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	699a      	ldr	r2, [r3, #24]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a360:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6999      	ldr	r1, [r3, #24]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	021a      	lsls	r2, r3, #8
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	619a      	str	r2, [r3, #24]
 800a376:	e040      	b.n	800a3fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b08      	cmp	r3, #8
 800a37c:	d11b      	bne.n	800a3b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6819      	ldr	r1, [r3, #0]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	f000 fc07 	bl	800aba0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 020c 	bic.w	r2, r2, #12
 800a3a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	61da      	str	r2, [r3, #28]
 800a3b4:	e021      	b.n	800a3fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b0c      	cmp	r3, #12
 800a3ba:	d11c      	bne.n	800a3f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6819      	ldr	r1, [r3, #0]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f000 fc23 	bl	800ac16 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69da      	ldr	r2, [r3, #28]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a3de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69d9      	ldr	r1, [r3, #28]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	021a      	lsls	r2, r3, #8
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	61da      	str	r2, [r3, #28]
 800a3f4:	e001      	b.n	800a3fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a402:	7dfb      	ldrb	r3, [r7, #23]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b0c      	cmp	r3, #12
 800a41e:	d831      	bhi.n	800a484 <HAL_TIM_ReadCapturedValue+0x78>
 800a420:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a426:	bf00      	nop
 800a428:	0800a45d 	.word	0x0800a45d
 800a42c:	0800a485 	.word	0x0800a485
 800a430:	0800a485 	.word	0x0800a485
 800a434:	0800a485 	.word	0x0800a485
 800a438:	0800a467 	.word	0x0800a467
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a485 	.word	0x0800a485
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a471 	.word	0x0800a471
 800a44c:	0800a485 	.word	0x0800a485
 800a450:	0800a485 	.word	0x0800a485
 800a454:	0800a485 	.word	0x0800a485
 800a458:	0800a47b 	.word	0x0800a47b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a462:	60fb      	str	r3, [r7, #12]

      break;
 800a464:	e00f      	b.n	800a486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	60fb      	str	r3, [r7, #12]

      break;
 800a46e:	e00a      	b.n	800a486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a476:	60fb      	str	r3, [r7, #12]

      break;
 800a478:	e005      	b.n	800a486 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	60fb      	str	r3, [r7, #12]

      break;
 800a482:	e000      	b.n	800a486 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a484:	bf00      	nop
  }

  return tmpreg;
 800a486:	68fb      	ldr	r3, [r7, #12]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop

0800a494 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr

0800a4a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr
	...

0800a4cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a29      	ldr	r2, [pc, #164]	; (800a584 <TIM_Base_SetConfig+0xb8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d003      	beq.n	800a4ec <TIM_Base_SetConfig+0x20>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ea:	d108      	bne.n	800a4fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a20      	ldr	r2, [pc, #128]	; (800a584 <TIM_Base_SetConfig+0xb8>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00b      	beq.n	800a51e <TIM_Base_SetConfig+0x52>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a50c:	d007      	beq.n	800a51e <TIM_Base_SetConfig+0x52>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a1d      	ldr	r2, [pc, #116]	; (800a588 <TIM_Base_SetConfig+0xbc>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d003      	beq.n	800a51e <TIM_Base_SetConfig+0x52>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a1c      	ldr	r2, [pc, #112]	; (800a58c <TIM_Base_SetConfig+0xc0>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d108      	bne.n	800a530 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a0b      	ldr	r2, [pc, #44]	; (800a584 <TIM_Base_SetConfig+0xb8>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d007      	beq.n	800a56c <TIM_Base_SetConfig+0xa0>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a0a      	ldr	r2, [pc, #40]	; (800a588 <TIM_Base_SetConfig+0xbc>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d003      	beq.n	800a56c <TIM_Base_SetConfig+0xa0>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a09      	ldr	r2, [pc, #36]	; (800a58c <TIM_Base_SetConfig+0xc0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d103      	bne.n	800a574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	615a      	str	r2, [r3, #20]
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	bc80      	pop	{r7}
 800a582:	4770      	bx	lr
 800a584:	40012c00 	.word	0x40012c00
 800a588:	40014000 	.word	0x40014000
 800a58c:	40014400 	.word	0x40014400

0800a590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	f023 0201 	bic.w	r2, r3, #1
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f023 0303 	bic.w	r3, r3, #3
 800a5ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f023 0302 	bic.w	r3, r3, #2
 800a5dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a24      	ldr	r2, [pc, #144]	; (800a67c <TIM_OC1_SetConfig+0xec>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d007      	beq.n	800a600 <TIM_OC1_SetConfig+0x70>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a23      	ldr	r2, [pc, #140]	; (800a680 <TIM_OC1_SetConfig+0xf0>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d003      	beq.n	800a600 <TIM_OC1_SetConfig+0x70>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a22      	ldr	r2, [pc, #136]	; (800a684 <TIM_OC1_SetConfig+0xf4>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d10c      	bne.n	800a61a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f023 0308 	bic.w	r3, r3, #8
 800a606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	4313      	orrs	r3, r2
 800a610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f023 0304 	bic.w	r3, r3, #4
 800a618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a17      	ldr	r2, [pc, #92]	; (800a67c <TIM_OC1_SetConfig+0xec>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d007      	beq.n	800a632 <TIM_OC1_SetConfig+0xa2>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a16      	ldr	r2, [pc, #88]	; (800a680 <TIM_OC1_SetConfig+0xf0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d003      	beq.n	800a632 <TIM_OC1_SetConfig+0xa2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a15      	ldr	r2, [pc, #84]	; (800a684 <TIM_OC1_SetConfig+0xf4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d111      	bne.n	800a656 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4313      	orrs	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	4313      	orrs	r3, r2
 800a654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	621a      	str	r2, [r3, #32]
}
 800a670:	bf00      	nop
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40012c00 	.word	0x40012c00
 800a680:	40014000 	.word	0x40014000
 800a684:	40014400 	.word	0x40014400

0800a688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f023 0210 	bic.w	r2, r3, #16
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	021b      	lsls	r3, r3, #8
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f023 0320 	bic.w	r3, r3, #32
 800a6d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a21      	ldr	r2, [pc, #132]	; (800a76c <TIM_OC2_SetConfig+0xe4>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d10d      	bne.n	800a708 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a706:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a18      	ldr	r2, [pc, #96]	; (800a76c <TIM_OC2_SetConfig+0xe4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d007      	beq.n	800a720 <TIM_OC2_SetConfig+0x98>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a17      	ldr	r2, [pc, #92]	; (800a770 <TIM_OC2_SetConfig+0xe8>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d003      	beq.n	800a720 <TIM_OC2_SetConfig+0x98>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a16      	ldr	r2, [pc, #88]	; (800a774 <TIM_OC2_SetConfig+0xec>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d113      	bne.n	800a748 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a72e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	4313      	orrs	r3, r2
 800a73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4313      	orrs	r3, r2
 800a746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	bc80      	pop	{r7}
 800a76a:	4770      	bx	lr
 800a76c:	40012c00 	.word	0x40012c00
 800a770:	40014000 	.word	0x40014000
 800a774:	40014400 	.word	0x40014400

0800a778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a21      	ldr	r2, [pc, #132]	; (800a85c <TIM_OC3_SetConfig+0xe4>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d10d      	bne.n	800a7f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a18      	ldr	r2, [pc, #96]	; (800a85c <TIM_OC3_SetConfig+0xe4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d007      	beq.n	800a80e <TIM_OC3_SetConfig+0x96>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a17      	ldr	r2, [pc, #92]	; (800a860 <TIM_OC3_SetConfig+0xe8>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d003      	beq.n	800a80e <TIM_OC3_SetConfig+0x96>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a16      	ldr	r2, [pc, #88]	; (800a864 <TIM_OC3_SetConfig+0xec>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d113      	bne.n	800a836 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	011b      	lsls	r3, r3, #4
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	4313      	orrs	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4313      	orrs	r3, r2
 800a834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	621a      	str	r2, [r3, #32]
}
 800a850:	bf00      	nop
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40012c00 	.word	0x40012c00
 800a860:	40014000 	.word	0x40014000
 800a864:	40014400 	.word	0x40014400

0800a868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	031b      	lsls	r3, r3, #12
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a13      	ldr	r2, [pc, #76]	; (800a914 <TIM_OC4_SetConfig+0xac>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d007      	beq.n	800a8dc <TIM_OC4_SetConfig+0x74>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a12      	ldr	r2, [pc, #72]	; (800a918 <TIM_OC4_SetConfig+0xb0>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d003      	beq.n	800a8dc <TIM_OC4_SetConfig+0x74>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a11      	ldr	r2, [pc, #68]	; (800a91c <TIM_OC4_SetConfig+0xb4>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d109      	bne.n	800a8f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	019b      	lsls	r3, r3, #6
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	621a      	str	r2, [r3, #32]
}
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	bc80      	pop	{r7}
 800a912:	4770      	bx	lr
 800a914:	40012c00 	.word	0x40012c00
 800a918:	40014000 	.word	0x40014000
 800a91c:	40014400 	.word	0x40014400

0800a920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a94e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	041b      	lsls	r3, r3, #16
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4313      	orrs	r3, r2
 800a970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a13      	ldr	r2, [pc, #76]	; (800a9c4 <TIM_OC5_SetConfig+0xa4>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d007      	beq.n	800a98a <TIM_OC5_SetConfig+0x6a>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a12      	ldr	r2, [pc, #72]	; (800a9c8 <TIM_OC5_SetConfig+0xa8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d003      	beq.n	800a98a <TIM_OC5_SetConfig+0x6a>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a11      	ldr	r2, [pc, #68]	; (800a9cc <TIM_OC5_SetConfig+0xac>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d109      	bne.n	800a99e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	621a      	str	r2, [r3, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40012c00 	.word	0x40012c00
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40014400 	.word	0x40014400

0800a9d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	021b      	lsls	r3, r3, #8
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	051b      	lsls	r3, r3, #20
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <TIM_OC6_SetConfig+0xa4>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d007      	beq.n	800aa3c <TIM_OC6_SetConfig+0x6c>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a12      	ldr	r2, [pc, #72]	; (800aa78 <TIM_OC6_SetConfig+0xa8>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d003      	beq.n	800aa3c <TIM_OC6_SetConfig+0x6c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a11      	ldr	r2, [pc, #68]	; (800aa7c <TIM_OC6_SetConfig+0xac>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d109      	bne.n	800aa50 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	695b      	ldr	r3, [r3, #20]
 800aa48:	029b      	lsls	r3, r3, #10
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	621a      	str	r2, [r3, #32]
}
 800aa6a:	bf00      	nop
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bc80      	pop	{r7}
 800aa72:	4770      	bx	lr
 800aa74:	40012c00 	.word	0x40012c00
 800aa78:	40014000 	.word	0x40014000
 800aa7c:	40014400 	.word	0x40014400

0800aa80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f023 0201 	bic.w	r2, r3, #1
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	4a1d      	ldr	r2, [pc, #116]	; (800ab20 <TIM_TI1_SetConfig+0xa0>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d007      	beq.n	800aabe <TIM_TI1_SetConfig+0x3e>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab4:	d003      	beq.n	800aabe <TIM_TI1_SetConfig+0x3e>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <TIM_TI1_SetConfig+0xa4>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d101      	bne.n	800aac2 <TIM_TI1_SetConfig+0x42>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <TIM_TI1_SetConfig+0x44>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d008      	beq.n	800aada <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	e003      	b.n	800aae2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f043 0301 	orr.w	r3, r3, #1
 800aae0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	011b      	lsls	r3, r3, #4
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f023 030a 	bic.w	r3, r3, #10
 800aafc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	f003 030a 	and.w	r3, r3, #10
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bc80      	pop	{r7}
 800ab1e:	4770      	bx	lr
 800ab20:	40012c00 	.word	0x40012c00
 800ab24:	40014000 	.word	0x40014000

0800ab28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	f023 0210 	bic.w	r2, r3, #16
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	021b      	lsls	r3, r3, #8
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	031b      	lsls	r3, r3, #12
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	011b      	lsls	r3, r3, #4
 800ab80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	621a      	str	r2, [r3, #32]
}
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bc80      	pop	{r7}
 800ab9e:	4770      	bx	lr

0800aba0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f023 0303 	bic.w	r3, r3, #3
 800abcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	011b      	lsls	r3, r3, #4
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800abf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	021b      	lsls	r3, r3, #8
 800abf6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	621a      	str	r2, [r3, #32]
}
 800ac0c:	bf00      	nop
 800ac0e:	371c      	adds	r7, #28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bc80      	pop	{r7}
 800ac14:	4770      	bx	lr

0800ac16 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b087      	sub	sp, #28
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	031b      	lsls	r3, r3, #12
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ac68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	031b      	lsls	r3, r3, #12
 800ac6e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	621a      	str	r2, [r3, #32]
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bc80      	pop	{r7}
 800ac8c:	4770      	bx	lr

0800ac8e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b087      	sub	sp, #28
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	f003 031f 	and.w	r3, r3, #31
 800aca0:	2201      	movs	r2, #1
 800aca2:	fa02 f303 	lsl.w	r3, r2, r3
 800aca6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6a1a      	ldr	r2, [r3, #32]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	43db      	mvns	r3, r3
 800acb0:	401a      	ands	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6a1a      	ldr	r2, [r3, #32]
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f003 031f 	and.w	r3, r3, #31
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	fa01 f303 	lsl.w	r3, r1, r3
 800acc6:	431a      	orrs	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	621a      	str	r2, [r3, #32]
}
 800accc:	bf00      	nop
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr

0800acd6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bc80      	pop	{r7}
 800acf8:	4770      	bx	lr

0800acfa <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b083      	sub	sp, #12
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad02:	bf00      	nop
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bc80      	pop	{r7}
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e040      	b.n	800ada0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7fa fd58 	bl	80057e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2224      	movs	r2, #36	; 0x24
 800ad38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f022 0201 	bic.w	r2, r2, #1
 800ad48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f8c0 	bl	800aed0 <UART_SetConfig>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d101      	bne.n	800ad5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e022      	b.n	800ada0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fae0 	bl	800b328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689a      	ldr	r2, [r3, #8]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f042 0201 	orr.w	r2, r2, #1
 800ad96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fb66 	bl	800b46a <UART_CheckIdleState>
 800ad9e:	4603      	mov	r3, r0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	; 0x28
 800adac:	af02      	add	r7, sp, #8
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	4613      	mov	r3, r2
 800adb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	f040 8082 	bne.w	800aec6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <HAL_UART_Transmit+0x26>
 800adc8:	88fb      	ldrh	r3, [r7, #6]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e07a      	b.n	800aec8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800add8:	2b01      	cmp	r3, #1
 800adda:	d101      	bne.n	800ade0 <HAL_UART_Transmit+0x38>
 800addc:	2302      	movs	r3, #2
 800adde:	e073      	b.n	800aec8 <HAL_UART_Transmit+0x120>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2221      	movs	r2, #33	; 0x21
 800adf4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adf6:	f7fb f803 	bl	8005e00 <HAL_GetTick>
 800adfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae14:	d108      	bne.n	800ae28 <HAL_UART_Transmit+0x80>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d104      	bne.n	800ae28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	61bb      	str	r3, [r7, #24]
 800ae26:	e003      	b.n	800ae30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ae38:	e02d      	b.n	800ae96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2200      	movs	r2, #0
 800ae42:	2180      	movs	r1, #128	; 0x80
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 fb59 	bl	800b4fc <UART_WaitOnFlagUntilTimeout>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e039      	b.n	800aec8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10b      	bne.n	800ae72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	881a      	ldrh	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae66:	b292      	uxth	r2, r2
 800ae68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	3302      	adds	r3, #2
 800ae6e:	61bb      	str	r3, [r7, #24]
 800ae70:	e008      	b.n	800ae84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	781a      	ldrb	r2, [r3, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	3301      	adds	r3, #1
 800ae82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1cb      	bne.n	800ae3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2140      	movs	r1, #64	; 0x40
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 fb25 	bl	800b4fc <UART_WaitOnFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e005      	b.n	800aec8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2220      	movs	r2, #32
 800aec0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e000      	b.n	800aec8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800aec6:	2302      	movs	r3, #2
  }
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed4:	b08a      	sub	sp, #40	; 0x28
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	431a      	orrs	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	431a      	orrs	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	4bb4      	ldr	r3, [pc, #720]	; (800b1d0 <UART_SetConfig+0x300>)
 800af00:	4013      	ands	r3, r2
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	6812      	ldr	r2, [r2, #0]
 800af06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af08:	430b      	orrs	r3, r1
 800af0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4aa9      	ldr	r2, [pc, #676]	; (800b1d4 <UART_SetConfig+0x304>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d004      	beq.n	800af3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af38:	4313      	orrs	r3, r2
 800af3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af4c:	430a      	orrs	r2, r1
 800af4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4aa0      	ldr	r2, [pc, #640]	; (800b1d8 <UART_SetConfig+0x308>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d126      	bne.n	800afa8 <UART_SetConfig+0xd8>
 800af5a:	4ba0      	ldr	r3, [pc, #640]	; (800b1dc <UART_SetConfig+0x30c>)
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	2b03      	cmp	r3, #3
 800af66:	d81b      	bhi.n	800afa0 <UART_SetConfig+0xd0>
 800af68:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <UART_SetConfig+0xa0>)
 800af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6e:	bf00      	nop
 800af70:	0800af81 	.word	0x0800af81
 800af74:	0800af91 	.word	0x0800af91
 800af78:	0800af89 	.word	0x0800af89
 800af7c:	0800af99 	.word	0x0800af99
 800af80:	2301      	movs	r3, #1
 800af82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af86:	e080      	b.n	800b08a <UART_SetConfig+0x1ba>
 800af88:	2302      	movs	r3, #2
 800af8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af8e:	e07c      	b.n	800b08a <UART_SetConfig+0x1ba>
 800af90:	2304      	movs	r3, #4
 800af92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af96:	e078      	b.n	800b08a <UART_SetConfig+0x1ba>
 800af98:	2308      	movs	r3, #8
 800af9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af9e:	e074      	b.n	800b08a <UART_SetConfig+0x1ba>
 800afa0:	2310      	movs	r3, #16
 800afa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afa6:	e070      	b.n	800b08a <UART_SetConfig+0x1ba>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a8c      	ldr	r2, [pc, #560]	; (800b1e0 <UART_SetConfig+0x310>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d138      	bne.n	800b024 <UART_SetConfig+0x154>
 800afb2:	4b8a      	ldr	r3, [pc, #552]	; (800b1dc <UART_SetConfig+0x30c>)
 800afb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb8:	f003 030c 	and.w	r3, r3, #12
 800afbc:	2b0c      	cmp	r3, #12
 800afbe:	d82d      	bhi.n	800b01c <UART_SetConfig+0x14c>
 800afc0:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <UART_SetConfig+0xf8>)
 800afc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800affd 	.word	0x0800affd
 800afcc:	0800b01d 	.word	0x0800b01d
 800afd0:	0800b01d 	.word	0x0800b01d
 800afd4:	0800b01d 	.word	0x0800b01d
 800afd8:	0800b00d 	.word	0x0800b00d
 800afdc:	0800b01d 	.word	0x0800b01d
 800afe0:	0800b01d 	.word	0x0800b01d
 800afe4:	0800b01d 	.word	0x0800b01d
 800afe8:	0800b005 	.word	0x0800b005
 800afec:	0800b01d 	.word	0x0800b01d
 800aff0:	0800b01d 	.word	0x0800b01d
 800aff4:	0800b01d 	.word	0x0800b01d
 800aff8:	0800b015 	.word	0x0800b015
 800affc:	2300      	movs	r3, #0
 800affe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b002:	e042      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b004:	2302      	movs	r3, #2
 800b006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b00a:	e03e      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b00c:	2304      	movs	r3, #4
 800b00e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b012:	e03a      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b014:	2308      	movs	r3, #8
 800b016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b01a:	e036      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b01c:	2310      	movs	r3, #16
 800b01e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b022:	e032      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a6a      	ldr	r2, [pc, #424]	; (800b1d4 <UART_SetConfig+0x304>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d12a      	bne.n	800b084 <UART_SetConfig+0x1b4>
 800b02e:	4b6b      	ldr	r3, [pc, #428]	; (800b1dc <UART_SetConfig+0x30c>)
 800b030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b034:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b03c:	d01a      	beq.n	800b074 <UART_SetConfig+0x1a4>
 800b03e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b042:	d81b      	bhi.n	800b07c <UART_SetConfig+0x1ac>
 800b044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b048:	d00c      	beq.n	800b064 <UART_SetConfig+0x194>
 800b04a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04e:	d815      	bhi.n	800b07c <UART_SetConfig+0x1ac>
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <UART_SetConfig+0x18c>
 800b054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b058:	d008      	beq.n	800b06c <UART_SetConfig+0x19c>
 800b05a:	e00f      	b.n	800b07c <UART_SetConfig+0x1ac>
 800b05c:	2300      	movs	r3, #0
 800b05e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b062:	e012      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b064:	2302      	movs	r3, #2
 800b066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b06a:	e00e      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b072:	e00a      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b074:	2308      	movs	r3, #8
 800b076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b07a:	e006      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b07c:	2310      	movs	r3, #16
 800b07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b082:	e002      	b.n	800b08a <UART_SetConfig+0x1ba>
 800b084:	2310      	movs	r3, #16
 800b086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a51      	ldr	r2, [pc, #324]	; (800b1d4 <UART_SetConfig+0x304>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d17a      	bne.n	800b18a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b094:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d824      	bhi.n	800b0e6 <UART_SetConfig+0x216>
 800b09c:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <UART_SetConfig+0x1d4>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0e7 	.word	0x0800b0e7
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0e7 	.word	0x0800b0e7
 800b0b4:	0800b0d7 	.word	0x0800b0d7
 800b0b8:	0800b0e7 	.word	0x0800b0e7
 800b0bc:	0800b0e7 	.word	0x0800b0e7
 800b0c0:	0800b0e7 	.word	0x0800b0e7
 800b0c4:	0800b0df 	.word	0x0800b0df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0c8:	f7fc ff06 	bl	8007ed8 <HAL_RCC_GetPCLK1Freq>
 800b0cc:	61f8      	str	r0, [r7, #28]
        break;
 800b0ce:	e010      	b.n	800b0f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0d0:	4b44      	ldr	r3, [pc, #272]	; (800b1e4 <UART_SetConfig+0x314>)
 800b0d2:	61fb      	str	r3, [r7, #28]
        break;
 800b0d4:	e00d      	b.n	800b0f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0d6:	f7fc fe6b 	bl	8007db0 <HAL_RCC_GetSysClockFreq>
 800b0da:	61f8      	str	r0, [r7, #28]
        break;
 800b0dc:	e009      	b.n	800b0f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0e2:	61fb      	str	r3, [r7, #28]
        break;
 800b0e4:	e005      	b.n	800b0f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b0f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 8107 	beq.w	800b308 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	4413      	add	r3, r2
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	429a      	cmp	r2, r3
 800b108:	d305      	bcc.n	800b116 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	429a      	cmp	r2, r3
 800b114:	d903      	bls.n	800b11e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b11c:	e0f4      	b.n	800b308 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	2200      	movs	r2, #0
 800b122:	461c      	mov	r4, r3
 800b124:	4615      	mov	r5, r2
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	f04f 0300 	mov.w	r3, #0
 800b12e:	022b      	lsls	r3, r5, #8
 800b130:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b134:	0222      	lsls	r2, r4, #8
 800b136:	68f9      	ldr	r1, [r7, #12]
 800b138:	6849      	ldr	r1, [r1, #4]
 800b13a:	0849      	lsrs	r1, r1, #1
 800b13c:	2000      	movs	r0, #0
 800b13e:	4688      	mov	r8, r1
 800b140:	4681      	mov	r9, r0
 800b142:	eb12 0a08 	adds.w	sl, r2, r8
 800b146:	eb43 0b09 	adc.w	fp, r3, r9
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	603b      	str	r3, [r7, #0]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	f7f5 f890 	bl	8000280 <__aeabi_uldivmod>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4613      	mov	r3, r2
 800b166:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b16e:	d308      	bcc.n	800b182 <UART_SetConfig+0x2b2>
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b176:	d204      	bcs.n	800b182 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	60da      	str	r2, [r3, #12]
 800b180:	e0c2      	b.n	800b308 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b188:	e0be      	b.n	800b308 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b192:	d16a      	bne.n	800b26a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b198:	2b08      	cmp	r3, #8
 800b19a:	d834      	bhi.n	800b206 <UART_SetConfig+0x336>
 800b19c:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <UART_SetConfig+0x2d4>)
 800b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b1c9 	.word	0x0800b1c9
 800b1a8:	0800b1e9 	.word	0x0800b1e9
 800b1ac:	0800b1f1 	.word	0x0800b1f1
 800b1b0:	0800b207 	.word	0x0800b207
 800b1b4:	0800b1f7 	.word	0x0800b1f7
 800b1b8:	0800b207 	.word	0x0800b207
 800b1bc:	0800b207 	.word	0x0800b207
 800b1c0:	0800b207 	.word	0x0800b207
 800b1c4:	0800b1ff 	.word	0x0800b1ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1c8:	f7fc fe86 	bl	8007ed8 <HAL_RCC_GetPCLK1Freq>
 800b1cc:	61f8      	str	r0, [r7, #28]
        break;
 800b1ce:	e020      	b.n	800b212 <UART_SetConfig+0x342>
 800b1d0:	efff69f3 	.word	0xefff69f3
 800b1d4:	40008000 	.word	0x40008000
 800b1d8:	40013800 	.word	0x40013800
 800b1dc:	40021000 	.word	0x40021000
 800b1e0:	40004400 	.word	0x40004400
 800b1e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1e8:	f7fc fe8c 	bl	8007f04 <HAL_RCC_GetPCLK2Freq>
 800b1ec:	61f8      	str	r0, [r7, #28]
        break;
 800b1ee:	e010      	b.n	800b212 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1f0:	4b4c      	ldr	r3, [pc, #304]	; (800b324 <UART_SetConfig+0x454>)
 800b1f2:	61fb      	str	r3, [r7, #28]
        break;
 800b1f4:	e00d      	b.n	800b212 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1f6:	f7fc fddb 	bl	8007db0 <HAL_RCC_GetSysClockFreq>
 800b1fa:	61f8      	str	r0, [r7, #28]
        break;
 800b1fc:	e009      	b.n	800b212 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b202:	61fb      	str	r3, [r7, #28]
        break;
 800b204:	e005      	b.n	800b212 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d077      	beq.n	800b308 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	005a      	lsls	r2, r3, #1
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	085b      	lsrs	r3, r3, #1
 800b222:	441a      	add	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	2b0f      	cmp	r3, #15
 800b232:	d916      	bls.n	800b262 <UART_SetConfig+0x392>
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23a:	d212      	bcs.n	800b262 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f023 030f 	bic.w	r3, r3, #15
 800b244:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	085b      	lsrs	r3, r3, #1
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	f003 0307 	and.w	r3, r3, #7
 800b250:	b29a      	uxth	r2, r3
 800b252:	8afb      	ldrh	r3, [r7, #22]
 800b254:	4313      	orrs	r3, r2
 800b256:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	8afa      	ldrh	r2, [r7, #22]
 800b25e:	60da      	str	r2, [r3, #12]
 800b260:	e052      	b.n	800b308 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b268:	e04e      	b.n	800b308 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b26a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d827      	bhi.n	800b2c2 <UART_SetConfig+0x3f2>
 800b272:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <UART_SetConfig+0x3a8>)
 800b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b278:	0800b29d 	.word	0x0800b29d
 800b27c:	0800b2a5 	.word	0x0800b2a5
 800b280:	0800b2ad 	.word	0x0800b2ad
 800b284:	0800b2c3 	.word	0x0800b2c3
 800b288:	0800b2b3 	.word	0x0800b2b3
 800b28c:	0800b2c3 	.word	0x0800b2c3
 800b290:	0800b2c3 	.word	0x0800b2c3
 800b294:	0800b2c3 	.word	0x0800b2c3
 800b298:	0800b2bb 	.word	0x0800b2bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b29c:	f7fc fe1c 	bl	8007ed8 <HAL_RCC_GetPCLK1Freq>
 800b2a0:	61f8      	str	r0, [r7, #28]
        break;
 800b2a2:	e014      	b.n	800b2ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2a4:	f7fc fe2e 	bl	8007f04 <HAL_RCC_GetPCLK2Freq>
 800b2a8:	61f8      	str	r0, [r7, #28]
        break;
 800b2aa:	e010      	b.n	800b2ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2ac:	4b1d      	ldr	r3, [pc, #116]	; (800b324 <UART_SetConfig+0x454>)
 800b2ae:	61fb      	str	r3, [r7, #28]
        break;
 800b2b0:	e00d      	b.n	800b2ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2b2:	f7fc fd7d 	bl	8007db0 <HAL_RCC_GetSysClockFreq>
 800b2b6:	61f8      	str	r0, [r7, #28]
        break;
 800b2b8:	e009      	b.n	800b2ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2be:	61fb      	str	r3, [r7, #28]
        break;
 800b2c0:	e005      	b.n	800b2ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b2cc:	bf00      	nop
    }

    if (pclk != 0U)
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d019      	beq.n	800b308 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	085a      	lsrs	r2, r3, #1
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	441a      	add	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	2b0f      	cmp	r3, #15
 800b2ec:	d909      	bls.n	800b302 <UART_SetConfig+0x432>
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2f4:	d205      	bcs.n	800b302 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60da      	str	r2, [r3, #12]
 800b300:	e002      	b.n	800b308 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3728      	adds	r7, #40	; 0x28
 800b31c:	46bd      	mov	sp, r7
 800b31e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b322:	bf00      	nop
 800b324:	00f42400 	.word	0x00f42400

0800b328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00a      	beq.n	800b352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	430a      	orrs	r2, r1
 800b350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00a      	beq.n	800b374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	430a      	orrs	r2, r1
 800b372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00a      	beq.n	800b396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	430a      	orrs	r2, r1
 800b394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	f003 0308 	and.w	r3, r3, #8
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00a      	beq.n	800b3b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	f003 0310 	and.w	r3, r3, #16
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00a      	beq.n	800b3da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	f003 0320 	and.w	r3, r3, #32
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00a      	beq.n	800b3fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b404:	2b00      	cmp	r3, #0
 800b406:	d01a      	beq.n	800b43e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b426:	d10a      	bne.n	800b43e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	605a      	str	r2, [r3, #4]
  }
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	bc80      	pop	{r7}
 800b468:	4770      	bx	lr

0800b46a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b086      	sub	sp, #24
 800b46e:	af02      	add	r7, sp, #8
 800b470:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b47a:	f7fa fcc1 	bl	8005e00 <HAL_GetTick>
 800b47e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0308 	and.w	r3, r3, #8
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d10e      	bne.n	800b4ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f82d 	bl	800b4fc <UART_WaitOnFlagUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e023      	b.n	800b4f4 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	2b04      	cmp	r3, #4
 800b4b8:	d10e      	bne.n	800b4d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f817 	bl	800b4fc <UART_WaitOnFlagUntilTimeout>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e00d      	b.n	800b4f4 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b09c      	sub	sp, #112	; 0x70
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	603b      	str	r3, [r7, #0]
 800b508:	4613      	mov	r3, r2
 800b50a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b50c:	e0a5      	b.n	800b65a <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b50e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	f000 80a1 	beq.w	800b65a <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b518:	f7fa fc72 	bl	8005e00 <HAL_GetTick>
 800b51c:	4602      	mov	r2, r0
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b524:	429a      	cmp	r2, r3
 800b526:	d302      	bcc.n	800b52e <UART_WaitOnFlagUntilTimeout+0x32>
 800b528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d13e      	bne.n	800b5ac <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b53e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b542:	667b      	str	r3, [r7, #100]	; 0x64
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b54c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b54e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b552:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b55a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e6      	bne.n	800b52e <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56a:	e853 3f00 	ldrex	r3, [r3]
 800b56e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	f023 0301 	bic.w	r3, r3, #1
 800b576:	663b      	str	r3, [r7, #96]	; 0x60
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3308      	adds	r3, #8
 800b57e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b580:	64ba      	str	r2, [r7, #72]	; 0x48
 800b582:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e5      	bne.n	800b560 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2220      	movs	r2, #32
 800b598:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2220      	movs	r2, #32
 800b59e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e067      	b.n	800b67c <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d04f      	beq.n	800b65a <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	69db      	ldr	r3, [r3, #28]
 800b5c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5c8:	d147      	bne.n	800b65a <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5d2:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e6      	bne.n	800b5d4 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3308      	adds	r3, #8
 800b60c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	613b      	str	r3, [r7, #16]
   return(result);
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f023 0301 	bic.w	r3, r3, #1
 800b61c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3308      	adds	r3, #8
 800b624:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b626:	623a      	str	r2, [r7, #32]
 800b628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	69f9      	ldr	r1, [r7, #28]
 800b62c:	6a3a      	ldr	r2, [r7, #32]
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	61bb      	str	r3, [r7, #24]
   return(result);
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e5      	bne.n	800b606 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2220      	movs	r2, #32
 800b63e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2220      	movs	r2, #32
 800b644:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2220      	movs	r2, #32
 800b64a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b656:	2303      	movs	r3, #3
 800b658:	e010      	b.n	800b67c <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69da      	ldr	r2, [r3, #28]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	4013      	ands	r3, r2
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	429a      	cmp	r2, r3
 800b668:	bf0c      	ite	eq
 800b66a:	2301      	moveq	r3, #1
 800b66c:	2300      	movne	r3, #0
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	461a      	mov	r2, r3
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	429a      	cmp	r2, r3
 800b676:	f43f af4a 	beq.w	800b50e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3770      	adds	r7, #112	; 0x70
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <__errno>:
 800b684:	4b01      	ldr	r3, [pc, #4]	; (800b68c <__errno+0x8>)
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	200003d8 	.word	0x200003d8

0800b690 <__libc_init_array>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4d0d      	ldr	r5, [pc, #52]	; (800b6c8 <__libc_init_array+0x38>)
 800b694:	4c0d      	ldr	r4, [pc, #52]	; (800b6cc <__libc_init_array+0x3c>)
 800b696:	1b64      	subs	r4, r4, r5
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	2600      	movs	r6, #0
 800b69c:	42a6      	cmp	r6, r4
 800b69e:	d109      	bne.n	800b6b4 <__libc_init_array+0x24>
 800b6a0:	4d0b      	ldr	r5, [pc, #44]	; (800b6d0 <__libc_init_array+0x40>)
 800b6a2:	4c0c      	ldr	r4, [pc, #48]	; (800b6d4 <__libc_init_array+0x44>)
 800b6a4:	f000 fd12 	bl	800c0cc <_init>
 800b6a8:	1b64      	subs	r4, r4, r5
 800b6aa:	10a4      	asrs	r4, r4, #2
 800b6ac:	2600      	movs	r6, #0
 800b6ae:	42a6      	cmp	r6, r4
 800b6b0:	d105      	bne.n	800b6be <__libc_init_array+0x2e>
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b8:	4798      	blx	r3
 800b6ba:	3601      	adds	r6, #1
 800b6bc:	e7ee      	b.n	800b69c <__libc_init_array+0xc>
 800b6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c2:	4798      	blx	r3
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	e7f2      	b.n	800b6ae <__libc_init_array+0x1e>
 800b6c8:	0800c504 	.word	0x0800c504
 800b6cc:	0800c504 	.word	0x0800c504
 800b6d0:	0800c504 	.word	0x0800c504
 800b6d4:	0800c508 	.word	0x0800c508

0800b6d8 <__itoa>:
 800b6d8:	1e93      	subs	r3, r2, #2
 800b6da:	2b22      	cmp	r3, #34	; 0x22
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	460c      	mov	r4, r1
 800b6e0:	d904      	bls.n	800b6ec <__itoa+0x14>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	700b      	strb	r3, [r1, #0]
 800b6e6:	461c      	mov	r4, r3
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	bd10      	pop	{r4, pc}
 800b6ec:	2a0a      	cmp	r2, #10
 800b6ee:	d109      	bne.n	800b704 <__itoa+0x2c>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	da07      	bge.n	800b704 <__itoa+0x2c>
 800b6f4:	232d      	movs	r3, #45	; 0x2d
 800b6f6:	700b      	strb	r3, [r1, #0]
 800b6f8:	4240      	negs	r0, r0
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	4421      	add	r1, r4
 800b6fe:	f000 f81d 	bl	800b73c <__utoa>
 800b702:	e7f1      	b.n	800b6e8 <__itoa+0x10>
 800b704:	2100      	movs	r1, #0
 800b706:	e7f9      	b.n	800b6fc <__itoa+0x24>

0800b708 <itoa>:
 800b708:	f7ff bfe6 	b.w	800b6d8 <__itoa>

0800b70c <memset>:
 800b70c:	4402      	add	r2, r0
 800b70e:	4603      	mov	r3, r0
 800b710:	4293      	cmp	r3, r2
 800b712:	d100      	bne.n	800b716 <memset+0xa>
 800b714:	4770      	bx	lr
 800b716:	f803 1b01 	strb.w	r1, [r3], #1
 800b71a:	e7f9      	b.n	800b710 <memset+0x4>

0800b71c <strcat>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	4602      	mov	r2, r0
 800b720:	7814      	ldrb	r4, [r2, #0]
 800b722:	4613      	mov	r3, r2
 800b724:	3201      	adds	r2, #1
 800b726:	2c00      	cmp	r4, #0
 800b728:	d1fa      	bne.n	800b720 <strcat+0x4>
 800b72a:	3b01      	subs	r3, #1
 800b72c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b730:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b734:	2a00      	cmp	r2, #0
 800b736:	d1f9      	bne.n	800b72c <strcat+0x10>
 800b738:	bd10      	pop	{r4, pc}
	...

0800b73c <__utoa>:
 800b73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73e:	4c1f      	ldr	r4, [pc, #124]	; (800b7bc <__utoa+0x80>)
 800b740:	b08b      	sub	sp, #44	; 0x2c
 800b742:	4605      	mov	r5, r0
 800b744:	460b      	mov	r3, r1
 800b746:	466e      	mov	r6, sp
 800b748:	f104 0c20 	add.w	ip, r4, #32
 800b74c:	6820      	ldr	r0, [r4, #0]
 800b74e:	6861      	ldr	r1, [r4, #4]
 800b750:	4637      	mov	r7, r6
 800b752:	c703      	stmia	r7!, {r0, r1}
 800b754:	3408      	adds	r4, #8
 800b756:	4564      	cmp	r4, ip
 800b758:	463e      	mov	r6, r7
 800b75a:	d1f7      	bne.n	800b74c <__utoa+0x10>
 800b75c:	7921      	ldrb	r1, [r4, #4]
 800b75e:	7139      	strb	r1, [r7, #4]
 800b760:	1e91      	subs	r1, r2, #2
 800b762:	6820      	ldr	r0, [r4, #0]
 800b764:	6038      	str	r0, [r7, #0]
 800b766:	2922      	cmp	r1, #34	; 0x22
 800b768:	f04f 0100 	mov.w	r1, #0
 800b76c:	d904      	bls.n	800b778 <__utoa+0x3c>
 800b76e:	7019      	strb	r1, [r3, #0]
 800b770:	460b      	mov	r3, r1
 800b772:	4618      	mov	r0, r3
 800b774:	b00b      	add	sp, #44	; 0x2c
 800b776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b778:	1e58      	subs	r0, r3, #1
 800b77a:	4684      	mov	ip, r0
 800b77c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b780:	fb02 5617 	mls	r6, r2, r7, r5
 800b784:	3628      	adds	r6, #40	; 0x28
 800b786:	446e      	add	r6, sp
 800b788:	460c      	mov	r4, r1
 800b78a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b78e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b792:	462e      	mov	r6, r5
 800b794:	42b2      	cmp	r2, r6
 800b796:	f101 0101 	add.w	r1, r1, #1
 800b79a:	463d      	mov	r5, r7
 800b79c:	d9ee      	bls.n	800b77c <__utoa+0x40>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	545a      	strb	r2, [r3, r1]
 800b7a2:	1919      	adds	r1, r3, r4
 800b7a4:	1aa5      	subs	r5, r4, r2
 800b7a6:	42aa      	cmp	r2, r5
 800b7a8:	dae3      	bge.n	800b772 <__utoa+0x36>
 800b7aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b7ae:	780e      	ldrb	r6, [r1, #0]
 800b7b0:	7006      	strb	r6, [r0, #0]
 800b7b2:	3201      	adds	r2, #1
 800b7b4:	f801 5901 	strb.w	r5, [r1], #-1
 800b7b8:	e7f4      	b.n	800b7a4 <__utoa+0x68>
 800b7ba:	bf00      	nop
 800b7bc:	0800c4a1 	.word	0x0800c4a1

0800b7c0 <_vsniprintf_r>:
 800b7c0:	b530      	push	{r4, r5, lr}
 800b7c2:	4614      	mov	r4, r2
 800b7c4:	2c00      	cmp	r4, #0
 800b7c6:	b09b      	sub	sp, #108	; 0x6c
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	da05      	bge.n	800b7da <_vsniprintf_r+0x1a>
 800b7ce:	238b      	movs	r3, #139	; 0x8b
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	b01b      	add	sp, #108	; 0x6c
 800b7d8:	bd30      	pop	{r4, r5, pc}
 800b7da:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b7de:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b7e2:	bf14      	ite	ne
 800b7e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7e8:	4623      	moveq	r3, r4
 800b7ea:	9302      	str	r3, [sp, #8]
 800b7ec:	9305      	str	r3, [sp, #20]
 800b7ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7f2:	9100      	str	r1, [sp, #0]
 800b7f4:	9104      	str	r1, [sp, #16]
 800b7f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b7fa:	4669      	mov	r1, sp
 800b7fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b7fe:	f000 f875 	bl	800b8ec <_svfiprintf_r>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	bfbc      	itt	lt
 800b806:	238b      	movlt	r3, #139	; 0x8b
 800b808:	602b      	strlt	r3, [r5, #0]
 800b80a:	2c00      	cmp	r4, #0
 800b80c:	d0e3      	beq.n	800b7d6 <_vsniprintf_r+0x16>
 800b80e:	9b00      	ldr	r3, [sp, #0]
 800b810:	2200      	movs	r2, #0
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	e7df      	b.n	800b7d6 <_vsniprintf_r+0x16>
	...

0800b818 <vsniprintf>:
 800b818:	b507      	push	{r0, r1, r2, lr}
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	4613      	mov	r3, r2
 800b81e:	460a      	mov	r2, r1
 800b820:	4601      	mov	r1, r0
 800b822:	4803      	ldr	r0, [pc, #12]	; (800b830 <vsniprintf+0x18>)
 800b824:	6800      	ldr	r0, [r0, #0]
 800b826:	f7ff ffcb 	bl	800b7c0 <_vsniprintf_r>
 800b82a:	b003      	add	sp, #12
 800b82c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b830:	200003d8 	.word	0x200003d8

0800b834 <__ssputs_r>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	688e      	ldr	r6, [r1, #8]
 800b83a:	429e      	cmp	r6, r3
 800b83c:	4682      	mov	sl, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	4690      	mov	r8, r2
 800b842:	461f      	mov	r7, r3
 800b844:	d838      	bhi.n	800b8b8 <__ssputs_r+0x84>
 800b846:	898a      	ldrh	r2, [r1, #12]
 800b848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b84c:	d032      	beq.n	800b8b4 <__ssputs_r+0x80>
 800b84e:	6825      	ldr	r5, [r4, #0]
 800b850:	6909      	ldr	r1, [r1, #16]
 800b852:	eba5 0901 	sub.w	r9, r5, r1
 800b856:	6965      	ldr	r5, [r4, #20]
 800b858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b85c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b860:	3301      	adds	r3, #1
 800b862:	444b      	add	r3, r9
 800b864:	106d      	asrs	r5, r5, #1
 800b866:	429d      	cmp	r5, r3
 800b868:	bf38      	it	cc
 800b86a:	461d      	movcc	r5, r3
 800b86c:	0553      	lsls	r3, r2, #21
 800b86e:	d531      	bpl.n	800b8d4 <__ssputs_r+0xa0>
 800b870:	4629      	mov	r1, r5
 800b872:	f000 fb61 	bl	800bf38 <_malloc_r>
 800b876:	4606      	mov	r6, r0
 800b878:	b950      	cbnz	r0, 800b890 <__ssputs_r+0x5c>
 800b87a:	230c      	movs	r3, #12
 800b87c:	f8ca 3000 	str.w	r3, [sl]
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	f04f 30ff 	mov.w	r0, #4294967295
 800b88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b890:	6921      	ldr	r1, [r4, #16]
 800b892:	464a      	mov	r2, r9
 800b894:	f000 fabe 	bl	800be14 <memcpy>
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a2:	81a3      	strh	r3, [r4, #12]
 800b8a4:	6126      	str	r6, [r4, #16]
 800b8a6:	6165      	str	r5, [r4, #20]
 800b8a8:	444e      	add	r6, r9
 800b8aa:	eba5 0509 	sub.w	r5, r5, r9
 800b8ae:	6026      	str	r6, [r4, #0]
 800b8b0:	60a5      	str	r5, [r4, #8]
 800b8b2:	463e      	mov	r6, r7
 800b8b4:	42be      	cmp	r6, r7
 800b8b6:	d900      	bls.n	800b8ba <__ssputs_r+0x86>
 800b8b8:	463e      	mov	r6, r7
 800b8ba:	6820      	ldr	r0, [r4, #0]
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4641      	mov	r1, r8
 800b8c0:	f000 fab6 	bl	800be30 <memmove>
 800b8c4:	68a3      	ldr	r3, [r4, #8]
 800b8c6:	1b9b      	subs	r3, r3, r6
 800b8c8:	60a3      	str	r3, [r4, #8]
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	4433      	add	r3, r6
 800b8ce:	6023      	str	r3, [r4, #0]
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	e7db      	b.n	800b88c <__ssputs_r+0x58>
 800b8d4:	462a      	mov	r2, r5
 800b8d6:	f000 fba3 	bl	800c020 <_realloc_r>
 800b8da:	4606      	mov	r6, r0
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d1e1      	bne.n	800b8a4 <__ssputs_r+0x70>
 800b8e0:	6921      	ldr	r1, [r4, #16]
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	f000 fabe 	bl	800be64 <_free_r>
 800b8e8:	e7c7      	b.n	800b87a <__ssputs_r+0x46>
	...

0800b8ec <_svfiprintf_r>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	4698      	mov	r8, r3
 800b8f2:	898b      	ldrh	r3, [r1, #12]
 800b8f4:	061b      	lsls	r3, r3, #24
 800b8f6:	b09d      	sub	sp, #116	; 0x74
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	460d      	mov	r5, r1
 800b8fc:	4614      	mov	r4, r2
 800b8fe:	d50e      	bpl.n	800b91e <_svfiprintf_r+0x32>
 800b900:	690b      	ldr	r3, [r1, #16]
 800b902:	b963      	cbnz	r3, 800b91e <_svfiprintf_r+0x32>
 800b904:	2140      	movs	r1, #64	; 0x40
 800b906:	f000 fb17 	bl	800bf38 <_malloc_r>
 800b90a:	6028      	str	r0, [r5, #0]
 800b90c:	6128      	str	r0, [r5, #16]
 800b90e:	b920      	cbnz	r0, 800b91a <_svfiprintf_r+0x2e>
 800b910:	230c      	movs	r3, #12
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	e0d1      	b.n	800babe <_svfiprintf_r+0x1d2>
 800b91a:	2340      	movs	r3, #64	; 0x40
 800b91c:	616b      	str	r3, [r5, #20]
 800b91e:	2300      	movs	r3, #0
 800b920:	9309      	str	r3, [sp, #36]	; 0x24
 800b922:	2320      	movs	r3, #32
 800b924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b928:	f8cd 800c 	str.w	r8, [sp, #12]
 800b92c:	2330      	movs	r3, #48	; 0x30
 800b92e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bad8 <_svfiprintf_r+0x1ec>
 800b932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b936:	f04f 0901 	mov.w	r9, #1
 800b93a:	4623      	mov	r3, r4
 800b93c:	469a      	mov	sl, r3
 800b93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b942:	b10a      	cbz	r2, 800b948 <_svfiprintf_r+0x5c>
 800b944:	2a25      	cmp	r2, #37	; 0x25
 800b946:	d1f9      	bne.n	800b93c <_svfiprintf_r+0x50>
 800b948:	ebba 0b04 	subs.w	fp, sl, r4
 800b94c:	d00b      	beq.n	800b966 <_svfiprintf_r+0x7a>
 800b94e:	465b      	mov	r3, fp
 800b950:	4622      	mov	r2, r4
 800b952:	4629      	mov	r1, r5
 800b954:	4638      	mov	r0, r7
 800b956:	f7ff ff6d 	bl	800b834 <__ssputs_r>
 800b95a:	3001      	adds	r0, #1
 800b95c:	f000 80aa 	beq.w	800bab4 <_svfiprintf_r+0x1c8>
 800b960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b962:	445a      	add	r2, fp
 800b964:	9209      	str	r2, [sp, #36]	; 0x24
 800b966:	f89a 3000 	ldrb.w	r3, [sl]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80a2 	beq.w	800bab4 <_svfiprintf_r+0x1c8>
 800b970:	2300      	movs	r3, #0
 800b972:	f04f 32ff 	mov.w	r2, #4294967295
 800b976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b97a:	f10a 0a01 	add.w	sl, sl, #1
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	9307      	str	r3, [sp, #28]
 800b982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b986:	931a      	str	r3, [sp, #104]	; 0x68
 800b988:	4654      	mov	r4, sl
 800b98a:	2205      	movs	r2, #5
 800b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b990:	4851      	ldr	r0, [pc, #324]	; (800bad8 <_svfiprintf_r+0x1ec>)
 800b992:	f7f4 fc25 	bl	80001e0 <memchr>
 800b996:	9a04      	ldr	r2, [sp, #16]
 800b998:	b9d8      	cbnz	r0, 800b9d2 <_svfiprintf_r+0xe6>
 800b99a:	06d0      	lsls	r0, r2, #27
 800b99c:	bf44      	itt	mi
 800b99e:	2320      	movmi	r3, #32
 800b9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9a4:	0711      	lsls	r1, r2, #28
 800b9a6:	bf44      	itt	mi
 800b9a8:	232b      	movmi	r3, #43	; 0x2b
 800b9aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b4:	d015      	beq.n	800b9e2 <_svfiprintf_r+0xf6>
 800b9b6:	9a07      	ldr	r2, [sp, #28]
 800b9b8:	4654      	mov	r4, sl
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	f04f 0c0a 	mov.w	ip, #10
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c6:	3b30      	subs	r3, #48	; 0x30
 800b9c8:	2b09      	cmp	r3, #9
 800b9ca:	d94e      	bls.n	800ba6a <_svfiprintf_r+0x17e>
 800b9cc:	b1b0      	cbz	r0, 800b9fc <_svfiprintf_r+0x110>
 800b9ce:	9207      	str	r2, [sp, #28]
 800b9d0:	e014      	b.n	800b9fc <_svfiprintf_r+0x110>
 800b9d2:	eba0 0308 	sub.w	r3, r0, r8
 800b9d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	9304      	str	r3, [sp, #16]
 800b9de:	46a2      	mov	sl, r4
 800b9e0:	e7d2      	b.n	800b988 <_svfiprintf_r+0x9c>
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	1d19      	adds	r1, r3, #4
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	9103      	str	r1, [sp, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	bfbb      	ittet	lt
 800b9ee:	425b      	neglt	r3, r3
 800b9f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f4:	9307      	strge	r3, [sp, #28]
 800b9f6:	9307      	strlt	r3, [sp, #28]
 800b9f8:	bfb8      	it	lt
 800b9fa:	9204      	strlt	r2, [sp, #16]
 800b9fc:	7823      	ldrb	r3, [r4, #0]
 800b9fe:	2b2e      	cmp	r3, #46	; 0x2e
 800ba00:	d10c      	bne.n	800ba1c <_svfiprintf_r+0x130>
 800ba02:	7863      	ldrb	r3, [r4, #1]
 800ba04:	2b2a      	cmp	r3, #42	; 0x2a
 800ba06:	d135      	bne.n	800ba74 <_svfiprintf_r+0x188>
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	1d1a      	adds	r2, r3, #4
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	9203      	str	r2, [sp, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfb8      	it	lt
 800ba14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba18:	3402      	adds	r4, #2
 800ba1a:	9305      	str	r3, [sp, #20]
 800ba1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800badc <_svfiprintf_r+0x1f0>
 800ba20:	7821      	ldrb	r1, [r4, #0]
 800ba22:	2203      	movs	r2, #3
 800ba24:	4650      	mov	r0, sl
 800ba26:	f7f4 fbdb 	bl	80001e0 <memchr>
 800ba2a:	b140      	cbz	r0, 800ba3e <_svfiprintf_r+0x152>
 800ba2c:	2340      	movs	r3, #64	; 0x40
 800ba2e:	eba0 000a 	sub.w	r0, r0, sl
 800ba32:	fa03 f000 	lsl.w	r0, r3, r0
 800ba36:	9b04      	ldr	r3, [sp, #16]
 800ba38:	4303      	orrs	r3, r0
 800ba3a:	3401      	adds	r4, #1
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba42:	4827      	ldr	r0, [pc, #156]	; (800bae0 <_svfiprintf_r+0x1f4>)
 800ba44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba48:	2206      	movs	r2, #6
 800ba4a:	f7f4 fbc9 	bl	80001e0 <memchr>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d038      	beq.n	800bac4 <_svfiprintf_r+0x1d8>
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <_svfiprintf_r+0x1f8>)
 800ba54:	bb1b      	cbnz	r3, 800ba9e <_svfiprintf_r+0x1b2>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	3307      	adds	r3, #7
 800ba5a:	f023 0307 	bic.w	r3, r3, #7
 800ba5e:	3308      	adds	r3, #8
 800ba60:	9303      	str	r3, [sp, #12]
 800ba62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba64:	4433      	add	r3, r6
 800ba66:	9309      	str	r3, [sp, #36]	; 0x24
 800ba68:	e767      	b.n	800b93a <_svfiprintf_r+0x4e>
 800ba6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba6e:	460c      	mov	r4, r1
 800ba70:	2001      	movs	r0, #1
 800ba72:	e7a5      	b.n	800b9c0 <_svfiprintf_r+0xd4>
 800ba74:	2300      	movs	r3, #0
 800ba76:	3401      	adds	r4, #1
 800ba78:	9305      	str	r3, [sp, #20]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	f04f 0c0a 	mov.w	ip, #10
 800ba80:	4620      	mov	r0, r4
 800ba82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba86:	3a30      	subs	r2, #48	; 0x30
 800ba88:	2a09      	cmp	r2, #9
 800ba8a:	d903      	bls.n	800ba94 <_svfiprintf_r+0x1a8>
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0c5      	beq.n	800ba1c <_svfiprintf_r+0x130>
 800ba90:	9105      	str	r1, [sp, #20]
 800ba92:	e7c3      	b.n	800ba1c <_svfiprintf_r+0x130>
 800ba94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba98:	4604      	mov	r4, r0
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7f0      	b.n	800ba80 <_svfiprintf_r+0x194>
 800ba9e:	ab03      	add	r3, sp, #12
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	462a      	mov	r2, r5
 800baa4:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <_svfiprintf_r+0x1fc>)
 800baa6:	a904      	add	r1, sp, #16
 800baa8:	4638      	mov	r0, r7
 800baaa:	f3af 8000 	nop.w
 800baae:	1c42      	adds	r2, r0, #1
 800bab0:	4606      	mov	r6, r0
 800bab2:	d1d6      	bne.n	800ba62 <_svfiprintf_r+0x176>
 800bab4:	89ab      	ldrh	r3, [r5, #12]
 800bab6:	065b      	lsls	r3, r3, #25
 800bab8:	f53f af2c 	bmi.w	800b914 <_svfiprintf_r+0x28>
 800babc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800babe:	b01d      	add	sp, #116	; 0x74
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	462a      	mov	r2, r5
 800baca:	4b07      	ldr	r3, [pc, #28]	; (800bae8 <_svfiprintf_r+0x1fc>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4638      	mov	r0, r7
 800bad0:	f000 f87a 	bl	800bbc8 <_printf_i>
 800bad4:	e7eb      	b.n	800baae <_svfiprintf_r+0x1c2>
 800bad6:	bf00      	nop
 800bad8:	0800c4c6 	.word	0x0800c4c6
 800badc:	0800c4cc 	.word	0x0800c4cc
 800bae0:	0800c4d0 	.word	0x0800c4d0
 800bae4:	00000000 	.word	0x00000000
 800bae8:	0800b835 	.word	0x0800b835

0800baec <_printf_common>:
 800baec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	4616      	mov	r6, r2
 800baf2:	4699      	mov	r9, r3
 800baf4:	688a      	ldr	r2, [r1, #8]
 800baf6:	690b      	ldr	r3, [r1, #16]
 800baf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bafc:	4293      	cmp	r3, r2
 800bafe:	bfb8      	it	lt
 800bb00:	4613      	movlt	r3, r2
 800bb02:	6033      	str	r3, [r6, #0]
 800bb04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb08:	4607      	mov	r7, r0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	b10a      	cbz	r2, 800bb12 <_printf_common+0x26>
 800bb0e:	3301      	adds	r3, #1
 800bb10:	6033      	str	r3, [r6, #0]
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	0699      	lsls	r1, r3, #26
 800bb16:	bf42      	ittt	mi
 800bb18:	6833      	ldrmi	r3, [r6, #0]
 800bb1a:	3302      	addmi	r3, #2
 800bb1c:	6033      	strmi	r3, [r6, #0]
 800bb1e:	6825      	ldr	r5, [r4, #0]
 800bb20:	f015 0506 	ands.w	r5, r5, #6
 800bb24:	d106      	bne.n	800bb34 <_printf_common+0x48>
 800bb26:	f104 0a19 	add.w	sl, r4, #25
 800bb2a:	68e3      	ldr	r3, [r4, #12]
 800bb2c:	6832      	ldr	r2, [r6, #0]
 800bb2e:	1a9b      	subs	r3, r3, r2
 800bb30:	42ab      	cmp	r3, r5
 800bb32:	dc26      	bgt.n	800bb82 <_printf_common+0x96>
 800bb34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb38:	1e13      	subs	r3, r2, #0
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	bf18      	it	ne
 800bb3e:	2301      	movne	r3, #1
 800bb40:	0692      	lsls	r2, r2, #26
 800bb42:	d42b      	bmi.n	800bb9c <_printf_common+0xb0>
 800bb44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb48:	4649      	mov	r1, r9
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	47c0      	blx	r8
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d01e      	beq.n	800bb90 <_printf_common+0xa4>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	68e5      	ldr	r5, [r4, #12]
 800bb56:	6832      	ldr	r2, [r6, #0]
 800bb58:	f003 0306 	and.w	r3, r3, #6
 800bb5c:	2b04      	cmp	r3, #4
 800bb5e:	bf08      	it	eq
 800bb60:	1aad      	subeq	r5, r5, r2
 800bb62:	68a3      	ldr	r3, [r4, #8]
 800bb64:	6922      	ldr	r2, [r4, #16]
 800bb66:	bf0c      	ite	eq
 800bb68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb6c:	2500      	movne	r5, #0
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	bfc4      	itt	gt
 800bb72:	1a9b      	subgt	r3, r3, r2
 800bb74:	18ed      	addgt	r5, r5, r3
 800bb76:	2600      	movs	r6, #0
 800bb78:	341a      	adds	r4, #26
 800bb7a:	42b5      	cmp	r5, r6
 800bb7c:	d11a      	bne.n	800bbb4 <_printf_common+0xc8>
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e008      	b.n	800bb94 <_printf_common+0xa8>
 800bb82:	2301      	movs	r3, #1
 800bb84:	4652      	mov	r2, sl
 800bb86:	4649      	mov	r1, r9
 800bb88:	4638      	mov	r0, r7
 800bb8a:	47c0      	blx	r8
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d103      	bne.n	800bb98 <_printf_common+0xac>
 800bb90:	f04f 30ff 	mov.w	r0, #4294967295
 800bb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb98:	3501      	adds	r5, #1
 800bb9a:	e7c6      	b.n	800bb2a <_printf_common+0x3e>
 800bb9c:	18e1      	adds	r1, r4, r3
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	2030      	movs	r0, #48	; 0x30
 800bba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bba6:	4422      	add	r2, r4
 800bba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbb0:	3302      	adds	r3, #2
 800bbb2:	e7c7      	b.n	800bb44 <_printf_common+0x58>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	4649      	mov	r1, r9
 800bbba:	4638      	mov	r0, r7
 800bbbc:	47c0      	blx	r8
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	d0e6      	beq.n	800bb90 <_printf_common+0xa4>
 800bbc2:	3601      	adds	r6, #1
 800bbc4:	e7d9      	b.n	800bb7a <_printf_common+0x8e>
	...

0800bbc8 <_printf_i>:
 800bbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbcc:	7e0f      	ldrb	r7, [r1, #24]
 800bbce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbd0:	2f78      	cmp	r7, #120	; 0x78
 800bbd2:	4691      	mov	r9, r2
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	469a      	mov	sl, r3
 800bbda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbde:	d807      	bhi.n	800bbf0 <_printf_i+0x28>
 800bbe0:	2f62      	cmp	r7, #98	; 0x62
 800bbe2:	d80a      	bhi.n	800bbfa <_printf_i+0x32>
 800bbe4:	2f00      	cmp	r7, #0
 800bbe6:	f000 80d8 	beq.w	800bd9a <_printf_i+0x1d2>
 800bbea:	2f58      	cmp	r7, #88	; 0x58
 800bbec:	f000 80a3 	beq.w	800bd36 <_printf_i+0x16e>
 800bbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbf8:	e03a      	b.n	800bc70 <_printf_i+0xa8>
 800bbfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbfe:	2b15      	cmp	r3, #21
 800bc00:	d8f6      	bhi.n	800bbf0 <_printf_i+0x28>
 800bc02:	a101      	add	r1, pc, #4	; (adr r1, 800bc08 <_printf_i+0x40>)
 800bc04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc08:	0800bc61 	.word	0x0800bc61
 800bc0c:	0800bc75 	.word	0x0800bc75
 800bc10:	0800bbf1 	.word	0x0800bbf1
 800bc14:	0800bbf1 	.word	0x0800bbf1
 800bc18:	0800bbf1 	.word	0x0800bbf1
 800bc1c:	0800bbf1 	.word	0x0800bbf1
 800bc20:	0800bc75 	.word	0x0800bc75
 800bc24:	0800bbf1 	.word	0x0800bbf1
 800bc28:	0800bbf1 	.word	0x0800bbf1
 800bc2c:	0800bbf1 	.word	0x0800bbf1
 800bc30:	0800bbf1 	.word	0x0800bbf1
 800bc34:	0800bd81 	.word	0x0800bd81
 800bc38:	0800bca5 	.word	0x0800bca5
 800bc3c:	0800bd63 	.word	0x0800bd63
 800bc40:	0800bbf1 	.word	0x0800bbf1
 800bc44:	0800bbf1 	.word	0x0800bbf1
 800bc48:	0800bda3 	.word	0x0800bda3
 800bc4c:	0800bbf1 	.word	0x0800bbf1
 800bc50:	0800bca5 	.word	0x0800bca5
 800bc54:	0800bbf1 	.word	0x0800bbf1
 800bc58:	0800bbf1 	.word	0x0800bbf1
 800bc5c:	0800bd6b 	.word	0x0800bd6b
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	1d1a      	adds	r2, r3, #4
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	602a      	str	r2, [r5, #0]
 800bc68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc70:	2301      	movs	r3, #1
 800bc72:	e0a3      	b.n	800bdbc <_printf_i+0x1f4>
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	6829      	ldr	r1, [r5, #0]
 800bc78:	0606      	lsls	r6, r0, #24
 800bc7a:	f101 0304 	add.w	r3, r1, #4
 800bc7e:	d50a      	bpl.n	800bc96 <_printf_i+0xce>
 800bc80:	680e      	ldr	r6, [r1, #0]
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	da03      	bge.n	800bc90 <_printf_i+0xc8>
 800bc88:	232d      	movs	r3, #45	; 0x2d
 800bc8a:	4276      	negs	r6, r6
 800bc8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc90:	485e      	ldr	r0, [pc, #376]	; (800be0c <_printf_i+0x244>)
 800bc92:	230a      	movs	r3, #10
 800bc94:	e019      	b.n	800bcca <_printf_i+0x102>
 800bc96:	680e      	ldr	r6, [r1, #0]
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc9e:	bf18      	it	ne
 800bca0:	b236      	sxthne	r6, r6
 800bca2:	e7ef      	b.n	800bc84 <_printf_i+0xbc>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	6820      	ldr	r0, [r4, #0]
 800bca8:	1d19      	adds	r1, r3, #4
 800bcaa:	6029      	str	r1, [r5, #0]
 800bcac:	0601      	lsls	r1, r0, #24
 800bcae:	d501      	bpl.n	800bcb4 <_printf_i+0xec>
 800bcb0:	681e      	ldr	r6, [r3, #0]
 800bcb2:	e002      	b.n	800bcba <_printf_i+0xf2>
 800bcb4:	0646      	lsls	r6, r0, #25
 800bcb6:	d5fb      	bpl.n	800bcb0 <_printf_i+0xe8>
 800bcb8:	881e      	ldrh	r6, [r3, #0]
 800bcba:	4854      	ldr	r0, [pc, #336]	; (800be0c <_printf_i+0x244>)
 800bcbc:	2f6f      	cmp	r7, #111	; 0x6f
 800bcbe:	bf0c      	ite	eq
 800bcc0:	2308      	moveq	r3, #8
 800bcc2:	230a      	movne	r3, #10
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcca:	6865      	ldr	r5, [r4, #4]
 800bccc:	60a5      	str	r5, [r4, #8]
 800bcce:	2d00      	cmp	r5, #0
 800bcd0:	bfa2      	ittt	ge
 800bcd2:	6821      	ldrge	r1, [r4, #0]
 800bcd4:	f021 0104 	bicge.w	r1, r1, #4
 800bcd8:	6021      	strge	r1, [r4, #0]
 800bcda:	b90e      	cbnz	r6, 800bce0 <_printf_i+0x118>
 800bcdc:	2d00      	cmp	r5, #0
 800bcde:	d04d      	beq.n	800bd7c <_printf_i+0x1b4>
 800bce0:	4615      	mov	r5, r2
 800bce2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bce6:	fb03 6711 	mls	r7, r3, r1, r6
 800bcea:	5dc7      	ldrb	r7, [r0, r7]
 800bcec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcf0:	4637      	mov	r7, r6
 800bcf2:	42bb      	cmp	r3, r7
 800bcf4:	460e      	mov	r6, r1
 800bcf6:	d9f4      	bls.n	800bce2 <_printf_i+0x11a>
 800bcf8:	2b08      	cmp	r3, #8
 800bcfa:	d10b      	bne.n	800bd14 <_printf_i+0x14c>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	07de      	lsls	r6, r3, #31
 800bd00:	d508      	bpl.n	800bd14 <_printf_i+0x14c>
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	6861      	ldr	r1, [r4, #4]
 800bd06:	4299      	cmp	r1, r3
 800bd08:	bfde      	ittt	le
 800bd0a:	2330      	movle	r3, #48	; 0x30
 800bd0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd14:	1b52      	subs	r2, r2, r5
 800bd16:	6122      	str	r2, [r4, #16]
 800bd18:	f8cd a000 	str.w	sl, [sp]
 800bd1c:	464b      	mov	r3, r9
 800bd1e:	aa03      	add	r2, sp, #12
 800bd20:	4621      	mov	r1, r4
 800bd22:	4640      	mov	r0, r8
 800bd24:	f7ff fee2 	bl	800baec <_printf_common>
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d14c      	bne.n	800bdc6 <_printf_i+0x1fe>
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	b004      	add	sp, #16
 800bd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd36:	4835      	ldr	r0, [pc, #212]	; (800be0c <_printf_i+0x244>)
 800bd38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd3c:	6829      	ldr	r1, [r5, #0]
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd44:	6029      	str	r1, [r5, #0]
 800bd46:	061d      	lsls	r5, r3, #24
 800bd48:	d514      	bpl.n	800bd74 <_printf_i+0x1ac>
 800bd4a:	07df      	lsls	r7, r3, #31
 800bd4c:	bf44      	itt	mi
 800bd4e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd52:	6023      	strmi	r3, [r4, #0]
 800bd54:	b91e      	cbnz	r6, 800bd5e <_printf_i+0x196>
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	f023 0320 	bic.w	r3, r3, #32
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	2310      	movs	r3, #16
 800bd60:	e7b0      	b.n	800bcc4 <_printf_i+0xfc>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	f043 0320 	orr.w	r3, r3, #32
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	2378      	movs	r3, #120	; 0x78
 800bd6c:	4828      	ldr	r0, [pc, #160]	; (800be10 <_printf_i+0x248>)
 800bd6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd72:	e7e3      	b.n	800bd3c <_printf_i+0x174>
 800bd74:	0659      	lsls	r1, r3, #25
 800bd76:	bf48      	it	mi
 800bd78:	b2b6      	uxthmi	r6, r6
 800bd7a:	e7e6      	b.n	800bd4a <_printf_i+0x182>
 800bd7c:	4615      	mov	r5, r2
 800bd7e:	e7bb      	b.n	800bcf8 <_printf_i+0x130>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	6826      	ldr	r6, [r4, #0]
 800bd84:	6961      	ldr	r1, [r4, #20]
 800bd86:	1d18      	adds	r0, r3, #4
 800bd88:	6028      	str	r0, [r5, #0]
 800bd8a:	0635      	lsls	r5, r6, #24
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	d501      	bpl.n	800bd94 <_printf_i+0x1cc>
 800bd90:	6019      	str	r1, [r3, #0]
 800bd92:	e002      	b.n	800bd9a <_printf_i+0x1d2>
 800bd94:	0670      	lsls	r0, r6, #25
 800bd96:	d5fb      	bpl.n	800bd90 <_printf_i+0x1c8>
 800bd98:	8019      	strh	r1, [r3, #0]
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6123      	str	r3, [r4, #16]
 800bd9e:	4615      	mov	r5, r2
 800bda0:	e7ba      	b.n	800bd18 <_printf_i+0x150>
 800bda2:	682b      	ldr	r3, [r5, #0]
 800bda4:	1d1a      	adds	r2, r3, #4
 800bda6:	602a      	str	r2, [r5, #0]
 800bda8:	681d      	ldr	r5, [r3, #0]
 800bdaa:	6862      	ldr	r2, [r4, #4]
 800bdac:	2100      	movs	r1, #0
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f7f4 fa16 	bl	80001e0 <memchr>
 800bdb4:	b108      	cbz	r0, 800bdba <_printf_i+0x1f2>
 800bdb6:	1b40      	subs	r0, r0, r5
 800bdb8:	6060      	str	r0, [r4, #4]
 800bdba:	6863      	ldr	r3, [r4, #4]
 800bdbc:	6123      	str	r3, [r4, #16]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc4:	e7a8      	b.n	800bd18 <_printf_i+0x150>
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	462a      	mov	r2, r5
 800bdca:	4649      	mov	r1, r9
 800bdcc:	4640      	mov	r0, r8
 800bdce:	47d0      	blx	sl
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d0ab      	beq.n	800bd2c <_printf_i+0x164>
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	079b      	lsls	r3, r3, #30
 800bdd8:	d413      	bmi.n	800be02 <_printf_i+0x23a>
 800bdda:	68e0      	ldr	r0, [r4, #12]
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	4298      	cmp	r0, r3
 800bde0:	bfb8      	it	lt
 800bde2:	4618      	movlt	r0, r3
 800bde4:	e7a4      	b.n	800bd30 <_printf_i+0x168>
 800bde6:	2301      	movs	r3, #1
 800bde8:	4632      	mov	r2, r6
 800bdea:	4649      	mov	r1, r9
 800bdec:	4640      	mov	r0, r8
 800bdee:	47d0      	blx	sl
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	d09b      	beq.n	800bd2c <_printf_i+0x164>
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	68e3      	ldr	r3, [r4, #12]
 800bdf8:	9903      	ldr	r1, [sp, #12]
 800bdfa:	1a5b      	subs	r3, r3, r1
 800bdfc:	42ab      	cmp	r3, r5
 800bdfe:	dcf2      	bgt.n	800bde6 <_printf_i+0x21e>
 800be00:	e7eb      	b.n	800bdda <_printf_i+0x212>
 800be02:	2500      	movs	r5, #0
 800be04:	f104 0619 	add.w	r6, r4, #25
 800be08:	e7f5      	b.n	800bdf6 <_printf_i+0x22e>
 800be0a:	bf00      	nop
 800be0c:	0800c4d7 	.word	0x0800c4d7
 800be10:	0800c4e8 	.word	0x0800c4e8

0800be14 <memcpy>:
 800be14:	440a      	add	r2, r1
 800be16:	4291      	cmp	r1, r2
 800be18:	f100 33ff 	add.w	r3, r0, #4294967295
 800be1c:	d100      	bne.n	800be20 <memcpy+0xc>
 800be1e:	4770      	bx	lr
 800be20:	b510      	push	{r4, lr}
 800be22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be2a:	4291      	cmp	r1, r2
 800be2c:	d1f9      	bne.n	800be22 <memcpy+0xe>
 800be2e:	bd10      	pop	{r4, pc}

0800be30 <memmove>:
 800be30:	4288      	cmp	r0, r1
 800be32:	b510      	push	{r4, lr}
 800be34:	eb01 0402 	add.w	r4, r1, r2
 800be38:	d902      	bls.n	800be40 <memmove+0x10>
 800be3a:	4284      	cmp	r4, r0
 800be3c:	4623      	mov	r3, r4
 800be3e:	d807      	bhi.n	800be50 <memmove+0x20>
 800be40:	1e43      	subs	r3, r0, #1
 800be42:	42a1      	cmp	r1, r4
 800be44:	d008      	beq.n	800be58 <memmove+0x28>
 800be46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be4e:	e7f8      	b.n	800be42 <memmove+0x12>
 800be50:	4402      	add	r2, r0
 800be52:	4601      	mov	r1, r0
 800be54:	428a      	cmp	r2, r1
 800be56:	d100      	bne.n	800be5a <memmove+0x2a>
 800be58:	bd10      	pop	{r4, pc}
 800be5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be62:	e7f7      	b.n	800be54 <memmove+0x24>

0800be64 <_free_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4605      	mov	r5, r0
 800be68:	2900      	cmp	r1, #0
 800be6a:	d041      	beq.n	800bef0 <_free_r+0x8c>
 800be6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be70:	1f0c      	subs	r4, r1, #4
 800be72:	2b00      	cmp	r3, #0
 800be74:	bfb8      	it	lt
 800be76:	18e4      	addlt	r4, r4, r3
 800be78:	f000 f912 	bl	800c0a0 <__malloc_lock>
 800be7c:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <_free_r+0x90>)
 800be7e:	6813      	ldr	r3, [r2, #0]
 800be80:	b933      	cbnz	r3, 800be90 <_free_r+0x2c>
 800be82:	6063      	str	r3, [r4, #4]
 800be84:	6014      	str	r4, [r2, #0]
 800be86:	4628      	mov	r0, r5
 800be88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be8c:	f000 b90e 	b.w	800c0ac <__malloc_unlock>
 800be90:	42a3      	cmp	r3, r4
 800be92:	d908      	bls.n	800bea6 <_free_r+0x42>
 800be94:	6820      	ldr	r0, [r4, #0]
 800be96:	1821      	adds	r1, r4, r0
 800be98:	428b      	cmp	r3, r1
 800be9a:	bf01      	itttt	eq
 800be9c:	6819      	ldreq	r1, [r3, #0]
 800be9e:	685b      	ldreq	r3, [r3, #4]
 800bea0:	1809      	addeq	r1, r1, r0
 800bea2:	6021      	streq	r1, [r4, #0]
 800bea4:	e7ed      	b.n	800be82 <_free_r+0x1e>
 800bea6:	461a      	mov	r2, r3
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	b10b      	cbz	r3, 800beb0 <_free_r+0x4c>
 800beac:	42a3      	cmp	r3, r4
 800beae:	d9fa      	bls.n	800bea6 <_free_r+0x42>
 800beb0:	6811      	ldr	r1, [r2, #0]
 800beb2:	1850      	adds	r0, r2, r1
 800beb4:	42a0      	cmp	r0, r4
 800beb6:	d10b      	bne.n	800bed0 <_free_r+0x6c>
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	4401      	add	r1, r0
 800bebc:	1850      	adds	r0, r2, r1
 800bebe:	4283      	cmp	r3, r0
 800bec0:	6011      	str	r1, [r2, #0]
 800bec2:	d1e0      	bne.n	800be86 <_free_r+0x22>
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	6053      	str	r3, [r2, #4]
 800beca:	4401      	add	r1, r0
 800becc:	6011      	str	r1, [r2, #0]
 800bece:	e7da      	b.n	800be86 <_free_r+0x22>
 800bed0:	d902      	bls.n	800bed8 <_free_r+0x74>
 800bed2:	230c      	movs	r3, #12
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	e7d6      	b.n	800be86 <_free_r+0x22>
 800bed8:	6820      	ldr	r0, [r4, #0]
 800beda:	1821      	adds	r1, r4, r0
 800bedc:	428b      	cmp	r3, r1
 800bede:	bf04      	itt	eq
 800bee0:	6819      	ldreq	r1, [r3, #0]
 800bee2:	685b      	ldreq	r3, [r3, #4]
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	bf04      	itt	eq
 800bee8:	1809      	addeq	r1, r1, r0
 800beea:	6021      	streq	r1, [r4, #0]
 800beec:	6054      	str	r4, [r2, #4]
 800beee:	e7ca      	b.n	800be86 <_free_r+0x22>
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	20000ec0 	.word	0x20000ec0

0800bef8 <sbrk_aligned>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	4e0e      	ldr	r6, [pc, #56]	; (800bf34 <sbrk_aligned+0x3c>)
 800befc:	460c      	mov	r4, r1
 800befe:	6831      	ldr	r1, [r6, #0]
 800bf00:	4605      	mov	r5, r0
 800bf02:	b911      	cbnz	r1, 800bf0a <sbrk_aligned+0x12>
 800bf04:	f000 f8bc 	bl	800c080 <_sbrk_r>
 800bf08:	6030      	str	r0, [r6, #0]
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f000 f8b7 	bl	800c080 <_sbrk_r>
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	d00a      	beq.n	800bf2c <sbrk_aligned+0x34>
 800bf16:	1cc4      	adds	r4, r0, #3
 800bf18:	f024 0403 	bic.w	r4, r4, #3
 800bf1c:	42a0      	cmp	r0, r4
 800bf1e:	d007      	beq.n	800bf30 <sbrk_aligned+0x38>
 800bf20:	1a21      	subs	r1, r4, r0
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f8ac 	bl	800c080 <_sbrk_r>
 800bf28:	3001      	adds	r0, #1
 800bf2a:	d101      	bne.n	800bf30 <sbrk_aligned+0x38>
 800bf2c:	f04f 34ff 	mov.w	r4, #4294967295
 800bf30:	4620      	mov	r0, r4
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	20000ec4 	.word	0x20000ec4

0800bf38 <_malloc_r>:
 800bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3c:	1ccd      	adds	r5, r1, #3
 800bf3e:	f025 0503 	bic.w	r5, r5, #3
 800bf42:	3508      	adds	r5, #8
 800bf44:	2d0c      	cmp	r5, #12
 800bf46:	bf38      	it	cc
 800bf48:	250c      	movcc	r5, #12
 800bf4a:	2d00      	cmp	r5, #0
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	db01      	blt.n	800bf54 <_malloc_r+0x1c>
 800bf50:	42a9      	cmp	r1, r5
 800bf52:	d905      	bls.n	800bf60 <_malloc_r+0x28>
 800bf54:	230c      	movs	r3, #12
 800bf56:	603b      	str	r3, [r7, #0]
 800bf58:	2600      	movs	r6, #0
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf60:	4e2e      	ldr	r6, [pc, #184]	; (800c01c <_malloc_r+0xe4>)
 800bf62:	f000 f89d 	bl	800c0a0 <__malloc_lock>
 800bf66:	6833      	ldr	r3, [r6, #0]
 800bf68:	461c      	mov	r4, r3
 800bf6a:	bb34      	cbnz	r4, 800bfba <_malloc_r+0x82>
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	4638      	mov	r0, r7
 800bf70:	f7ff ffc2 	bl	800bef8 <sbrk_aligned>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	4604      	mov	r4, r0
 800bf78:	d14d      	bne.n	800c016 <_malloc_r+0xde>
 800bf7a:	6834      	ldr	r4, [r6, #0]
 800bf7c:	4626      	mov	r6, r4
 800bf7e:	2e00      	cmp	r6, #0
 800bf80:	d140      	bne.n	800c004 <_malloc_r+0xcc>
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	4631      	mov	r1, r6
 800bf86:	4638      	mov	r0, r7
 800bf88:	eb04 0803 	add.w	r8, r4, r3
 800bf8c:	f000 f878 	bl	800c080 <_sbrk_r>
 800bf90:	4580      	cmp	r8, r0
 800bf92:	d13a      	bne.n	800c00a <_malloc_r+0xd2>
 800bf94:	6821      	ldr	r1, [r4, #0]
 800bf96:	3503      	adds	r5, #3
 800bf98:	1a6d      	subs	r5, r5, r1
 800bf9a:	f025 0503 	bic.w	r5, r5, #3
 800bf9e:	3508      	adds	r5, #8
 800bfa0:	2d0c      	cmp	r5, #12
 800bfa2:	bf38      	it	cc
 800bfa4:	250c      	movcc	r5, #12
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	f7ff ffa5 	bl	800bef8 <sbrk_aligned>
 800bfae:	3001      	adds	r0, #1
 800bfb0:	d02b      	beq.n	800c00a <_malloc_r+0xd2>
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	442b      	add	r3, r5
 800bfb6:	6023      	str	r3, [r4, #0]
 800bfb8:	e00e      	b.n	800bfd8 <_malloc_r+0xa0>
 800bfba:	6822      	ldr	r2, [r4, #0]
 800bfbc:	1b52      	subs	r2, r2, r5
 800bfbe:	d41e      	bmi.n	800bffe <_malloc_r+0xc6>
 800bfc0:	2a0b      	cmp	r2, #11
 800bfc2:	d916      	bls.n	800bff2 <_malloc_r+0xba>
 800bfc4:	1961      	adds	r1, r4, r5
 800bfc6:	42a3      	cmp	r3, r4
 800bfc8:	6025      	str	r5, [r4, #0]
 800bfca:	bf18      	it	ne
 800bfcc:	6059      	strne	r1, [r3, #4]
 800bfce:	6863      	ldr	r3, [r4, #4]
 800bfd0:	bf08      	it	eq
 800bfd2:	6031      	streq	r1, [r6, #0]
 800bfd4:	5162      	str	r2, [r4, r5]
 800bfd6:	604b      	str	r3, [r1, #4]
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f104 060b 	add.w	r6, r4, #11
 800bfde:	f000 f865 	bl	800c0ac <__malloc_unlock>
 800bfe2:	f026 0607 	bic.w	r6, r6, #7
 800bfe6:	1d23      	adds	r3, r4, #4
 800bfe8:	1af2      	subs	r2, r6, r3
 800bfea:	d0b6      	beq.n	800bf5a <_malloc_r+0x22>
 800bfec:	1b9b      	subs	r3, r3, r6
 800bfee:	50a3      	str	r3, [r4, r2]
 800bff0:	e7b3      	b.n	800bf5a <_malloc_r+0x22>
 800bff2:	6862      	ldr	r2, [r4, #4]
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	bf0c      	ite	eq
 800bff8:	6032      	streq	r2, [r6, #0]
 800bffa:	605a      	strne	r2, [r3, #4]
 800bffc:	e7ec      	b.n	800bfd8 <_malloc_r+0xa0>
 800bffe:	4623      	mov	r3, r4
 800c000:	6864      	ldr	r4, [r4, #4]
 800c002:	e7b2      	b.n	800bf6a <_malloc_r+0x32>
 800c004:	4634      	mov	r4, r6
 800c006:	6876      	ldr	r6, [r6, #4]
 800c008:	e7b9      	b.n	800bf7e <_malloc_r+0x46>
 800c00a:	230c      	movs	r3, #12
 800c00c:	603b      	str	r3, [r7, #0]
 800c00e:	4638      	mov	r0, r7
 800c010:	f000 f84c 	bl	800c0ac <__malloc_unlock>
 800c014:	e7a1      	b.n	800bf5a <_malloc_r+0x22>
 800c016:	6025      	str	r5, [r4, #0]
 800c018:	e7de      	b.n	800bfd8 <_malloc_r+0xa0>
 800c01a:	bf00      	nop
 800c01c:	20000ec0 	.word	0x20000ec0

0800c020 <_realloc_r>:
 800c020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c024:	4680      	mov	r8, r0
 800c026:	4614      	mov	r4, r2
 800c028:	460e      	mov	r6, r1
 800c02a:	b921      	cbnz	r1, 800c036 <_realloc_r+0x16>
 800c02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c030:	4611      	mov	r1, r2
 800c032:	f7ff bf81 	b.w	800bf38 <_malloc_r>
 800c036:	b92a      	cbnz	r2, 800c044 <_realloc_r+0x24>
 800c038:	f7ff ff14 	bl	800be64 <_free_r>
 800c03c:	4625      	mov	r5, r4
 800c03e:	4628      	mov	r0, r5
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c044:	f000 f838 	bl	800c0b8 <_malloc_usable_size_r>
 800c048:	4284      	cmp	r4, r0
 800c04a:	4607      	mov	r7, r0
 800c04c:	d802      	bhi.n	800c054 <_realloc_r+0x34>
 800c04e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c052:	d812      	bhi.n	800c07a <_realloc_r+0x5a>
 800c054:	4621      	mov	r1, r4
 800c056:	4640      	mov	r0, r8
 800c058:	f7ff ff6e 	bl	800bf38 <_malloc_r>
 800c05c:	4605      	mov	r5, r0
 800c05e:	2800      	cmp	r0, #0
 800c060:	d0ed      	beq.n	800c03e <_realloc_r+0x1e>
 800c062:	42bc      	cmp	r4, r7
 800c064:	4622      	mov	r2, r4
 800c066:	4631      	mov	r1, r6
 800c068:	bf28      	it	cs
 800c06a:	463a      	movcs	r2, r7
 800c06c:	f7ff fed2 	bl	800be14 <memcpy>
 800c070:	4631      	mov	r1, r6
 800c072:	4640      	mov	r0, r8
 800c074:	f7ff fef6 	bl	800be64 <_free_r>
 800c078:	e7e1      	b.n	800c03e <_realloc_r+0x1e>
 800c07a:	4635      	mov	r5, r6
 800c07c:	e7df      	b.n	800c03e <_realloc_r+0x1e>
	...

0800c080 <_sbrk_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d06      	ldr	r5, [pc, #24]	; (800c09c <_sbrk_r+0x1c>)
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	602b      	str	r3, [r5, #0]
 800c08c:	f7f9 fdec 	bl	8005c68 <_sbrk>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d102      	bne.n	800c09a <_sbrk_r+0x1a>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	b103      	cbz	r3, 800c09a <_sbrk_r+0x1a>
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	20000ec8 	.word	0x20000ec8

0800c0a0 <__malloc_lock>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	; (800c0a8 <__malloc_lock+0x8>)
 800c0a2:	f000 b811 	b.w	800c0c8 <__retarget_lock_acquire_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	20000ecc 	.word	0x20000ecc

0800c0ac <__malloc_unlock>:
 800c0ac:	4801      	ldr	r0, [pc, #4]	; (800c0b4 <__malloc_unlock+0x8>)
 800c0ae:	f000 b80c 	b.w	800c0ca <__retarget_lock_release_recursive>
 800c0b2:	bf00      	nop
 800c0b4:	20000ecc 	.word	0x20000ecc

0800c0b8 <_malloc_usable_size_r>:
 800c0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0bc:	1f18      	subs	r0, r3, #4
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bfbc      	itt	lt
 800c0c2:	580b      	ldrlt	r3, [r1, r0]
 800c0c4:	18c0      	addlt	r0, r0, r3
 800c0c6:	4770      	bx	lr

0800c0c8 <__retarget_lock_acquire_recursive>:
 800c0c8:	4770      	bx	lr

0800c0ca <__retarget_lock_release_recursive>:
 800c0ca:	4770      	bx	lr

0800c0cc <_init>:
 800c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ce:	bf00      	nop
 800c0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d2:	bc08      	pop	{r3}
 800c0d4:	469e      	mov	lr, r3
 800c0d6:	4770      	bx	lr

0800c0d8 <_fini>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr
